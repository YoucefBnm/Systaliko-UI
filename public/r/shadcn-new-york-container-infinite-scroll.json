{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shadcn-new-york-container-infinite-scroll",
  "type": "registry:block",
  "title": "Lazy Load/Infinite Scroll Container",
  "description": "Infinite scroll container for optimizing the loading of large data sets, with a customizable threshold and a configurable loading indicator with shadcn-new-york style.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "https://systaliko-ui.vercel.app/r/default-skelton"
  ],
  "files": [
    {
      "path": "__registry__/containers/container-infinite-scroll/shadcn-new-york/index.tsx",
      "content": "'use client';\nimport * as React from 'react';\nimport { motion, useInView } from 'motion/react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { cn } from '@/lib/utils';\n\nfunction SkeltonWrapper() {\n  return (\n    <div className=\" space-y-5 p-4\">\n      <Skeleton className=\"size-12 rounded-full\" />\n      <Skeleton className=\"h-10 w-2/3\" />\n      <Skeleton className=\"h-48 w-full\" />\n    </div>\n  );\n}\nfunction Spinner() {\n  return (\n    <div className=\"inline-block size-6 animate-spin rounded-full border-2 border-gray-200 border-t-gray-900\" />\n  );\n}\ninterface CellInfiniteScrollProps extends React.HTMLAttributes<HTMLDivElement> {\n  isPending: boolean;\n  SkeltonComp?: React.ComponentType | React.ReactElement;\n}\nexport function CellInfiniteScroll({\n  isPending,\n  SkeltonComp = SkeltonWrapper,\n  children,\n  className,\n}: CellInfiniteScrollProps) {\n  const revealRef = React.useRef<HTMLDivElement | null>(null);\n\n  const isInView = useInView(revealRef, {\n    once: true,\n    amount: 0.2,\n  });\n\n  return (\n    <div className={cn('relative', className)}>\n      {isPending || !isInView ? (\n        <motion.div\n          initial=\"visible\"\n          animate={\n            !isInView || isPending\n              ? { opacity: 1, display: 'block' }\n              : { opacity: 0, display: 'none' }\n          }\n        >\n          {typeof SkeltonComp === 'function' ? <SkeltonComp /> : SkeltonComp}\n        </motion.div>\n      ) : (\n        <motion.div initial=\"hidden\" animate={isInView ? 'visible' : 'hidden'}>\n          {children}\n        </motion.div>\n      )}\n      <div ref={revealRef} />\n    </div>\n  );\n}\n\ninterface ContainerInfiniteScrollProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  items: unknown[];\n  isPending: boolean;\n  itemsCount: number | null | undefined;\n  loadMore: () => void;\n  Loader?: React.ComponentType | React.ReactElement;\n}\nexport function ContainerInfiniteScroll({\n  items,\n  isPending,\n  itemsCount,\n  loadMore,\n  Loader = Spinner,\n  children,\n  className,\n}: ContainerInfiniteScrollProps) {\n  const observerRef = React.useRef<HTMLDivElement | null>(null);\n  const allLoaded = items.length === itemsCount;\n  const hasMore = isPending && !allLoaded && items.length > 0;\n  React.useEffect(() => {\n    const { current } = observerRef;\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting && !allLoaded && items.length > 0) {\n          loadMore();\n        }\n      },\n      { threshold: 1 },\n    );\n\n    if (current) {\n      observer.observe(current);\n    }\n\n    return () => {\n      if (current) {\n        observer.unobserve(current);\n      }\n    };\n  });\n\n  return (\n    <div className={className}>\n      {children}\n      {items.length > 0 && itemsCount && items.length < itemsCount && (\n        <div ref={observerRef} />\n      )}\n      {hasMore && (typeof Loader === 'function' ? <Loader /> : Loader)}\n    </div>\n  );\n}\n",
      "type": "registry:block",
      "target": "components/systaliko-ui/containers/container-infinite-scroll.tsx"
    }
  ]
}