{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shadcn-new-york-clipped-shape",
  "type": "registry:ui",
  "title": "Clipped shape",
  "description": "Clipped shape background with shadcn-new-york style.",
  "files": [
    {
      "path": "__registry__/backgrounds/clipped-shape/shadcn-new-york/index.tsx",
      "content": "'use client';\nimport { cn } from '@/lib/utils';\nimport * as React from 'react';\n\nexport type ClippedShapeType = 'polygon' | 'polygon2' | 'polygon3' | 'polygon4';\n\nexport const clipPathVariants = (clipPathHeight: number) => ({\n  polygon: `polygon(${clipPathHeight || 50}px 0, 100% 0, 100% 100%, 0 100%, 0 ${clipPathHeight || 50}px)`,\n  polygon2: `polygon(calc(100% - ${clipPathHeight || 50}px) 0, 100% ${clipPathHeight || 50}px, 100% 100%, 0 100%, 0 0)`,\n  polygon3: `polygon(100% 0, 100% calc(100% - ${clipPathHeight || 50}px), calc(100% - ${clipPathHeight || 50}px) 100%, 0 100%, 0 0)`,\n  polygon4: `polygon(100% 0, 100% 100%, ${clipPathHeight || 50}px 100%, 0 calc(100% - ${clipPathHeight || 50}px), 0 0)`,\n  triangle: `polygon(50% 0, 100% 100%, 0 100%)`,\n});\n\ninterface ClippedShapeProps extends React.HTMLAttributes<HTMLDivElement> {\n  clipHeight?: number;\n  shape?: ClippedShapeType;\n}\nconst ClippedShapeContext = React.createContext<\n  { clipHeight: number; shape: ClippedShapeType } | undefined\n>(undefined);\nexport function useClippedShapeContext() {\n  const context = React.useContext(ClippedShapeContext);\n  if (!context) {\n    throw new Error(\n      'useClippedShapeContext must be used within a ClippedShapeContextProvider',\n    );\n  }\n  return context;\n}\n\nexport const ClippedShape = React.forwardRef<HTMLDivElement, ClippedShapeProps>(\n  ({ clipHeight = 50, shape = 'polygon2', className, ...props }, ref) => {\n    return (\n      <ClippedShapeContext.Provider value={{ clipHeight, shape }}>\n        <div className={cn('relative', className)} {...props} ref={ref} />\n      </ClippedShapeContext.Provider>\n    );\n  },\n);\nClippedShape.displayName = 'ClippedShapeProps';\n\nexport const ClippedShapeBg = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, style, ...props }, ref) => {\n  const { clipHeight, shape } = useClippedShapeContext();\n  const clipPath = clipPathVariants(clipHeight)[shape];\n  return (\n    <div\n      className={cn('absolute -z-10 inset-0 size-full', className)}\n      style={{\n        clipPath,\n        ...style,\n      }}\n      {...props}\n      ref={ref}\n    />\n  );\n});\nClippedShapeBg.displayName = 'ClippedShapeBg';\n\nexport const ClippedShapeBorder = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { borderWidth?: number }\n>(({ borderWidth = 2, className, style, ...props }, ref) => {\n  const { clipHeight, shape } = useClippedShapeContext();\n  const clipPath = clipPathVariants(clipHeight)[shape];\n  const borderOffset = String(borderWidth * 2);\n  return (\n    <div\n      className={cn('absolute  size-full -z-20', className)}\n      style={{\n        clipPath,\n        width: `calc(100% + ${borderOffset}px)`,\n        height: `calc(100% + ${borderOffset}px)`,\n        left: `-${borderWidth}px`,\n        top: `-${borderWidth}px`,\n        ...style,\n      }}\n      {...props}\n      ref={ref}\n    />\n  );\n});\nClippedShapeBorder.displayName = 'ClippedShapeBorder';\n",
      "type": "registry:ui",
      "target": "components/systaliko-ui/backgrounds/clipped-shape.tsx"
    }
  ]
}