{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shadcn-default-card-curtain-reveal",
  "type": "registry:ui",
  "title": "Curtain Reveal Card",
  "description": "Interactive card component with open curtain to see content on hover gesture with shadcn-default style.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "systaliko-ui.vercel.app/r/card-curtain-reveal"
  ],
  "files": [
    {
      "path": "__registry__/cards/card-curtain-reveal/shadcn-default/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { HTMLMotionProps, Variants, motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst curtainVriants: Variants = {\n  visible: {\n    clipPath: 'polygon(0 0,100% 0,100% 100%,0 100%)',\n    transition: {\n      duration: 0.4,\n      ease: ['easeOut', [0.25, 1.5, 0.5, 1]],\n    },\n  },\n\n  hidden: {\n    clipPath: 'polygon(50% 0,50% 0,50% 100%,50% 100%)',\n    transition: {\n      duration: 0.3,\n      ease: ['easeOut', [0.25, 1.5, 0.5, 1]],\n    },\n  },\n};\n\ninterface CardCurtainRevealContextValue {\n  isMouseIn: boolean;\n}\nconst CardCurtainRevealContext = React.createContext<\n  CardCurtainRevealContextValue | undefined\n>(undefined);\nfunction useCardCurtainRevealContext() {\n  const context = React.useContext(CardCurtainRevealContext);\n  if (!context) {\n    throw new Error(\n      'useCardCurtainRevealContext must be used within a CardCurtainReveal Component',\n    );\n  }\n  return context;\n}\n\nconst CardCurtainReveal = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ children, className, ...props }, ref) => {\n  const [isMouseIn, setIsMouseIn] = React.useState(false);\n  const handleMouseEnter = React.useCallback(() => setIsMouseIn(true), []);\n  const handleMouseLeave = React.useCallback(() => setIsMouseIn(false), []);\n\n  return (\n    <CardCurtainRevealContext.Provider value={{ isMouseIn }}>\n      <div\n        ref={ref}\n        className={cn(\n          'relative flex flex-col gap-2 overflow-hidden',\n          className,\n        )}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        {children}\n      </div>\n    </CardCurtainRevealContext.Provider>\n  );\n});\nCardCurtainReveal.displayName = 'CardCurtainReveal';\n\nconst CardCurtainRevealFooter = React.forwardRef<\n  HTMLDivElement,\n  HTMLMotionProps<'div'>\n>(({ className, ...props }, ref) => {\n  const { isMouseIn } = useCardCurtainRevealContext();\n\n  return (\n    <motion.div\n      ref={ref}\n      className={className}\n      variants={curtainVriants}\n      animate={isMouseIn ? 'visible' : 'hidden'}\n      {...props}\n    />\n  );\n});\nCardCurtainRevealFooter.displayName = 'CardCurtainReveal';\n\nconst CardCurtainRevealBody = React.forwardRef<\n  HTMLDivElement,\n  React.HtmlHTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  return <div ref={ref} className={cn('flex-1 p-6', className)} {...props} />;\n});\nCardCurtainRevealBody.displayName = 'CardCurtainRevealBody';\n\nconst CardCurtainRevealTitle = React.forwardRef<\n  HTMLHeadingElement,\n  HTMLMotionProps<'h2'>\n>(({ className, ...props }, ref) => {\n  const { isMouseIn } = useCardCurtainRevealContext();\n\n  return (\n    <motion.h2\n      ref={ref}\n      className={className}\n      animate={isMouseIn ? { y: 0 } : { y: 170 }}\n      transition={{ duration: 0.3, ease: 'easeOut' }}\n      {...props}\n    />\n  );\n});\nCardCurtainRevealTitle.displayName = 'CardCurtainRevealTitle';\n\nconst CardCurtain = React.forwardRef<HTMLDivElement, HTMLMotionProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    const { isMouseIn } = useCardCurtainRevealContext();\n\n    return (\n      <motion.div\n        ref={ref}\n        className={cn(\n          'pointer-events-none absolute inset-0 size-full mix-blend-difference',\n          className,\n        )}\n        variants={curtainVriants}\n        animate={isMouseIn ? 'visible' : 'hidden'}\n        {...props}\n      />\n    );\n  },\n);\nCardCurtain.displayName = 'CardCurtain';\n\nconst CardCurtainRevealDescription = React.forwardRef<\n  HTMLDivElement,\n  HTMLMotionProps<'div'>\n>(({ className, ...props }, ref) => {\n  const { isMouseIn } = useCardCurtainRevealContext();\n\n  return (\n    <motion.div\n      ref={ref}\n      className={className}\n      variants={curtainVriants}\n      animate={isMouseIn ? 'visible' : 'hidden'}\n      {...props}\n    />\n  );\n});\nCardCurtainRevealDescription.displayName = 'CardCurtainRevealDescription';\n\nexport {\n  CardCurtainReveal,\n  CardCurtainRevealBody,\n  CardCurtainRevealFooter,\n  CardCurtainRevealDescription,\n  CardCurtainRevealTitle,\n  CardCurtain,\n};\n",
      "type": "registry:ui",
      "target": "components/systaliko-ui/cards/card-curtain-reveal.tsx"
    }
  ]
}