{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shadcn-default-section-gallery",
  "type": "registry:block",
  "title": "Gallery Section",
  "description": "Gallery section with text, and staggred grid images, and cta button with shadcn-default style.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "https://systaliko-ui.vercel.app/r/default-use-animation-variants"
  ],
  "files": [
    {
      "path": "__registry__/section-gallery/shadcn-default/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/lib/utils';\nimport { HTMLMotionProps, motion, MotionConfig } from 'motion/react';\nimport {\n  AnimationT,\n  useAnimationVariants,\n} from '@/components/systaliko-ui/utils/use-animation-variants';\n\ninterface SectionGalleryProps extends React.HTMLAttributes<HTMLDivElement> {\n  heading: string;\n  title?: string;\n  description?: string;\n}\ninterface SectionGalleryContextValue {\n  heading: string;\n  title?: string;\n  description?: string;\n}\ninterface AnimatedItemProps {\n  animation?: AnimationT;\n}\nconst SectionGalleryContext = React.createContext<\n  SectionGalleryContextValue | undefined\n>(undefined);\nfunction useSectionGalleryContext() {\n  const context = React.useContext(SectionGalleryContext);\n  if (context === undefined) {\n    throw new Error(\n      'useSectionGalleryContext must be used within a SectionGalleryProvider',\n    );\n  }\n  return context;\n}\nexport const SectionGallery = React.forwardRef<\n  HTMLDivElement,\n  SectionGalleryProps\n>(({ heading, title, description, children, className, ...props }, ref) => {\n  return (\n    <SectionGalleryContext.Provider\n      value={{\n        heading,\n        title,\n        description,\n      }}\n    >\n      <section ref={ref} className={cn('relative', className)} {...props}>\n        {children}\n      </section>\n    </SectionGalleryContext.Provider>\n  );\n});\nSectionGallery.displayName = 'SectionGallery';\nexport const SectionGalleryTitle = React.forwardRef<\n  HTMLHeadingElement,\n  HTMLMotionProps<'h4'> & AnimatedItemProps\n>(({ className, animation, ...props }, ref) => {\n  const animationVariants = useAnimationVariants(animation);\n  const { title } = useSectionGalleryContext();\n  return (\n    <motion.h4\n      className={cn(\n        'capitalize tracking-wide text-xs font-medium md:text-sm',\n        className,\n      )}\n      variants={animationVariants}\n      ref={ref}\n      {...props}\n    >\n      {title}\n    </motion.h4>\n  );\n});\nSectionGalleryTitle.displayName = 'SectionGalleryTitle';\n\nexport const SectionGalleryHeading = React.forwardRef<\n  HTMLHeadingElement,\n  HTMLMotionProps<'h2'> & AnimatedItemProps\n>(({ className, animation, ...props }, ref) => {\n  const animationVariants = useAnimationVariants(animation);\n  const { heading } = useSectionGalleryContext();\n\n  return (\n    <motion.h2\n      className={cn(\n        'text-4xl font-semibold md:text-5xl tracking-tight\">',\n        className,\n      )}\n      variants={animationVariants}\n      ref={ref}\n      {...props}\n    >\n      {heading}\n    </motion.h2>\n  );\n});\nSectionGalleryHeading.displayName = 'SectionGalleryHeading';\n\nexport const SectionGalleryCta = React.forwardRef<\n  HTMLDivElement,\n  HTMLMotionProps<'div'> & AnimatedItemProps\n>(({ className, animation, ...props }, ref) => {\n  const animationVariants = useAnimationVariants(animation);\n\n  return (\n    <motion.div\n      className={className}\n      variants={animationVariants}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nSectionGalleryCta.displayName = 'SectionGalleryCta';\n\nexport const SectionGalleryAnimationContainer = React.forwardRef<\n  HTMLDivElement,\n  HTMLMotionProps<'div'> & {\n    staggerValue?: number;\n    children: React.ReactNode;\n  }\n>(({ staggerValue = 0.2, children, className, transition, ...props }, ref) => {\n  return (\n    <motion.div\n      className={className}\n      initial=\"hidden\"\n      whileInView={'visible'}\n      viewport={{ once: true }}\n      transition={{ staggerChildren: staggerValue }}\n      ref={ref}\n      {...props}\n    >\n      <MotionConfig\n        transition={{\n          duration: 0.3,\n          ...transition,\n        }}\n      >\n        {children}\n      </MotionConfig>\n    </motion.div>\n  );\n});\nSectionGalleryAnimationContainer.displayName =\n  'SectionGalleryAnimationContainer';\n\nexport const SectionGalleryDescription = React.forwardRef<\n  HTMLDivElement,\n  HTMLMotionProps<'p'> & AnimatedItemProps\n>(({ className, animation, ...props }, ref) => {\n  const animationVariants = useAnimationVariants(animation);\n  const { description } = useSectionGalleryContext();\n  return (\n    <motion.p\n      className={className}\n      variants={animationVariants}\n      ref={ref}\n      {...props}\n    >\n      {description}\n    </motion.p>\n  );\n});\nSectionGalleryDescription.displayName = 'SectionGalleryDescription';\n",
      "type": "registry:block",
      "target": "components/systaliko-ui/section-gallery.tsx"
    }
  ]
}