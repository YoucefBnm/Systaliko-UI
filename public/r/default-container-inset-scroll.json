{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "default-container-inset-scroll",
  "type": "registry:block",
  "title": "Animated Inset Container",
  "description": "Animate Inset on X axis, triggered by scroll position with default style.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "__registry__/containers/container-inset-scroll/default/index.tsx",
      "content": "'use client';\nimport * as React from 'react';\nimport {\n  HTMLMotionProps,\n  motion,\n  MotionValue,\n  useMotionTemplate,\n  useScroll,\n  useTransform,\n} from 'motion/react';\nimport { cn } from '@/lib/utils';\nimport { useSmoothScroll } from '@/components/systaliko-ui/utils/use-smooth-scroll';\n\ninterface ContainerScrollAnimationContextValue {\n  scrollYProgress: MotionValue<number>;\n}\nconst ContainerScrollAnimationContext = React.createContext<\n  ContainerScrollAnimationContextValue | undefined\n>(undefined);\n\nexport function useContainerScrollAnimationContext() {\n  const context = React.useContext(ContainerScrollAnimationContext);\n  if (!context) {\n    throw new Error(\n      'useContainerScrollAnimationContext must be used within a ContainerScrollAnimationContextProvider',\n    );\n  }\n  return context;\n}\n\nexport function ContainerScrollAnimation({\n  spacerClass,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & { spacerClass?: string }) {\n  const scrollRef = React.useRef<HTMLDivElement>(null);\n  const { scrollYProgress } = useScroll({\n    target: scrollRef,\n  });\n  useSmoothScroll();\n  return (\n    <ContainerScrollAnimationContext.Provider value={{ scrollYProgress }}>\n      <div ref={scrollRef} className={cn('relative', className)} {...props}>\n        {children}\n        <div className={cn('w-full h-96', spacerClass)} />\n      </div>\n    </ContainerScrollAnimationContext.Provider>\n  );\n}\n\nexport function ContainerScrollInset({\n  insetRange = [48, 0],\n  inputRange = [0, 1],\n  className,\n  style,\n  ...props\n}: HTMLMotionProps<'div'> & { insetRange?: number[]; inputRange?: number[] }) {\n  const { scrollYProgress } = useContainerScrollAnimationContext();\n  const xInset = useTransform(scrollYProgress, inputRange, insetRange);\n  const clipPath = useMotionTemplate`inset(0px ${xInset}px)`;\n  return (\n    <motion.div\n      className={className}\n      style={{ clipPath, ...style }}\n      {...props}\n    />\n  );\n}\n\nexport function ContainerScrollTranslate({\n  yRange = [0, 384],\n  inputRange = [0, 1],\n  style,\n  className,\n  ...props\n}: HTMLMotionProps<'div'> & { yRange?: unknown[]; inputRange?: number[] }) {\n  const { scrollYProgress } = useContainerScrollAnimationContext();\n  const y = useTransform(scrollYProgress, inputRange, yRange);\n  return (\n    <motion.div\n      style={{ y, ...style }}\n      className={cn('relative', className)}\n      {...props}\n    />\n  );\n}\n\nexport function ContainerScrollScale({\n  scaleRange = [1.2, 1],\n  inputRange = [0, 1],\n  className,\n  style,\n  ...props\n}: HTMLMotionProps<'div'> & { scaleRange?: number[]; inputRange?: number[] }) {\n  const { scrollYProgress } = useContainerScrollAnimationContext();\n  const scale = useTransform(scrollYProgress, inputRange, scaleRange);\n  return (\n    <motion.div className={className} style={{ scale, ...style }} {...props} />\n  );\n}\n",
      "type": "registry:block",
      "target": "components/systaliko-ui/containers/container-inset-scroll.tsx"
    }
  ]
}