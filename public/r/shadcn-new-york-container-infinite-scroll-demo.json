{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shadcn-new-york-container-infinite-scroll-demo",
  "type": "registry:block",
  "title": "Container Infinite Scroll Demo",
  "description": "Demo showing container infinite scroll with shadcn-new-york style.",
  "registryDependencies": [
    "http://localhost:3000/r/container-infinite-scroll"
  ],
  "files": [
    {
      "path": "__registry__/demo/containers/container-infinite-scroll/shadcn-new-york/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport {\n  CellInfiniteScroll,\n  ContainerInfiniteScroll,\n} from '@/components/systaliko-ui/containers/container-infinite-scroll';\nimport { ScrollArea } from '@/components/ui/scroll-area';\ninterface Post {\n  id: number;\n  userId: number;\n  title: string;\n  body: string;\n}\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com/posts';\nconst LIMIT = 10;\n\nexport function ContainerInfiniteScrollDemo() {\n  const [posts, setPosts] = React.useState<Post[]>([]);\n  const [page, setPage] = React.useState<number>(0);\n  const [totalCount, setTotalCount] = React.useState<number | null>();\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n\n  async function fetchData() {\n    setIsLoading(true);\n    const start = page * LIMIT;\n    try {\n      const response = await fetch(\n        `${BASE_URL}?_start=${start}&_limit=${LIMIT}`,\n      );\n      const totalItems = response.headers.get('x-total-count');\n      const data = await response.json();\n\n      setTotalCount(Number(totalItems));\n      setPosts((prevPosts) => [...prevPosts, ...data]);\n      setPage((prevPage) => prevPage + 1);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <ScrollArea className=\"w-full h-80 p-6\">\n      <ContainerInfiniteScroll\n        items={posts}\n        isPending={isLoading}\n        itemsCount={totalCount}\n        loadMore={fetchData}\n        className=\"grid gap-4 grid-cols-[repeat(auto-fill,minmax(200px,1fr))]\"\n      >\n        {posts.map((post, index) => (\n          <CellInfiniteScroll isPending={isLoading} key={`${post.id}-${index}`}>\n            <Card className=\" bg-fd-card\">\n              <CardHeader>\n                <CardTitle className=\"text-primary\">#{post.id}</CardTitle>\n                <CardDescription className=\"text-xs\">\n                  {post.title}\n                </CardDescription>\n              </CardHeader>\n\n              <CardContent className=\"text-sm text-foreground\">\n                <p>{post.body}</p>\n              </CardContent>\n            </Card>\n          </CellInfiniteScroll>\n        ))}\n      </ContainerInfiniteScroll>\n    </ScrollArea>\n  );\n}\n",
      "type": "registry:block",
      "target": "components/systaliko-ui/demo/containers/container-infinite-scroll.tsx"
    }
  ]
}