{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "default-text-stagger-inview",
  "type": "registry:ui",
  "title": "Text Stagger Inview",
  "description": "Splitted text animation with staggered reveal triggered by view, You can easily customize by controlling the animation property (transform, opacity, blur) and the stagger value, and the transition with default style.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "https://systaliko-ui.vercel.app/r/default-word-stagger",
    "https://systaliko-ui.vercel.app/r/default-animation-variants",
    "https://systaliko-ui.vercel.app/r/default-transitions"
  ],
  "files": [
    {
      "path": "__registry__/text/text-stagger-inview/default/index.tsx",
      "content": "'use client';\nimport * as React from 'react';\n\nimport {\n  HTMLMotionProps,\n  motion,\n  MotionConfig,\n  Transition,\n  Variants,\n} from 'motion/react';\nimport { cn } from '@/lib/utils';\nimport {\n  ANIMATION_VARIANTS,\n  AnimationT,\n} from '@/components/systaliko-ui/utils/animation-variants';\ninterface TextStaggerProps extends HTMLMotionProps<'span'> {\n  stagger?: number;\n  staggerDirection?: 1 | -1;\n  animation?: AnimationT;\n  characterTransition?: Transition;\n  as?: React.ElementType;\n}\nfunction useParseText(text: React.ReactNode) {\n  return React.useMemo(() => {\n    const stringText = String(text);\n    return {\n      words: stringText.split(' '),\n      characters: stringText.split(''),\n    };\n  }, [text]);\n}\n\ninterface WordProps extends React.HTMLAttributes<HTMLSpanElement> {\n  animation?: AnimationT;\n  word: string;\n  wordIndex: number;\n}\n\nconst Character = React.memo(\n  ({\n    char,\n    variants,\n  }: {\n    char: string;\n    index: number;\n    variants?: Variants;\n  }) => (\n    <motion.span\n      className=\"inline-block\"\n      variants={variants}\n      style={{ display: 'inline-block' }}\n    >\n      {char === ' ' ? '\\u00A0' : char}\n    </motion.span>\n  ),\n);\nCharacter.displayName = 'Character';\n\nexport const WordStagger = React.memo(\n  ({ word, wordIndex, animation, className, ...props }: WordProps) => {\n    const characters = React.useMemo(() => word.split(''), [word]);\n    const animationVariants = ANIMATION_VARIANTS[animation || 'default'];\n\n    return (\n      <span\n        className={cn('inline-block text-nowrap', className)}\n        data-word={word}\n        {...props}\n      >\n        {characters.map((char, index) => (\n          <Character\n            key={`${wordIndex}-${index}`}\n            char={char}\n            index={index}\n            variants={animationVariants}\n          />\n        ))}\n      </span>\n    );\n  },\n);\nWordStagger.displayName = 'WordStagger';\n\nconst WordWrapper = React.memo(\n  ({\n    word,\n    index,\n    animation,\n    characterTransition,\n    showSpace,\n  }: {\n    word: string;\n    index: number;\n    animation?: AnimationT;\n    characterTransition: Transition;\n    showSpace: boolean;\n  }) => (\n    <>\n      <MotionConfig transition={characterTransition}>\n        <WordStagger word={word} wordIndex={index} animation={animation} />\n      </MotionConfig>\n      {showSpace && ' '}\n    </>\n  ),\n);\nWordWrapper.displayName = 'WordWrapper';\n\nexport const TextStaggerInview = React.memo(\n  ({\n    children,\n    transition,\n    className,\n    viewport = { once: true, amount: 0.4 },\n    stagger = 0.02,\n    staggerDirection = 1,\n    animation,\n    characterTransition = { ease: 'easeOut', duration: 0.25 },\n    as: Component = 'span',\n    ...props\n  }: TextStaggerProps) => {\n    const { words } = useParseText(children as React.ReactNode);\n\n    const MotionComponent = React.useMemo(() => motion(Component), [Component]);\n\n    const containerTransition = React.useMemo(\n      () => ({\n        staggerChildren: stagger,\n        staggerDirection,\n        ...transition,\n      }),\n      [stagger, staggerDirection, transition],\n    );\n\n    return (\n      <MotionComponent\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={viewport}\n        className={className}\n        transition={containerTransition}\n        {...props}\n      >\n        {words.map((word, index) => (\n          <WordWrapper\n            key={`${index}-${word.slice(0, 3)}`} // Better key strategy\n            word={word}\n            index={index}\n            animation={animation}\n            characterTransition={characterTransition}\n            showSpace={index < words.length - 1}\n          />\n        ))}\n      </MotionComponent>\n    );\n  },\n);\nTextStaggerInview.displayName = 'TextStaggerInview';\n",
      "type": "registry:ui",
      "target": "components/systaliko-ui/text/text-stagger-inview.tsx"
    }
  ]
}