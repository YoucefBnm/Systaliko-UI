{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "default-card-hover-reveal",
  "type": "registry:ui",
  "title": "Hover Reveal Details Card",
  "description": "Animated card with gesture animations,  Reveals hidden content and scale main image on hover with default style.",
  "registryDependencies": [
    "https://systaliko-ui.vercel.app/r/card-hover-reveal"
  ],
  "files": [
    {
      "path": "__registry__/cards/card-hover-reveal/default/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\ninterface CardHoverRevealContextValue {\n  isHovered: boolean;\n  setIsHovered: React.Dispatch<React.SetStateAction<boolean>>;\n}\nconst CardHoverRevealContext = React.createContext<CardHoverRevealContextValue>(\n  {} as CardHoverRevealContextValue,\n);\nconst useCardHoverRevealContext = () => {\n  const context = React.useContext(CardHoverRevealContext);\n  if (!context) {\n    throw new Error(\n      'useCardHoverRevealContext must be used within a CardHoverRevealProvider',\n    );\n  }\n  return context;\n};\nconst CardHoverReveal = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const [isHovered, setIsHovered] = React.useState<boolean>(false);\n\n  const handleMouseEnter = () => setIsHovered(true);\n  const handleMouseLeave = () => setIsHovered(false);\n\n  return (\n    <CardHoverRevealContext.Provider\n      value={{\n        isHovered,\n        setIsHovered,\n      }}\n    >\n      <div\n        ref={ref}\n        className={cn('relative overflow-hidden', className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      />\n    </CardHoverRevealContext.Provider>\n  );\n});\nCardHoverReveal.displayName = 'CardHoverReveal';\n\ninterface CardHoverRevealMainProps {\n  initialScale?: number;\n  hoverScale?: number;\n}\nconst CardHoverRevealMain = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CardHoverRevealMainProps\n>(({ className, initialScale = 1, hoverScale = 1.05, ...props }, ref) => {\n  const { isHovered } = useCardHoverRevealContext();\n  return (\n    <div\n      ref={ref}\n      className={cn('size-full transition-transform duration-300 ', className)}\n      style={\n        isHovered\n          ? { transform: `scale(${hoverScale})`, ...props.style }\n          : { transform: `scale(${initialScale})`, ...props.style }\n      }\n      {...props}\n    />\n  );\n});\nCardHoverRevealMain.displayName = 'CardHoverRevealMain';\n\nconst CardHoverRevealContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { isHovered } = useCardHoverRevealContext();\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'absolute inset-[auto_1.5rem_1.5rem] p-6 backdrop-blur-lg transition-all duration-500 ease-in-out',\n        className,\n      )}\n      style={\n        isHovered\n          ? { translate: '0%', opacity: 1, ...props.style }\n          : { translate: '0% 120%', opacity: 0, ...props.style }\n      }\n      {...props}\n    />\n  );\n});\nCardHoverRevealContent.displayName = 'CardHoverRevealContent';\n\nexport { CardHoverReveal, CardHoverRevealMain, CardHoverRevealContent };\n",
      "type": "registry:ui",
      "target": "components/systaliko-ui/cards/card-hover-reveal.tsx"
    }
  ]
}