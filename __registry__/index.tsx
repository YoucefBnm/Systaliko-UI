/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from 'react';

export const index: Record<string, any> = {
  index: {
    name: 'index',
    description: '',
    type: 'registry:style',
    dependencies: [
      'tw-animate-css',
      'class-variance-authority',
      'lucide-react',
    ],
    devDependencies: undefined,
    registryDependencies: ['utils'],
    styles: undefined,
    files: [],
    component: null,
    command: 'https://animate-ui.com/r/index',
  },
  'default-animation-config': {
    name: 'default-animation-config',
    description: 'Animation configuration for animations with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/animation-config/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/animation-config.tsx',
        content:
          "import { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { AnimationT } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { createContext, useContext, useState } from 'react';\nimport { StaggerDirection } from '@/components/systaliko-ui/utils/set-stagger-direction';\n\nconst animations: { value: AnimationT; label: string }[] = [\n  { value: 'left', label: 'Slide from Left' },\n  { value: 'right', label: 'Slide from Right' },\n  { value: 'top', label: 'Slide from Top' },\n  { value: 'bottom', label: 'Slide from Bottom' },\n  { value: 'z', label: 'Scale' },\n  { value: 'blur', label: 'Blur' },\n];\n\nconst staggerDirections: { value: StaggerDirection; label: string }[] = [\n  { value: 'start', label: 'Start' },\n  { value: 'middle', label: 'Middle' },\n  { value: 'end', label: 'End' },\n];\n\ntype AnimationConfigContextType = {\n  animation: AnimationT | undefined;\n  staggerValue: number;\n  staggerDirection: StaggerDirection;\n  setAnimation: (value: AnimationT) => void;\n  setStaggerValue: (value: number) => void;\n  setStaggerDirection: (value: StaggerDirection) => void;\n};\n\nconst AnimationConfigContext = createContext<\n  AnimationConfigContextType | undefined\n>(undefined);\n\nexport function AnimationConfig({ children }: { children: React.ReactNode }) {\n  const [animation, setAnimation] = useState<AnimationT>();\n  const [staggerValue, setStaggerValue] = useState<number>(0.02);\n  const [staggerDirection, setStaggerDirection] =\n    useState<StaggerDirection>('start');\n  return (\n    <AnimationConfigContext.Provider\n      value={{\n        animation,\n        staggerValue,\n        setAnimation,\n        setStaggerValue,\n        staggerDirection,\n        setStaggerDirection,\n      }}\n    >\n      {children}\n    </AnimationConfigContext.Provider>\n  );\n}\n\nexport function useSetAnimationConfig() {\n  const context = useContext(AnimationConfigContext);\n  if (!context) {\n    throw new Error(\n      'useSetAnimationConfig must be used within an AnimationConfigProvider',\n    );\n  }\n  return context;\n}\n\nexport function AnimationSelector() {\n  const { setAnimation } = useSetAnimationConfig();\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <label className=\"font-medium text-sm\" htmlFor=\"animation-select\">\n        Select Animation\n      </label>\n      <Select onValueChange={(value) => setAnimation(value as AnimationT)}>\n        <SelectTrigger id=\"animation-select\" className=\"w-[180px]\">\n          <SelectValue placeholder={'Opacity'} />\n        </SelectTrigger>\n        <SelectContent className=\"relative z-40\">\n          {animations.map((animation) => (\n            <SelectItem\n              key={animation.value ?? animation.label}\n              value={animation.value ?? ''}\n            >\n              {animation.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}\n\nexport function StaggerInput() {\n  const { staggerValue, setStaggerValue } = useSetAnimationConfig();\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <label className=\"font-medium text-sm\" htmlFor=\"stagger-input\">\n        Set Stagger Value\n      </label>\n      <Input\n        id=\"stagger-input\"\n        className=\"max-w-fit\"\n        type=\"number\"\n        step={0.01}\n        min={0}\n        value={staggerValue}\n        onChange={(e) => setStaggerValue(Number(e.target.value))}\n      />\n    </div>\n  );\n}\n\nexport function StaggerSelector() {\n  const { setStaggerDirection } = useSetAnimationConfig();\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <label className=\"font-medium text-sm\" htmlFor=\"animation-select\">\n        Select Stagger Direction\n      </label>\n      <Select\n        onValueChange={(value) =>\n          setStaggerDirection(value as StaggerDirection)\n        }\n      >\n        <SelectTrigger id=\"stagger-select\" className=\"w-[180px]\">\n          <SelectValue placeholder=\"Stagger Direction\" />\n        </SelectTrigger>\n        <SelectContent className=\"relative z-40\">\n          {staggerDirections.map((staggerDirection) => (\n            <SelectItem\n              key={staggerDirection.value ?? staggerDirection.label}\n              value={staggerDirection.value ?? ''}\n            >\n              {staggerDirection.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/animation-config/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-animation-config';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-animation-config',
  },
  'shadcn-default-animation-config': {
    name: 'shadcn-default-animation-config',
    description:
      'Animation configuration for animations with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/animation-config/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/animation-config.tsx',
        content:
          "import { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { AnimationT } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { createContext, useContext, useState } from 'react';\nimport { StaggerDirection } from '@/components/systaliko-ui/utils/set-stagger-direction';\n\nconst animations: { value: AnimationT; label: string }[] = [\n  { value: 'left', label: 'Slide from Left' },\n  { value: 'right', label: 'Slide from Right' },\n  { value: 'top', label: 'Slide from Top' },\n  { value: 'bottom', label: 'Slide from Bottom' },\n  { value: 'z', label: 'Scale' },\n  { value: 'blur', label: 'Blur' },\n];\n\nconst staggerDirections: { value: StaggerDirection; label: string }[] = [\n  { value: 'start', label: 'Start' },\n  { value: 'middle', label: 'Middle' },\n  { value: 'end', label: 'End' },\n];\n\ntype AnimationConfigContextType = {\n  animation: AnimationT | undefined;\n  staggerValue: number;\n  staggerDirection: StaggerDirection;\n  setAnimation: (value: AnimationT) => void;\n  setStaggerValue: (value: number) => void;\n  setStaggerDirection: (value: StaggerDirection) => void;\n};\n\nconst AnimationConfigContext = createContext<\n  AnimationConfigContextType | undefined\n>(undefined);\n\nexport function AnimationConfig({ children }: { children: React.ReactNode }) {\n  const [animation, setAnimation] = useState<AnimationT>();\n  const [staggerValue, setStaggerValue] = useState<number>(0.02);\n  const [staggerDirection, setStaggerDirection] =\n    useState<StaggerDirection>('start');\n  return (\n    <AnimationConfigContext.Provider\n      value={{\n        animation,\n        staggerValue,\n        setAnimation,\n        setStaggerValue,\n        staggerDirection,\n        setStaggerDirection,\n      }}\n    >\n      {children}\n    </AnimationConfigContext.Provider>\n  );\n}\n\nexport function useSetAnimationConfig() {\n  const context = useContext(AnimationConfigContext);\n  if (!context) {\n    throw new Error(\n      'useSetAnimationConfig must be used within an AnimationConfigProvider',\n    );\n  }\n  return context;\n}\n\nexport function AnimationSelector() {\n  const { setAnimation } = useSetAnimationConfig();\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <label className=\"font-medium text-sm\" htmlFor=\"animation-select\">\n        Select Animation\n      </label>\n      <Select onValueChange={(value) => setAnimation(value as AnimationT)}>\n        <SelectTrigger id=\"animation-select\" className=\"w-[180px]\">\n          <SelectValue placeholder={'Opacity'} />\n        </SelectTrigger>\n        <SelectContent className=\"relative z-40\">\n          {animations.map((animation) => (\n            <SelectItem\n              key={animation.value ?? animation.label}\n              value={animation.value ?? ''}\n            >\n              {animation.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}\n\nexport function StaggerInput() {\n  const { staggerValue, setStaggerValue } = useSetAnimationConfig();\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <label className=\"font-medium text-sm\" htmlFor=\"stagger-input\">\n        Set Stagger Value\n      </label>\n      <Input\n        id=\"stagger-input\"\n        className=\"max-w-fit\"\n        type=\"number\"\n        step={0.01}\n        min={0}\n        value={staggerValue}\n        onChange={(e) => setStaggerValue(Number(e.target.value))}\n      />\n    </div>\n  );\n}\n\nexport function StaggerSelector() {\n  const { setStaggerDirection } = useSetAnimationConfig();\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <label className=\"font-medium text-sm\" htmlFor=\"animation-select\">\n        Select Stagger Direction\n      </label>\n      <Select\n        onValueChange={(value) =>\n          setStaggerDirection(value as StaggerDirection)\n        }\n      >\n        <SelectTrigger id=\"stagger-select\" className=\"w-[180px]\">\n          <SelectValue placeholder=\"Stagger Direction\" />\n        </SelectTrigger>\n        <SelectContent className=\"relative z-40\">\n          {staggerDirections.map((staggerDirection) => (\n            <SelectItem\n              key={staggerDirection.value ?? staggerDirection.label}\n              value={staggerDirection.value ?? ''}\n            >\n              {staggerDirection.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/animation-config/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-animation-config';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-animation-config',
  },
  'shadcn-new-york-animation-config': {
    name: 'shadcn-new-york-animation-config',
    description:
      'Animation configuration for animations with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/animation-config/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/animation-config.tsx',
        content:
          "import { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { AnimationT } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { createContext, useContext, useState } from 'react';\nimport { StaggerDirection } from '@/components/systaliko-ui/utils/set-stagger-direction';\n\nconst animations: { value: AnimationT; label: string }[] = [\n  { value: 'left', label: 'Slide from Left' },\n  { value: 'right', label: 'Slide from Right' },\n  { value: 'top', label: 'Slide from Top' },\n  { value: 'bottom', label: 'Slide from Bottom' },\n  { value: 'z', label: 'Scale' },\n  { value: 'blur', label: 'Blur' },\n];\n\nconst staggerDirections: { value: StaggerDirection; label: string }[] = [\n  { value: 'start', label: 'Start' },\n  { value: 'middle', label: 'Middle' },\n  { value: 'end', label: 'End' },\n];\n\ntype AnimationConfigContextType = {\n  animation: AnimationT | undefined;\n  staggerValue: number;\n  staggerDirection: StaggerDirection;\n  setAnimation: (value: AnimationT) => void;\n  setStaggerValue: (value: number) => void;\n  setStaggerDirection: (value: StaggerDirection) => void;\n};\n\nconst AnimationConfigContext = createContext<\n  AnimationConfigContextType | undefined\n>(undefined);\n\nexport function AnimationConfig({ children }: { children: React.ReactNode }) {\n  const [animation, setAnimation] = useState<AnimationT>();\n  const [staggerValue, setStaggerValue] = useState<number>(0.02);\n  const [staggerDirection, setStaggerDirection] =\n    useState<StaggerDirection>('start');\n  return (\n    <AnimationConfigContext.Provider\n      value={{\n        animation,\n        staggerValue,\n        setAnimation,\n        setStaggerValue,\n        staggerDirection,\n        setStaggerDirection,\n      }}\n    >\n      {children}\n    </AnimationConfigContext.Provider>\n  );\n}\n\nexport function useSetAnimationConfig() {\n  const context = useContext(AnimationConfigContext);\n  if (!context) {\n    throw new Error(\n      'useSetAnimationConfig must be used within an AnimationConfigProvider',\n    );\n  }\n  return context;\n}\n\nexport function AnimationSelector() {\n  const { setAnimation } = useSetAnimationConfig();\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <label className=\"font-medium text-sm\" htmlFor=\"animation-select\">\n        Select Animation\n      </label>\n      <Select onValueChange={(value) => setAnimation(value as AnimationT)}>\n        <SelectTrigger id=\"animation-select\" className=\"w-[180px]\">\n          <SelectValue placeholder={'Opacity'} />\n        </SelectTrigger>\n        <SelectContent className=\"relative z-40\">\n          {animations.map((animation) => (\n            <SelectItem\n              key={animation.value ?? animation.label}\n              value={animation.value ?? ''}\n            >\n              {animation.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}\n\nexport function StaggerInput() {\n  const { staggerValue, setStaggerValue } = useSetAnimationConfig();\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <label className=\"font-medium text-sm\" htmlFor=\"stagger-input\">\n        Set Stagger Value\n      </label>\n      <Input\n        id=\"stagger-input\"\n        className=\"max-w-fit\"\n        type=\"number\"\n        step={0.01}\n        min={0}\n        value={staggerValue}\n        onChange={(e) => setStaggerValue(Number(e.target.value))}\n      />\n    </div>\n  );\n}\n\nexport function StaggerSelector() {\n  const { setStaggerDirection } = useSetAnimationConfig();\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <label className=\"font-medium text-sm\" htmlFor=\"animation-select\">\n        Select Stagger Direction\n      </label>\n      <Select\n        onValueChange={(value) =>\n          setStaggerDirection(value as StaggerDirection)\n        }\n      >\n        <SelectTrigger id=\"stagger-select\" className=\"w-[180px]\">\n          <SelectValue placeholder=\"Stagger Direction\" />\n        </SelectTrigger>\n        <SelectContent className=\"relative z-40\">\n          {staggerDirections.map((staggerDirection) => (\n            <SelectItem\n              key={staggerDirection.value ?? staggerDirection.label}\n              value={staggerDirection.value ?? ''}\n            >\n              {staggerDirection.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/animation-config/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-animation-config';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-animation-config',
  },
  'default-copy-button': {
    name: 'default-copy-button',
    description:
      'A button with a copy to clipboard animation with default style.',
    type: 'registry:ui',
    dependencies: ['motion', 'lucide-react', 'class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/buttons/copy/default/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/buttons/copy.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, HTMLMotionProps, motion } from 'motion/react';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center cursor-pointer rounded-md transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        muted: 'bg-muted text-muted-foreground',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n      },\n      size: {\n        default: 'size-8 rounded-lg [&_svg]:size-4',\n        sm: 'size-6 [&_svg]:size-3',\n        md: 'size-10 rounded-lg [&_svg]:size-5',\n        lg: 'size-12 rounded-xl [&_svg]:size-6',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\ntype CopyButtonProps = Omit<HTMLMotionProps<'button'>, 'children' | 'onCopy'> &\n  VariantProps<typeof buttonVariants> & {\n    content?: string;\n    delay?: number;\n    onCopy?: (content: string) => void;\n    isCopied?: boolean;\n    onCopyChange?: (isCopied: boolean) => void;\n  };\n\nfunction CopyButton({\n  content,\n  className,\n  size,\n  variant,\n  delay = 3000,\n  onClick,\n  onCopy,\n  isCopied,\n  onCopyChange,\n  ...props\n}: CopyButtonProps) {\n  const [localIsCopied, setLocalIsCopied] = React.useState(isCopied ?? false);\n  const Icon = localIsCopied ? CheckIcon : CopyIcon;\n\n  React.useEffect(() => {\n    setLocalIsCopied(isCopied ?? false);\n  }, [isCopied]);\n\n  const handleIsCopied = React.useCallback(\n    (isCopied: boolean) => {\n      setLocalIsCopied(isCopied);\n      onCopyChange?.(isCopied);\n    },\n    [onCopyChange],\n  );\n\n  const handleCopy = React.useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (isCopied) return;\n      if (content) {\n        navigator.clipboard\n          .writeText(content)\n          .then(() => {\n            handleIsCopied(true);\n            setTimeout(() => handleIsCopied(false), delay);\n            onCopy?.(content);\n          })\n          .catch((error) => {\n            console.error('Error copying command', error);\n          });\n      }\n      onClick?.(e);\n    },\n    [isCopied, content, delay, onClick, onCopy, handleIsCopied],\n  );\n\n  return (\n    <motion.button\n      data-slot=\"copy-button\"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      className={cn(buttonVariants({ variant, size }), className)}\n      onClick={handleCopy}\n      {...props}\n    >\n      <AnimatePresence mode=\"wait\">\n        <motion.span\n          key={localIsCopied ? 'check' : 'copy'}\n          data-slot=\"copy-button-icon\"\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          exit={{ scale: 0 }}\n          transition={{ duration: 0.15 }}\n        >\n          <Icon />\n        </motion.span>\n      </AnimatePresence>\n    </motion.button>\n  );\n}\n\nexport { CopyButton, buttonVariants, type CopyButtonProps };",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/buttons/copy/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-copy-button';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-copy-button',
  },
  'shadcn-default-copy-button': {
    name: 'shadcn-default-copy-button',
    description:
      'A button with a copy to clipboard animation with shadcn-default style.',
    type: 'registry:ui',
    dependencies: ['motion', 'lucide-react', 'class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/buttons/copy/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/buttons/copy.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, HTMLMotionProps, motion } from 'motion/react';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center cursor-pointer rounded-md transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        muted: 'bg-muted text-muted-foreground',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n      },\n      size: {\n        default: 'size-8 rounded-lg [&_svg]:size-4',\n        sm: 'size-6 [&_svg]:size-3',\n        md: 'size-10 rounded-lg [&_svg]:size-5',\n        lg: 'size-12 rounded-xl [&_svg]:size-6',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\ntype CopyButtonProps = Omit<HTMLMotionProps<'button'>, 'children' | 'onCopy'> &\n  VariantProps<typeof buttonVariants> & {\n    content?: string;\n    delay?: number;\n    onCopy?: (content: string) => void;\n    isCopied?: boolean;\n    onCopyChange?: (isCopied: boolean) => void;\n  };\n\nfunction CopyButton({\n  content,\n  className,\n  size,\n  variant,\n  delay = 3000,\n  onClick,\n  onCopy,\n  isCopied,\n  onCopyChange,\n  ...props\n}: CopyButtonProps) {\n  const [localIsCopied, setLocalIsCopied] = React.useState(isCopied ?? false);\n  const Icon = localIsCopied ? CheckIcon : CopyIcon;\n\n  React.useEffect(() => {\n    setLocalIsCopied(isCopied ?? false);\n  }, [isCopied]);\n\n  const handleIsCopied = React.useCallback(\n    (isCopied: boolean) => {\n      setLocalIsCopied(isCopied);\n      onCopyChange?.(isCopied);\n    },\n    [onCopyChange],\n  );\n\n  const handleCopy = React.useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (isCopied) return;\n      if (content) {\n        navigator.clipboard\n          .writeText(content)\n          .then(() => {\n            handleIsCopied(true);\n            setTimeout(() => handleIsCopied(false), delay);\n            onCopy?.(content);\n          })\n          .catch((error) => {\n            console.error('Error copying command', error);\n          });\n      }\n      onClick?.(e);\n    },\n    [isCopied, content, delay, onClick, onCopy, handleIsCopied],\n  );\n\n  return (\n    <motion.button\n      data-slot=\"copy-button\"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      className={cn(buttonVariants({ variant, size }), className)}\n      onClick={handleCopy}\n      {...props}\n    >\n      <AnimatePresence mode=\"wait\">\n        <motion.span\n          key={localIsCopied ? 'check' : 'copy'}\n          data-slot=\"copy-button-icon\"\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          exit={{ scale: 0 }}\n          transition={{ duration: 0.15 }}\n        >\n          <Icon />\n        </motion.span>\n      </AnimatePresence>\n    </motion.button>\n  );\n}\n\nexport { CopyButton, buttonVariants, type CopyButtonProps };",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/buttons/copy/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-copy-button';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-copy-button',
  },
  'shadcn-new-york-copy-button': {
    name: 'shadcn-new-york-copy-button',
    description:
      'A button with a copy to clipboard animation with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: ['motion', 'lucide-react', 'class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/buttons/copy/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/buttons/copy.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, HTMLMotionProps, motion } from 'motion/react';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center cursor-pointer rounded-md transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        muted: 'bg-muted text-muted-foreground',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n      },\n      size: {\n        default: 'size-8 rounded-lg [&_svg]:size-4',\n        sm: 'size-6 [&_svg]:size-3',\n        md: 'size-10 rounded-lg [&_svg]:size-5',\n        lg: 'size-12 rounded-xl [&_svg]:size-6',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\ntype CopyButtonProps = Omit<HTMLMotionProps<'button'>, 'children' | 'onCopy'> &\n  VariantProps<typeof buttonVariants> & {\n    content?: string;\n    delay?: number;\n    onCopy?: (content: string) => void;\n    isCopied?: boolean;\n    onCopyChange?: (isCopied: boolean) => void;\n  };\n\nfunction CopyButton({\n  content,\n  className,\n  size,\n  variant,\n  delay = 3000,\n  onClick,\n  onCopy,\n  isCopied,\n  onCopyChange,\n  ...props\n}: CopyButtonProps) {\n  const [localIsCopied, setLocalIsCopied] = React.useState(isCopied ?? false);\n  const Icon = localIsCopied ? CheckIcon : CopyIcon;\n\n  React.useEffect(() => {\n    setLocalIsCopied(isCopied ?? false);\n  }, [isCopied]);\n\n  const handleIsCopied = React.useCallback(\n    (isCopied: boolean) => {\n      setLocalIsCopied(isCopied);\n      onCopyChange?.(isCopied);\n    },\n    [onCopyChange],\n  );\n\n  const handleCopy = React.useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (isCopied) return;\n      if (content) {\n        navigator.clipboard\n          .writeText(content)\n          .then(() => {\n            handleIsCopied(true);\n            setTimeout(() => handleIsCopied(false), delay);\n            onCopy?.(content);\n          })\n          .catch((error) => {\n            console.error('Error copying command', error);\n          });\n      }\n      onClick?.(e);\n    },\n    [isCopied, content, delay, onClick, onCopy, handleIsCopied],\n  );\n\n  return (\n    <motion.button\n      data-slot=\"copy-button\"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      className={cn(buttonVariants({ variant, size }), className)}\n      onClick={handleCopy}\n      {...props}\n    >\n      <AnimatePresence mode=\"wait\">\n        <motion.span\n          key={localIsCopied ? 'check' : 'copy'}\n          data-slot=\"copy-button-icon\"\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          exit={{ scale: 0 }}\n          transition={{ duration: 0.15 }}\n        >\n          <Icon />\n        </motion.span>\n      </AnimatePresence>\n    </motion.button>\n  );\n}\n\nexport { CopyButton, buttonVariants, type CopyButtonProps };",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/buttons/copy/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-copy-button';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-copy-button',
  },
  'default-card-curtain-reveal': {
    name: 'default-card-curtain-reveal',
    description:
      'Interactive card component with open curtain to see content on hover with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/cards/card-curtain-reveal/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/cards/card-curtain-reveal.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { HTMLMotionProps, Variants, motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst curtainVriants: Variants = {\n  visible: {\n    clipPath: 'polygon(0 0,100% 0,100% 100%,0 100%)',\n    transition: {\n      duration: 0.4,\n      ease: ['easeOut', [0.25, 1.5, 0.5, 1]],\n    },\n  },\n\n  hidden: {\n    clipPath: 'polygon(50% 0,50% 0,50% 100%,50% 100%)',\n    transition: {\n      duration: 0.3,\n      ease: ['easeOut', [0.25, 1.5, 0.5, 1]],\n    },\n  },\n};\n\ninterface CardCurtainRevealContextValue {\n  isMouseIn: boolean;\n}\nconst CardCurtainRevealContext = React.createContext<\n  CardCurtainRevealContextValue | undefined\n>(undefined);\nfunction useCardCurtainRevealContext() {\n  const context = React.useContext(CardCurtainRevealContext);\n  if (!context) {\n    throw new Error(\n      'useCardCurtainRevealContext must be used within a CardCurtainReveal Component',\n    );\n  }\n  return context;\n}\n\nconst CardCurtainReveal = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ children, className, ...props }, ref) => {\n  const [isMouseIn, setIsMouseIn] = React.useState(false);\n  const handleMouseEnter = React.useCallback(() => setIsMouseIn(true), []);\n  const handleMouseLeave = React.useCallback(() => setIsMouseIn(false), []);\n\n  return (\n    <CardCurtainRevealContext.Provider value={{ isMouseIn }}>\n      <div\n        ref={ref}\n        className={cn(\n          'relative flex flex-col gap-2 overflow-hidden',\n          className,\n        )}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        {children}\n      </div>\n    </CardCurtainRevealContext.Provider>\n  );\n});\nCardCurtainReveal.displayName = 'CardCurtainReveal';\n\nconst CardCurtainRevealFooter = React.forwardRef<\n  HTMLDivElement,\n  HTMLMotionProps<'div'>\n>(({ className, ...props }, ref) => {\n  const { isMouseIn } = useCardCurtainRevealContext();\n\n  return (\n    <motion.div\n      ref={ref}\n      className={className}\n      variants={curtainVriants}\n      animate={isMouseIn ? 'visible' : 'hidden'}\n      {...props}\n    />\n  );\n});\nCardCurtainRevealFooter.displayName = 'CardCurtainReveal';\n\nconst CardCurtainRevealBody = React.forwardRef<\n  HTMLDivElement,\n  React.HtmlHTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  return <div ref={ref} className={cn('flex-1 p-6', className)} {...props} />;\n});\nCardCurtainRevealBody.displayName = 'CardCurtainRevealBody';\n\nconst CardCurtainRevealTitle = React.forwardRef<\n  HTMLHeadingElement,\n  HTMLMotionProps<'h2'>\n>(({ className, ...props }, ref) => {\n  const { isMouseIn } = useCardCurtainRevealContext();\n\n  return (\n    <motion.h2\n      ref={ref}\n      className={className}\n      animate={isMouseIn ? { y: 0 } : { y: 170 }}\n      transition={{ duration: 0.3, ease: 'easeOut' }}\n      {...props}\n    />\n  );\n});\nCardCurtainRevealTitle.displayName = 'CardCurtainRevealTitle';\n\nconst CardCurtain = React.forwardRef<HTMLDivElement, HTMLMotionProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    const { isMouseIn } = useCardCurtainRevealContext();\n\n    return (\n      <motion.div\n        ref={ref}\n        className={cn(\n          'pointer-events-none absolute inset-0 size-full mix-blend-difference',\n          className,\n        )}\n        variants={curtainVriants}\n        animate={isMouseIn ? 'visible' : 'hidden'}\n        {...props}\n      />\n    );\n  },\n);\nCardCurtain.displayName = 'CardCurtain';\n\nconst CardCurtainRevealDescription = React.forwardRef<\n  HTMLDivElement,\n  HTMLMotionProps<'div'>\n>(({ className, ...props }, ref) => {\n  const { isMouseIn } = useCardCurtainRevealContext();\n\n  return (\n    <motion.div\n      ref={ref}\n      className={className}\n      variants={curtainVriants}\n      animate={isMouseIn ? 'visible' : 'hidden'}\n      {...props}\n    />\n  );\n});\nCardCurtainRevealDescription.displayName = 'CardCurtainRevealDescription';\n\nexport {\n  CardCurtainReveal,\n  CardCurtainRevealBody,\n  CardCurtainRevealFooter,\n  CardCurtainRevealDescription,\n  CardCurtainRevealTitle,\n  CardCurtain,\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/cards/card-curtain-reveal/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-card-curtain-reveal';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-card-curtain-reveal',
  },
  'shadcn-default-card-curtain-reveal': {
    name: 'shadcn-default-card-curtain-reveal',
    description:
      'Interactive card component with open curtain to see content on hover with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/cards/card-curtain-reveal/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/cards/card-curtain-reveal.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { HTMLMotionProps, Variants, motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst curtainVriants: Variants = {\n  visible: {\n    clipPath: 'polygon(0 0,100% 0,100% 100%,0 100%)',\n    transition: {\n      duration: 0.4,\n      ease: ['easeOut', [0.25, 1.5, 0.5, 1]],\n    },\n  },\n\n  hidden: {\n    clipPath: 'polygon(50% 0,50% 0,50% 100%,50% 100%)',\n    transition: {\n      duration: 0.3,\n      ease: ['easeOut', [0.25, 1.5, 0.5, 1]],\n    },\n  },\n};\n\ninterface CardCurtainRevealContextValue {\n  isMouseIn: boolean;\n}\nconst CardCurtainRevealContext = React.createContext<\n  CardCurtainRevealContextValue | undefined\n>(undefined);\nfunction useCardCurtainRevealContext() {\n  const context = React.useContext(CardCurtainRevealContext);\n  if (!context) {\n    throw new Error(\n      'useCardCurtainRevealContext must be used within a CardCurtainReveal Component',\n    );\n  }\n  return context;\n}\n\nconst CardCurtainReveal = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ children, className, ...props }, ref) => {\n  const [isMouseIn, setIsMouseIn] = React.useState(false);\n  const handleMouseEnter = React.useCallback(() => setIsMouseIn(true), []);\n  const handleMouseLeave = React.useCallback(() => setIsMouseIn(false), []);\n\n  return (\n    <CardCurtainRevealContext.Provider value={{ isMouseIn }}>\n      <div\n        ref={ref}\n        className={cn(\n          'relative flex flex-col gap-2 overflow-hidden',\n          className,\n        )}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        {children}\n      </div>\n    </CardCurtainRevealContext.Provider>\n  );\n});\nCardCurtainReveal.displayName = 'CardCurtainReveal';\n\nconst CardCurtainRevealFooter = React.forwardRef<\n  HTMLDivElement,\n  HTMLMotionProps<'div'>\n>(({ className, ...props }, ref) => {\n  const { isMouseIn } = useCardCurtainRevealContext();\n\n  return (\n    <motion.div\n      ref={ref}\n      className={className}\n      variants={curtainVriants}\n      animate={isMouseIn ? 'visible' : 'hidden'}\n      {...props}\n    />\n  );\n});\nCardCurtainRevealFooter.displayName = 'CardCurtainReveal';\n\nconst CardCurtainRevealBody = React.forwardRef<\n  HTMLDivElement,\n  React.HtmlHTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  return <div ref={ref} className={cn('flex-1 p-6', className)} {...props} />;\n});\nCardCurtainRevealBody.displayName = 'CardCurtainRevealBody';\n\nconst CardCurtainRevealTitle = React.forwardRef<\n  HTMLHeadingElement,\n  HTMLMotionProps<'h2'>\n>(({ className, ...props }, ref) => {\n  const { isMouseIn } = useCardCurtainRevealContext();\n\n  return (\n    <motion.h2\n      ref={ref}\n      className={className}\n      animate={isMouseIn ? { y: 0 } : { y: 170 }}\n      transition={{ duration: 0.3, ease: 'easeOut' }}\n      {...props}\n    />\n  );\n});\nCardCurtainRevealTitle.displayName = 'CardCurtainRevealTitle';\n\nconst CardCurtain = React.forwardRef<HTMLDivElement, HTMLMotionProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    const { isMouseIn } = useCardCurtainRevealContext();\n\n    return (\n      <motion.div\n        ref={ref}\n        className={cn(\n          'pointer-events-none absolute inset-0 size-full mix-blend-difference',\n          className,\n        )}\n        variants={curtainVriants}\n        animate={isMouseIn ? 'visible' : 'hidden'}\n        {...props}\n      />\n    );\n  },\n);\nCardCurtain.displayName = 'CardCurtain';\n\nconst CardCurtainRevealDescription = React.forwardRef<\n  HTMLDivElement,\n  HTMLMotionProps<'div'>\n>(({ className, ...props }, ref) => {\n  const { isMouseIn } = useCardCurtainRevealContext();\n\n  return (\n    <motion.div\n      ref={ref}\n      className={className}\n      variants={curtainVriants}\n      animate={isMouseIn ? 'visible' : 'hidden'}\n      {...props}\n    />\n  );\n});\nCardCurtainRevealDescription.displayName = 'CardCurtainRevealDescription';\n\nexport {\n  CardCurtainReveal,\n  CardCurtainRevealBody,\n  CardCurtainRevealFooter,\n  CardCurtainRevealDescription,\n  CardCurtainRevealTitle,\n  CardCurtain,\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/cards/card-curtain-reveal/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-card-curtain-reveal';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-card-curtain-reveal',
  },
  'shadcn-new-york-card-curtain-reveal': {
    name: 'shadcn-new-york-card-curtain-reveal',
    description:
      'Interactive card component with open curtain to see content on hover with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/cards/card-curtain-reveal/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/cards/card-curtain-reveal.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { HTMLMotionProps, Variants, motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst curtainVriants: Variants = {\n  visible: {\n    clipPath: 'polygon(0 0,100% 0,100% 100%,0 100%)',\n    transition: {\n      duration: 0.4,\n      ease: ['easeOut', [0.25, 1.5, 0.5, 1]],\n    },\n  },\n\n  hidden: {\n    clipPath: 'polygon(50% 0,50% 0,50% 100%,50% 100%)',\n    transition: {\n      duration: 0.3,\n      ease: ['easeOut', [0.25, 1.5, 0.5, 1]],\n    },\n  },\n};\n\ninterface CardCurtainRevealContextValue {\n  isMouseIn: boolean;\n}\nconst CardCurtainRevealContext = React.createContext<\n  CardCurtainRevealContextValue | undefined\n>(undefined);\nfunction useCardCurtainRevealContext() {\n  const context = React.useContext(CardCurtainRevealContext);\n  if (!context) {\n    throw new Error(\n      'useCardCurtainRevealContext must be used within a CardCurtainReveal Component',\n    );\n  }\n  return context;\n}\n\nconst CardCurtainReveal = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ children, className, ...props }, ref) => {\n  const [isMouseIn, setIsMouseIn] = React.useState(false);\n  const handleMouseEnter = React.useCallback(() => setIsMouseIn(true), []);\n  const handleMouseLeave = React.useCallback(() => setIsMouseIn(false), []);\n\n  return (\n    <CardCurtainRevealContext.Provider value={{ isMouseIn }}>\n      <div\n        ref={ref}\n        className={cn(\n          'relative flex flex-col gap-2 overflow-hidden',\n          className,\n        )}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      >\n        {children}\n      </div>\n    </CardCurtainRevealContext.Provider>\n  );\n});\nCardCurtainReveal.displayName = 'CardCurtainReveal';\n\nconst CardCurtainRevealFooter = React.forwardRef<\n  HTMLDivElement,\n  HTMLMotionProps<'div'>\n>(({ className, ...props }, ref) => {\n  const { isMouseIn } = useCardCurtainRevealContext();\n\n  return (\n    <motion.div\n      ref={ref}\n      className={className}\n      variants={curtainVriants}\n      animate={isMouseIn ? 'visible' : 'hidden'}\n      {...props}\n    />\n  );\n});\nCardCurtainRevealFooter.displayName = 'CardCurtainReveal';\n\nconst CardCurtainRevealBody = React.forwardRef<\n  HTMLDivElement,\n  React.HtmlHTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  return <div ref={ref} className={cn('flex-1 p-6', className)} {...props} />;\n});\nCardCurtainRevealBody.displayName = 'CardCurtainRevealBody';\n\nconst CardCurtainRevealTitle = React.forwardRef<\n  HTMLHeadingElement,\n  HTMLMotionProps<'h2'>\n>(({ className, ...props }, ref) => {\n  const { isMouseIn } = useCardCurtainRevealContext();\n\n  return (\n    <motion.h2\n      ref={ref}\n      className={className}\n      animate={isMouseIn ? { y: 0 } : { y: 170 }}\n      transition={{ duration: 0.3, ease: 'easeOut' }}\n      {...props}\n    />\n  );\n});\nCardCurtainRevealTitle.displayName = 'CardCurtainRevealTitle';\n\nconst CardCurtain = React.forwardRef<HTMLDivElement, HTMLMotionProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    const { isMouseIn } = useCardCurtainRevealContext();\n\n    return (\n      <motion.div\n        ref={ref}\n        className={cn(\n          'pointer-events-none absolute inset-0 size-full mix-blend-difference',\n          className,\n        )}\n        variants={curtainVriants}\n        animate={isMouseIn ? 'visible' : 'hidden'}\n        {...props}\n      />\n    );\n  },\n);\nCardCurtain.displayName = 'CardCurtain';\n\nconst CardCurtainRevealDescription = React.forwardRef<\n  HTMLDivElement,\n  HTMLMotionProps<'div'>\n>(({ className, ...props }, ref) => {\n  const { isMouseIn } = useCardCurtainRevealContext();\n\n  return (\n    <motion.div\n      ref={ref}\n      className={className}\n      variants={curtainVriants}\n      animate={isMouseIn ? 'visible' : 'hidden'}\n      {...props}\n    />\n  );\n});\nCardCurtainRevealDescription.displayName = 'CardCurtainRevealDescription';\n\nexport {\n  CardCurtainReveal,\n  CardCurtainRevealBody,\n  CardCurtainRevealFooter,\n  CardCurtainRevealDescription,\n  CardCurtainRevealTitle,\n  CardCurtain,\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/cards/card-curtain-reveal/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-card-curtain-reveal';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-card-curtain-reveal',
  },
  'default-card-flip': {
    name: 'default-card-flip',
    description:
      'An interactive card component that flips on hover with smooth 3D transitions with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/cards/card-flip/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/cards/card-flip.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { HTMLMotionProps, motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst TRANSITION_CONFIG = {\n  duration: 0.7,\n  ease: [0.4, 0.2, 0.2, 1],\n} as const;\n\nconst TRANSFORM_STYLES: React.CSSProperties = {\n  transformStyle: 'preserve-3d',\n  perspective: '1000px',\n  backfaceVisibility: 'hidden',\n};\n\ntype FlipDirection = 'horizontal' | 'vertical';\ninterface CardFlipProps extends React.HTMLAttributes<HTMLDivElement> {\n  flipDirection?: FlipDirection;\n  initialFlipped?: boolean;\n  onFlip?: (isFlipped: boolean) => void;\n  disabled?: boolean;\n}\ninterface CardFlipContextValue {\n  isFlipped: boolean;\n  flipDirection: FlipDirection;\n  disabled?: boolean;\n}\n\nconst CardFlipContext = React.createContext<CardFlipContextValue | undefined>(\n  undefined,\n);\nfunction useCardFlipContext() {\n  const context = React.useContext(CardFlipContext);\n  if (!context) {\n    throw new Error('useCardFlipContext must be used within a CardFlip');\n  }\n  return context;\n}\n\nconst CardFlip = React.memo(\n  React.forwardRef<HTMLDivElement, CardFlipProps>(\n    (\n      {\n        className,\n        flipDirection = 'horizontal',\n        initialFlipped = false,\n        onFlip,\n        disabled,\n        ...props\n      },\n      ref,\n    ) => {\n      const [isFlipped, setIsFlipped] = React.useState(initialFlipped);\n\n      const handleMouseEnter = React.useCallback(() => {\n        if (!disabled) {\n          setIsFlipped(true);\n          onFlip?.(true);\n        }\n      }, [disabled, onFlip]);\n\n      const handleMouseLeave = React.useCallback(() => {\n        if (!disabled) {\n          setIsFlipped(false);\n          onFlip?.(false);\n        }\n      }, [disabled, onFlip]);\n\n      const contextValue = React.useMemo(\n        () => ({ isFlipped, flipDirection, disabled }),\n        [isFlipped, flipDirection, disabled],\n      );\n\n      return (\n        <CardFlipContext.Provider value={contextValue}>\n          <div\n            ref={ref}\n            className={cn(\n              'relative border-none bg-none shadow-none',\n              disabled && 'pointer-events-none',\n              className,\n            )}\n            style={{\n              ...TRANSFORM_STYLES,\n              ...props.style,\n            }}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n            role=\"button\"\n            tabIndex={disabled ? -1 : 0}\n            aria-pressed={isFlipped}\n            {...props}\n          />\n        </CardFlipContext.Provider>\n      );\n    },\n  ),\n);\nCardFlip.displayName = 'CardFlip';\n\nconst CardFlipFront = React.memo(\n  React.forwardRef<HTMLDivElement, HTMLMotionProps<'div'>>(\n    ({ className, ...props }, ref) => {\n      const { isFlipped, flipDirection } = useCardFlipContext();\n\n      const rotation = React.useMemo(() => {\n        if (!isFlipped) return { rotateX: 0, rotateY: 0 };\n        return flipDirection === 'horizontal'\n          ? { rotateY: -180, rotateX: 0 }\n          : { rotateX: -180, rotateY: 0 };\n      }, [isFlipped, flipDirection]);\n\n      return (\n        <motion.div\n          ref={ref}\n          className={cn(\n            'absolute inset-0 z-20 size-full overflow-hidden',\n            className,\n          )}\n          initial={false}\n          animate={rotation}\n          transition={TRANSITION_CONFIG}\n          style={{\n            ...TRANSFORM_STYLES,\n            ...props.style,\n          }}\n          {...props}\n        />\n      );\n    },\n  ),\n);\nCardFlipFront.displayName = 'CardFlipFront';\n\nconst CardFlipBack = React.memo(\n  React.forwardRef<HTMLDivElement, HTMLMotionProps<'div'>>(\n    ({ className, ...props }, ref) => {\n      const { isFlipped, flipDirection } = useCardFlipContext();\n\n      const rotation = React.useMemo(() => {\n        if (isFlipped) return { rotateX: 0, rotateY: 0 };\n        return flipDirection === 'horizontal'\n          ? { rotateY: 180, rotateX: 0 }\n          : { rotateX: 180, rotateY: 0 };\n      }, [isFlipped, flipDirection]);\n\n      return (\n        <motion.div\n          ref={ref}\n          className={cn('absolute inset-0 z-10 size-full', className)}\n          initial={false}\n          animate={rotation}\n          transition={TRANSITION_CONFIG}\n          style={{\n            ...TRANSFORM_STYLES,\n            ...props.style,\n          }}\n          {...props}\n        />\n      );\n    },\n  ),\n);\nCardFlipBack.displayName = 'CardFlipBack';\n\nexport { CardFlip, CardFlipFront, CardFlipBack };",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/cards/card-flip/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-card-flip';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-card-flip',
  },
  'shadcn-default-card-flip': {
    name: 'shadcn-default-card-flip',
    description:
      'An interactive card component that flips on hover with smooth 3D transitions with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/cards/card-flip/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/cards/card-flip.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { HTMLMotionProps, motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst TRANSITION_CONFIG = {\n  duration: 0.7,\n  ease: [0.4, 0.2, 0.2, 1],\n} as const;\n\nconst TRANSFORM_STYLES: React.CSSProperties = {\n  transformStyle: 'preserve-3d',\n  perspective: '1000px',\n  backfaceVisibility: 'hidden',\n};\n\ntype FlipDirection = 'horizontal' | 'vertical';\ninterface CardFlipProps extends React.HTMLAttributes<HTMLDivElement> {\n  flipDirection?: FlipDirection;\n  initialFlipped?: boolean;\n  onFlip?: (isFlipped: boolean) => void;\n  disabled?: boolean;\n}\ninterface CardFlipContextValue {\n  isFlipped: boolean;\n  flipDirection: FlipDirection;\n  disabled?: boolean;\n}\n\nconst CardFlipContext = React.createContext<CardFlipContextValue | undefined>(\n  undefined,\n);\nfunction useCardFlipContext() {\n  const context = React.useContext(CardFlipContext);\n  if (!context) {\n    throw new Error('useCardFlipContext must be used within a CardFlip');\n  }\n  return context;\n}\n\nconst CardFlip = React.memo(\n  React.forwardRef<HTMLDivElement, CardFlipProps>(\n    (\n      {\n        className,\n        flipDirection = 'horizontal',\n        initialFlipped = false,\n        onFlip,\n        disabled,\n        ...props\n      },\n      ref,\n    ) => {\n      const [isFlipped, setIsFlipped] = React.useState(initialFlipped);\n\n      const handleMouseEnter = React.useCallback(() => {\n        if (!disabled) {\n          setIsFlipped(true);\n          onFlip?.(true);\n        }\n      }, [disabled, onFlip]);\n\n      const handleMouseLeave = React.useCallback(() => {\n        if (!disabled) {\n          setIsFlipped(false);\n          onFlip?.(false);\n        }\n      }, [disabled, onFlip]);\n\n      const contextValue = React.useMemo(\n        () => ({ isFlipped, flipDirection, disabled }),\n        [isFlipped, flipDirection, disabled],\n      );\n\n      return (\n        <CardFlipContext.Provider value={contextValue}>\n          <div\n            ref={ref}\n            className={cn(\n              'relative border-none bg-none shadow-none',\n              disabled && 'pointer-events-none',\n              className,\n            )}\n            style={{\n              ...TRANSFORM_STYLES,\n              ...props.style,\n            }}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n            role=\"button\"\n            tabIndex={disabled ? -1 : 0}\n            aria-pressed={isFlipped}\n            {...props}\n          />\n        </CardFlipContext.Provider>\n      );\n    },\n  ),\n);\nCardFlip.displayName = 'CardFlip';\n\nconst CardFlipFront = React.memo(\n  React.forwardRef<HTMLDivElement, HTMLMotionProps<'div'>>(\n    ({ className, ...props }, ref) => {\n      const { isFlipped, flipDirection } = useCardFlipContext();\n\n      const rotation = React.useMemo(() => {\n        if (!isFlipped) return { rotateX: 0, rotateY: 0 };\n        return flipDirection === 'horizontal'\n          ? { rotateY: -180, rotateX: 0 }\n          : { rotateX: -180, rotateY: 0 };\n      }, [isFlipped, flipDirection]);\n\n      return (\n        <motion.div\n          ref={ref}\n          className={cn(\n            'absolute inset-0 z-20 size-full overflow-hidden',\n            className,\n          )}\n          initial={false}\n          animate={rotation}\n          transition={TRANSITION_CONFIG}\n          style={{\n            ...TRANSFORM_STYLES,\n            ...props.style,\n          }}\n          {...props}\n        />\n      );\n    },\n  ),\n);\nCardFlipFront.displayName = 'CardFlipFront';\n\nconst CardFlipBack = React.memo(\n  React.forwardRef<HTMLDivElement, HTMLMotionProps<'div'>>(\n    ({ className, ...props }, ref) => {\n      const { isFlipped, flipDirection } = useCardFlipContext();\n\n      const rotation = React.useMemo(() => {\n        if (isFlipped) return { rotateX: 0, rotateY: 0 };\n        return flipDirection === 'horizontal'\n          ? { rotateY: 180, rotateX: 0 }\n          : { rotateX: 180, rotateY: 0 };\n      }, [isFlipped, flipDirection]);\n\n      return (\n        <motion.div\n          ref={ref}\n          className={cn('absolute inset-0 z-10 size-full', className)}\n          initial={false}\n          animate={rotation}\n          transition={TRANSITION_CONFIG}\n          style={{\n            ...TRANSFORM_STYLES,\n            ...props.style,\n          }}\n          {...props}\n        />\n      );\n    },\n  ),\n);\nCardFlipBack.displayName = 'CardFlipBack';\n\nexport { CardFlip, CardFlipFront, CardFlipBack };",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/cards/card-flip/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-card-flip';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-card-flip',
  },
  'shadcn-new-york-card-flip': {
    name: 'shadcn-new-york-card-flip',
    description:
      'An interactive card component that flips on hover with smooth 3D transitions with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/cards/card-flip/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/cards/card-flip.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { HTMLMotionProps, motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst TRANSITION_CONFIG = {\n  duration: 0.7,\n  ease: [0.4, 0.2, 0.2, 1],\n} as const;\n\nconst TRANSFORM_STYLES: React.CSSProperties = {\n  transformStyle: 'preserve-3d',\n  perspective: '1000px',\n  backfaceVisibility: 'hidden',\n};\n\ntype FlipDirection = 'horizontal' | 'vertical';\ninterface CardFlipProps extends React.HTMLAttributes<HTMLDivElement> {\n  flipDirection?: FlipDirection;\n  initialFlipped?: boolean;\n  onFlip?: (isFlipped: boolean) => void;\n  disabled?: boolean;\n}\ninterface CardFlipContextValue {\n  isFlipped: boolean;\n  flipDirection: FlipDirection;\n  disabled?: boolean;\n}\n\nconst CardFlipContext = React.createContext<CardFlipContextValue | undefined>(\n  undefined,\n);\nfunction useCardFlipContext() {\n  const context = React.useContext(CardFlipContext);\n  if (!context) {\n    throw new Error('useCardFlipContext must be used within a CardFlip');\n  }\n  return context;\n}\n\nconst CardFlip = React.memo(\n  React.forwardRef<HTMLDivElement, CardFlipProps>(\n    (\n      {\n        className,\n        flipDirection = 'horizontal',\n        initialFlipped = false,\n        onFlip,\n        disabled,\n        ...props\n      },\n      ref,\n    ) => {\n      const [isFlipped, setIsFlipped] = React.useState(initialFlipped);\n\n      const handleMouseEnter = React.useCallback(() => {\n        if (!disabled) {\n          setIsFlipped(true);\n          onFlip?.(true);\n        }\n      }, [disabled, onFlip]);\n\n      const handleMouseLeave = React.useCallback(() => {\n        if (!disabled) {\n          setIsFlipped(false);\n          onFlip?.(false);\n        }\n      }, [disabled, onFlip]);\n\n      const contextValue = React.useMemo(\n        () => ({ isFlipped, flipDirection, disabled }),\n        [isFlipped, flipDirection, disabled],\n      );\n\n      return (\n        <CardFlipContext.Provider value={contextValue}>\n          <div\n            ref={ref}\n            className={cn(\n              'relative border-none bg-none shadow-none',\n              disabled && 'pointer-events-none',\n              className,\n            )}\n            style={{\n              ...TRANSFORM_STYLES,\n              ...props.style,\n            }}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n            role=\"button\"\n            tabIndex={disabled ? -1 : 0}\n            aria-pressed={isFlipped}\n            {...props}\n          />\n        </CardFlipContext.Provider>\n      );\n    },\n  ),\n);\nCardFlip.displayName = 'CardFlip';\n\nconst CardFlipFront = React.memo(\n  React.forwardRef<HTMLDivElement, HTMLMotionProps<'div'>>(\n    ({ className, ...props }, ref) => {\n      const { isFlipped, flipDirection } = useCardFlipContext();\n\n      const rotation = React.useMemo(() => {\n        if (!isFlipped) return { rotateX: 0, rotateY: 0 };\n        return flipDirection === 'horizontal'\n          ? { rotateY: -180, rotateX: 0 }\n          : { rotateX: -180, rotateY: 0 };\n      }, [isFlipped, flipDirection]);\n\n      return (\n        <motion.div\n          ref={ref}\n          className={cn(\n            'absolute inset-0 z-20 size-full overflow-hidden',\n            className,\n          )}\n          initial={false}\n          animate={rotation}\n          transition={TRANSITION_CONFIG}\n          style={{\n            ...TRANSFORM_STYLES,\n            ...props.style,\n          }}\n          {...props}\n        />\n      );\n    },\n  ),\n);\nCardFlipFront.displayName = 'CardFlipFront';\n\nconst CardFlipBack = React.memo(\n  React.forwardRef<HTMLDivElement, HTMLMotionProps<'div'>>(\n    ({ className, ...props }, ref) => {\n      const { isFlipped, flipDirection } = useCardFlipContext();\n\n      const rotation = React.useMemo(() => {\n        if (isFlipped) return { rotateX: 0, rotateY: 0 };\n        return flipDirection === 'horizontal'\n          ? { rotateY: 180, rotateX: 0 }\n          : { rotateX: 180, rotateY: 0 };\n      }, [isFlipped, flipDirection]);\n\n      return (\n        <motion.div\n          ref={ref}\n          className={cn('absolute inset-0 z-10 size-full', className)}\n          initial={false}\n          animate={rotation}\n          transition={TRANSITION_CONFIG}\n          style={{\n            ...TRANSFORM_STYLES,\n            ...props.style,\n          }}\n          {...props}\n        />\n      );\n    },\n  ),\n);\nCardFlipBack.displayName = 'CardFlipBack';\n\nexport { CardFlip, CardFlipFront, CardFlipBack };",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/cards/card-flip/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-card-flip';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-card-flip',
  },
  'default-card-hover-reveal': {
    name: 'default-card-hover-reveal',
    description:
      'Animated card with gesture animations,  Reveals hidden content and scale main image on hover with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/cards/card-hover-reveal/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/cards/card-hover-reveal.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\ninterface CardHoverRevealContextValue {\n  isHovered: boolean;\n  setIsHovered: React.Dispatch<React.SetStateAction<boolean>>;\n}\nconst CardHoverRevealContext = React.createContext<CardHoverRevealContextValue>(\n  {} as CardHoverRevealContextValue,\n);\nconst useCardHoverRevealContext = () => {\n  const context = React.useContext(CardHoverRevealContext);\n  if (!context) {\n    throw new Error(\n      'useCardHoverRevealContext must be used within a CardHoverRevealProvider',\n    );\n  }\n  return context;\n};\nconst CardHoverReveal = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const [isHovered, setIsHovered] = React.useState<boolean>(false);\n\n  const handleMouseEnter = () => setIsHovered(true);\n  const handleMouseLeave = () => setIsHovered(false);\n\n  return (\n    <CardHoverRevealContext.Provider\n      value={{\n        isHovered,\n        setIsHovered,\n      }}\n    >\n      <div\n        ref={ref}\n        className={cn('relative overflow-hidden', className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      />\n    </CardHoverRevealContext.Provider>\n  );\n});\nCardHoverReveal.displayName = 'CardHoverReveal';\n\ninterface CardHoverRevealMainProps {\n  initialScale?: number;\n  hoverScale?: number;\n}\nconst CardHoverRevealMain = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CardHoverRevealMainProps\n>(({ className, initialScale = 1, hoverScale = 1.05, ...props }, ref) => {\n  const { isHovered } = useCardHoverRevealContext();\n  return (\n    <div\n      ref={ref}\n      className={cn('size-full transition-transform duration-300 ', className)}\n      style={\n        isHovered\n          ? { transform: `scale(${hoverScale})`, ...props.style }\n          : { transform: `scale(${initialScale})`, ...props.style }\n      }\n      {...props}\n    />\n  );\n});\nCardHoverRevealMain.displayName = 'CardHoverRevealMain';\n\nconst CardHoverRevealContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { isHovered } = useCardHoverRevealContext();\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'absolute inset-[auto_1.5rem_1.5rem] p-6 backdrop-blur-lg transition-all duration-500 ease-in-out',\n        className,\n      )}\n      style={\n        isHovered\n          ? { translate: '0%', opacity: 1, ...props.style }\n          : { translate: '0% 120%', opacity: 0, ...props.style }\n      }\n      {...props}\n    />\n  );\n});\nCardHoverRevealContent.displayName = 'CardHoverRevealContent';\n\nexport { CardHoverReveal, CardHoverRevealMain, CardHoverRevealContent };",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/cards/card-hover-reveal/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-card-hover-reveal';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-card-hover-reveal',
  },
  'shadcn-default-card-hover-reveal': {
    name: 'shadcn-default-card-hover-reveal',
    description:
      'Animated card with gesture animations,  Reveals hidden content and scale main image on hover with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/cards/card-hover-reveal/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/cards/card-hover-reveal.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\ninterface CardHoverRevealContextValue {\n  isHovered: boolean;\n  setIsHovered: React.Dispatch<React.SetStateAction<boolean>>;\n}\nconst CardHoverRevealContext = React.createContext<CardHoverRevealContextValue>(\n  {} as CardHoverRevealContextValue,\n);\nconst useCardHoverRevealContext = () => {\n  const context = React.useContext(CardHoverRevealContext);\n  if (!context) {\n    throw new Error(\n      'useCardHoverRevealContext must be used within a CardHoverRevealProvider',\n    );\n  }\n  return context;\n};\nconst CardHoverReveal = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const [isHovered, setIsHovered] = React.useState<boolean>(false);\n\n  const handleMouseEnter = () => setIsHovered(true);\n  const handleMouseLeave = () => setIsHovered(false);\n\n  return (\n    <CardHoverRevealContext.Provider\n      value={{\n        isHovered,\n        setIsHovered,\n      }}\n    >\n      <div\n        ref={ref}\n        className={cn('relative overflow-hidden', className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      />\n    </CardHoverRevealContext.Provider>\n  );\n});\nCardHoverReveal.displayName = 'CardHoverReveal';\n\ninterface CardHoverRevealMainProps {\n  initialScale?: number;\n  hoverScale?: number;\n}\nconst CardHoverRevealMain = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CardHoverRevealMainProps\n>(({ className, initialScale = 1, hoverScale = 1.05, ...props }, ref) => {\n  const { isHovered } = useCardHoverRevealContext();\n  return (\n    <div\n      ref={ref}\n      className={cn('size-full transition-transform duration-300 ', className)}\n      style={\n        isHovered\n          ? { transform: `scale(${hoverScale})`, ...props.style }\n          : { transform: `scale(${initialScale})`, ...props.style }\n      }\n      {...props}\n    />\n  );\n});\nCardHoverRevealMain.displayName = 'CardHoverRevealMain';\n\nconst CardHoverRevealContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { isHovered } = useCardHoverRevealContext();\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'absolute inset-[auto_1.5rem_1.5rem] p-6 backdrop-blur-lg transition-all duration-500 ease-in-out',\n        className,\n      )}\n      style={\n        isHovered\n          ? { translate: '0%', opacity: 1, ...props.style }\n          : { translate: '0% 120%', opacity: 0, ...props.style }\n      }\n      {...props}\n    />\n  );\n});\nCardHoverRevealContent.displayName = 'CardHoverRevealContent';\n\nexport { CardHoverReveal, CardHoverRevealMain, CardHoverRevealContent };",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/cards/card-hover-reveal/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-card-hover-reveal';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-card-hover-reveal',
  },
  'shadcn-new-york-card-hover-reveal': {
    name: 'shadcn-new-york-card-hover-reveal',
    description:
      'Animated card with gesture animations,  Reveals hidden content and scale main image on hover with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/cards/card-hover-reveal/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/cards/card-hover-reveal.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\ninterface CardHoverRevealContextValue {\n  isHovered: boolean;\n  setIsHovered: React.Dispatch<React.SetStateAction<boolean>>;\n}\nconst CardHoverRevealContext = React.createContext<CardHoverRevealContextValue>(\n  {} as CardHoverRevealContextValue,\n);\nconst useCardHoverRevealContext = () => {\n  const context = React.useContext(CardHoverRevealContext);\n  if (!context) {\n    throw new Error(\n      'useCardHoverRevealContext must be used within a CardHoverRevealProvider',\n    );\n  }\n  return context;\n};\nconst CardHoverReveal = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const [isHovered, setIsHovered] = React.useState<boolean>(false);\n\n  const handleMouseEnter = () => setIsHovered(true);\n  const handleMouseLeave = () => setIsHovered(false);\n\n  return (\n    <CardHoverRevealContext.Provider\n      value={{\n        isHovered,\n        setIsHovered,\n      }}\n    >\n      <div\n        ref={ref}\n        className={cn('relative overflow-hidden', className)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        {...props}\n      />\n    </CardHoverRevealContext.Provider>\n  );\n});\nCardHoverReveal.displayName = 'CardHoverReveal';\n\ninterface CardHoverRevealMainProps {\n  initialScale?: number;\n  hoverScale?: number;\n}\nconst CardHoverRevealMain = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CardHoverRevealMainProps\n>(({ className, initialScale = 1, hoverScale = 1.05, ...props }, ref) => {\n  const { isHovered } = useCardHoverRevealContext();\n  return (\n    <div\n      ref={ref}\n      className={cn('size-full transition-transform duration-300 ', className)}\n      style={\n        isHovered\n          ? { transform: `scale(${hoverScale})`, ...props.style }\n          : { transform: `scale(${initialScale})`, ...props.style }\n      }\n      {...props}\n    />\n  );\n});\nCardHoverRevealMain.displayName = 'CardHoverRevealMain';\n\nconst CardHoverRevealContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { isHovered } = useCardHoverRevealContext();\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'absolute inset-[auto_1.5rem_1.5rem] p-6 backdrop-blur-lg transition-all duration-500 ease-in-out',\n        className,\n      )}\n      style={\n        isHovered\n          ? { translate: '0%', opacity: 1, ...props.style }\n          : { translate: '0% 120%', opacity: 0, ...props.style }\n      }\n      {...props}\n    />\n  );\n});\nCardHoverRevealContent.displayName = 'CardHoverRevealContent';\n\nexport { CardHoverReveal, CardHoverRevealMain, CardHoverRevealContent };",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/cards/card-hover-reveal/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-card-hover-reveal';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-card-hover-reveal',
  },
  'default-card-testimonial': {
    name: 'default-card-testimonial',
    description:
      "Card Testimonial, with rating, block quote, and author's informations with default style.",
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/cards/card-testimonial/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/cards/card-testimonial.tsx',
        content:
          "'use client';\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { cn } from '@/lib/utils';\nimport { RatingStars } from '@/components/systaliko-ui/rating-stars';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport * as React from 'react';\n\ninterface AuthorProps extends React.HTMLAttributes<HTMLDivElement> {\n  authorName: string;\n  avatarUrl?: string;\n  description?: string;\n}\ninterface CardTestimonialProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof cardTestimonialVariants> {\n  testimonialQuote: string;\n  testimonialAuthor: AuthorProps;\n  testimonialRating?: number;\n}\ninterface TestimonialContextValue {\n  testimonialQuote: string;\n  testimonialAuthor: AuthorProps;\n  testimonialRating?: number;\n}\n\nconst cardTestimonialVariants = cva('', {\n  variants: {\n    variant: {\n      default:\n        'flex size-full flex-col items-center justify-center gap-6 rounded-2xl border  bg-accent bg-background/80 p-6 backdrop-blur-md',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst CardTestimonialContext = React.createContext<\n  TestimonialContextValue | undefined\n>(undefined);\n\nfunction useCardTestimonialContext() {\n  const context = React.useContext(CardTestimonialContext);\n  if (context === undefined) {\n    throw new Error(\n      'useCardTestimonialContext must be used within a CardTestimonialProvider',\n    );\n  }\n  return context;\n}\n\nexport const CardTestimonial = ({\n  testimonialQuote,\n  testimonialAuthor,\n  testimonialRating,\n  className,\n  children,\n  variant,\n  ...props\n}: CardTestimonialProps) => {\n  return (\n    <CardTestimonialContext.Provider\n      value={{ testimonialQuote, testimonialAuthor, testimonialRating }}\n    >\n      <div\n        className={cn(cardTestimonialVariants({ variant, className }))}\n        {...props}\n      >\n        {children}\n      </div>\n    </CardTestimonialContext.Provider>\n  );\n};\n\nexport const TestimonialAuthor = ({\n  className,\n  children,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  const { testimonialAuthor } = useCardTestimonialContext();\n  const { authorName, avatarUrl, description } = testimonialAuthor;\n  return (\n    <div className={className} {...props}>\n      <Avatar className=\"size-10\">\n        <AvatarImage src={avatarUrl} alt={`Portrait of ${authorName}`} />\n        <AvatarFallback>\n          {authorName\n            .split(' ')\n            .map((n) => n[0])\n            .join('')}\n        </AvatarFallback>\n      </Avatar>\n      <div>\n        <span className=\"block text-lg font-semibold tracking-tight md:text-xl\">\n          {authorName}\n        </span>\n        <span className=\"block text-sm text-muted-foreground \">\n          {description}\n        </span>\n      </div>\n      {children}\n    </div>\n  );\n};\n\nexport const TestimonialRating = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  const { testimonialRating } = useCardTestimonialContext();\n  return (\n    <RatingStars\n      className={className}\n      rating={testimonialRating ?? 0}\n      {...props}\n    />\n  );\n};\n\nexport const TestimonialQuote = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLQuoteElement>) => {\n  const { testimonialQuote } = useCardTestimonialContext();\n  return (\n    <blockquote className={className} {...props}>\n      {testimonialQuote}\n    </blockquote>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/cards/card-testimonial/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-card-testimonial';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-card-testimonial',
  },
  'shadcn-default-card-testimonial': {
    name: 'shadcn-default-card-testimonial',
    description:
      "Card Testimonial, with rating, block quote, and author's informations with shadcn-default style.",
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/cards/card-testimonial/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/cards/card-testimonial.tsx',
        content:
          "'use client';\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { cn } from '@/lib/utils';\nimport { RatingStars } from '@/components/systaliko-ui/rating-stars';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport * as React from 'react';\n\ninterface AuthorProps extends React.HTMLAttributes<HTMLDivElement> {\n  authorName: string;\n  avatarUrl?: string;\n  description?: string;\n}\ninterface CardTestimonialProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof cardTestimonialVariants> {\n  testimonialQuote: string;\n  testimonialAuthor: AuthorProps;\n  testimonialRating?: number;\n}\ninterface TestimonialContextValue {\n  testimonialQuote: string;\n  testimonialAuthor: AuthorProps;\n  testimonialRating?: number;\n}\n\nconst cardTestimonialVariants = cva('', {\n  variants: {\n    variant: {\n      default:\n        'flex size-full flex-col items-center justify-center gap-6 rounded-2xl border  bg-accent bg-background/80 p-6 backdrop-blur-md',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst CardTestimonialContext = React.createContext<\n  TestimonialContextValue | undefined\n>(undefined);\n\nfunction useCardTestimonialContext() {\n  const context = React.useContext(CardTestimonialContext);\n  if (context === undefined) {\n    throw new Error(\n      'useCardTestimonialContext must be used within a CardTestimonialProvider',\n    );\n  }\n  return context;\n}\n\nexport const CardTestimonial = ({\n  testimonialQuote,\n  testimonialAuthor,\n  testimonialRating,\n  className,\n  children,\n  variant,\n  ...props\n}: CardTestimonialProps) => {\n  return (\n    <CardTestimonialContext.Provider\n      value={{ testimonialQuote, testimonialAuthor, testimonialRating }}\n    >\n      <div\n        className={cn(cardTestimonialVariants({ variant, className }))}\n        {...props}\n      >\n        {children}\n      </div>\n    </CardTestimonialContext.Provider>\n  );\n};\n\nexport const TestimonialAuthor = ({\n  className,\n  children,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  const { testimonialAuthor } = useCardTestimonialContext();\n  const { authorName, avatarUrl, description } = testimonialAuthor;\n  return (\n    <div className={className} {...props}>\n      <Avatar className=\"size-10\">\n        <AvatarImage src={avatarUrl} alt={`Portrait of ${authorName}`} />\n        <AvatarFallback>\n          {authorName\n            .split(' ')\n            .map((n) => n[0])\n            .join('')}\n        </AvatarFallback>\n      </Avatar>\n      <div>\n        <span className=\"block text-lg font-semibold tracking-tight md:text-xl\">\n          {authorName}\n        </span>\n        <span className=\"block text-sm text-muted-foreground \">\n          {description}\n        </span>\n      </div>\n      {children}\n    </div>\n  );\n};\n\nexport const TestimonialRating = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  const { testimonialRating } = useCardTestimonialContext();\n  return (\n    <RatingStars\n      className={className}\n      rating={testimonialRating ?? 0}\n      {...props}\n    />\n  );\n};\n\nexport const TestimonialQuote = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLQuoteElement>) => {\n  const { testimonialQuote } = useCardTestimonialContext();\n  return (\n    <blockquote className={className} {...props}>\n      {testimonialQuote}\n    </blockquote>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/cards/card-testimonial/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-card-testimonial';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-card-testimonial',
  },
  'shadcn-new-york-card-testimonial': {
    name: 'shadcn-new-york-card-testimonial',
    description:
      "Card Testimonial, with rating, block quote, and author's informations with shadcn-new-york style.",
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/cards/card-testimonial/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/cards/card-testimonial.tsx',
        content:
          "'use client';\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { cn } from '@/lib/utils';\nimport { RatingStars } from '@/components/systaliko-ui/rating-stars';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport * as React from 'react';\n\ninterface AuthorProps extends React.HTMLAttributes<HTMLDivElement> {\n  authorName: string;\n  avatarUrl?: string;\n  description?: string;\n}\ninterface CardTestimonialProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof cardTestimonialVariants> {\n  testimonialQuote: string;\n  testimonialAuthor: AuthorProps;\n  testimonialRating?: number;\n}\ninterface TestimonialContextValue {\n  testimonialQuote: string;\n  testimonialAuthor: AuthorProps;\n  testimonialRating?: number;\n}\n\nconst cardTestimonialVariants = cva('', {\n  variants: {\n    variant: {\n      default:\n        'flex size-full flex-col items-center justify-center gap-6 rounded-2xl border  bg-accent bg-background/80 p-6 backdrop-blur-md',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst CardTestimonialContext = React.createContext<\n  TestimonialContextValue | undefined\n>(undefined);\n\nfunction useCardTestimonialContext() {\n  const context = React.useContext(CardTestimonialContext);\n  if (context === undefined) {\n    throw new Error(\n      'useCardTestimonialContext must be used within a CardTestimonialProvider',\n    );\n  }\n  return context;\n}\n\nexport const CardTestimonial = ({\n  testimonialQuote,\n  testimonialAuthor,\n  testimonialRating,\n  className,\n  children,\n  variant,\n  ...props\n}: CardTestimonialProps) => {\n  return (\n    <CardTestimonialContext.Provider\n      value={{ testimonialQuote, testimonialAuthor, testimonialRating }}\n    >\n      <div\n        className={cn(cardTestimonialVariants({ variant, className }))}\n        {...props}\n      >\n        {children}\n      </div>\n    </CardTestimonialContext.Provider>\n  );\n};\n\nexport const TestimonialAuthor = ({\n  className,\n  children,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  const { testimonialAuthor } = useCardTestimonialContext();\n  const { authorName, avatarUrl, description } = testimonialAuthor;\n  return (\n    <div className={className} {...props}>\n      <Avatar className=\"size-10\">\n        <AvatarImage src={avatarUrl} alt={`Portrait of ${authorName}`} />\n        <AvatarFallback>\n          {authorName\n            .split(' ')\n            .map((n) => n[0])\n            .join('')}\n        </AvatarFallback>\n      </Avatar>\n      <div>\n        <span className=\"block text-lg font-semibold tracking-tight md:text-xl\">\n          {authorName}\n        </span>\n        <span className=\"block text-sm text-muted-foreground \">\n          {description}\n        </span>\n      </div>\n      {children}\n    </div>\n  );\n};\n\nexport const TestimonialRating = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  const { testimonialRating } = useCardTestimonialContext();\n  return (\n    <RatingStars\n      className={className}\n      rating={testimonialRating ?? 0}\n      {...props}\n    />\n  );\n};\n\nexport const TestimonialQuote = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLQuoteElement>) => {\n  const { testimonialQuote } = useCardTestimonialContext();\n  return (\n    <blockquote className={className} {...props}>\n      {testimonialQuote}\n    </blockquote>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/cards/card-testimonial/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-card-testimonial';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-card-testimonial',
  },
  'default-container-clipped': {
    name: 'default-container-clipped',
    description: 'Clipped container with default style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/containers/container-clipped/default/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/containers/container-clipped.tsx',
        content:
          "'use client';\nimport { cn } from '@/lib/utils';\nimport * as React from 'react';\n\nexport const clipPathVariants = {\n  default: 'polygon(60% 0, 100% 40%, 100% 100%, 0 100%, 0 0)',\n  reversed: 'polygon(0 0, 100% 0, 100% 100%, 40% 100%, 0 60%)',\n} as const;\n\nexport const ContainerClipped = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      className={cn(\n        'flex relative h-full flex-col md:grid md:grid-cols-12 md:grid-rows-[10%_80%_10%]',\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nContainerClipped.displayName = 'ContainerClipped';\n\nexport const ContainerClippedColLg = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      className={cn(\n        'md:col-span-9 md:row-span-3 md:col-start-1 md:row-start-1 relative',\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nContainerClippedColLg.displayName = 'ContainerClippedColLg';\n\nexport const ContainerClippedColMd = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      className={cn(\n        'relative md:row-start-2 md:row-end-3 md:col-start-7 md:col-end-13',\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nContainerClippedColMd.displayName = 'ContainerClippedColMd';\n\nexport const ContainerClippedBg = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    variant?: keyof typeof clipPathVariants;\n  }\n>(({ variant = 'default', className, style, ...props }, ref) => {\n  return (\n    <div\n      className={className}\n      ref={ref}\n      style={{\n        clipPath: clipPathVariants[variant],\n        ...style,\n      }}\n      {...props}\n    />\n  );\n});\nContainerClippedBg.displayName = 'ContainerClippedBg';",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/containers/container-clipped/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-container-clipped';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-container-clipped',
  },
  'shadcn-default-container-clipped': {
    name: 'shadcn-default-container-clipped',
    description: 'Clipped container with shadcn-default style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/containers/container-clipped/shadcn-default/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/containers/container-clipped.tsx',
        content:
          "'use client';\nimport { cn } from '@/lib/utils';\nimport * as React from 'react';\n\nexport const clipPathVariants = {\n  default: 'polygon(60% 0, 100% 40%, 100% 100%, 0 100%, 0 0)',\n  reversed: 'polygon(0 0, 100% 0, 100% 100%, 40% 100%, 0 60%)',\n} as const;\n\nexport const ContainerClipped = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      className={cn(\n        'flex relative h-full flex-col md:grid md:grid-cols-12 md:grid-rows-[10%_80%_10%]',\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nContainerClipped.displayName = 'ContainerClipped';\n\nexport const ContainerClippedColLg = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      className={cn(\n        'md:col-span-9 md:row-span-3 md:col-start-1 md:row-start-1 relative',\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nContainerClippedColLg.displayName = 'ContainerClippedColLg';\n\nexport const ContainerClippedColMd = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      className={cn(\n        'relative md:row-start-2 md:row-end-3 md:col-start-7 md:col-end-13',\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nContainerClippedColMd.displayName = 'ContainerClippedColMd';\n\nexport const ContainerClippedBg = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    variant?: keyof typeof clipPathVariants;\n  }\n>(({ variant = 'default', className, style, ...props }, ref) => {\n  return (\n    <div\n      className={className}\n      ref={ref}\n      style={{\n        clipPath: clipPathVariants[variant],\n        ...style,\n      }}\n      {...props}\n    />\n  );\n});\nContainerClippedBg.displayName = 'ContainerClippedBg';",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/containers/container-clipped/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-container-clipped';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-container-clipped',
  },
  'shadcn-new-york-container-clipped': {
    name: 'shadcn-new-york-container-clipped',
    description: 'Clipped container with shadcn-new-york style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/containers/container-clipped/shadcn-new-york/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/containers/container-clipped.tsx',
        content:
          "'use client';\nimport { cn } from '@/lib/utils';\nimport * as React from 'react';\n\nexport const clipPathVariants = {\n  default: 'polygon(60% 0, 100% 40%, 100% 100%, 0 100%, 0 0)',\n  reversed: 'polygon(0 0, 100% 0, 100% 100%, 40% 100%, 0 60%)',\n} as const;\n\nexport const ContainerClipped = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      className={cn(\n        'flex relative h-full flex-col md:grid md:grid-cols-12 md:grid-rows-[10%_80%_10%]',\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nContainerClipped.displayName = 'ContainerClipped';\n\nexport const ContainerClippedColLg = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      className={cn(\n        'md:col-span-9 md:row-span-3 md:col-start-1 md:row-start-1 relative',\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nContainerClippedColLg.displayName = 'ContainerClippedColLg';\n\nexport const ContainerClippedColMd = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      className={cn(\n        'relative md:row-start-2 md:row-end-3 md:col-start-7 md:col-end-13',\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nContainerClippedColMd.displayName = 'ContainerClippedColMd';\n\nexport const ContainerClippedBg = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    variant?: keyof typeof clipPathVariants;\n  }\n>(({ variant = 'default', className, style, ...props }, ref) => {\n  return (\n    <div\n      className={className}\n      ref={ref}\n      style={{\n        clipPath: clipPathVariants[variant],\n        ...style,\n      }}\n      {...props}\n    />\n  );\n});\nContainerClippedBg.displayName = 'ContainerClippedBg';",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/containers/container-clipped/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-container-clipped';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-container-clipped',
  },
  'default-container-infinite-scroll': {
    name: 'default-container-infinite-scroll',
    description:
      'Infinite scroll container for optimizing the loading of large data sets, with a customizable threshold and a configurable loading indicator with default style.',
    type: 'registry:block',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/containers/container-infinite-scroll/default/index.tsx',
        type: 'registry:block',
        target:
          'components/systaliko-ui/containers/container-infinite-scroll.tsx',
        content:
          "'use client';\nimport * as React from 'react';\nimport { motion, useInView } from 'motion/react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { cn } from '@/lib/utils';\n\nfunction SkeltonWrapper() {\n  return (\n    <div className=\" space-y-5 p-4\">\n      <Skeleton className=\"size-12 rounded-full\" />\n      <Skeleton className=\"h-10 w-2/3\" />\n      <Skeleton className=\"h-48 w-full\" />\n    </div>\n  );\n}\nfunction Spinner() {\n  return (\n    <div className=\"inline-block size-6 animate-spin rounded-full border-2 border-gray-200 border-t-gray-900\" />\n  );\n}\ninterface CellInfiniteScrollProps extends React.HTMLAttributes<HTMLDivElement> {\n  isPending: boolean;\n  SkeltonComp?: React.ComponentType | React.ReactElement;\n}\nexport function CellInfiniteScroll({\n  isPending,\n  SkeltonComp = SkeltonWrapper,\n  children,\n  className,\n}: CellInfiniteScrollProps) {\n  const revealRef = React.useRef<HTMLDivElement | null>(null);\n\n  const isInView = useInView(revealRef, {\n    once: true,\n    amount: 0.2,\n  });\n\n  return (\n    <div className={cn('relative', className)}>\n      {isPending || !isInView ? (\n        <motion.div\n          initial=\"visible\"\n          animate={\n            !isInView || isPending\n              ? { opacity: 1, display: 'block' }\n              : { opacity: 0, display: 'none' }\n          }\n        >\n          {typeof SkeltonComp === 'function' ? <SkeltonComp /> : SkeltonComp}\n        </motion.div>\n      ) : (\n        <motion.div initial=\"hidden\" animate={isInView ? 'visible' : 'hidden'}>\n          {children}\n        </motion.div>\n      )}\n      <div ref={revealRef} />\n    </div>\n  );\n}\n\ninterface ContainerInfiniteScrollProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  items: unknown[];\n  isPending: boolean;\n  itemsCount: number | null | undefined;\n  loadMore: () => void;\n  Loader?: React.ComponentType | React.ReactElement;\n}\nexport function ContainerInfiniteScroll({\n  items,\n  isPending,\n  itemsCount,\n  loadMore,\n  Loader = Spinner,\n  children,\n  className,\n}: ContainerInfiniteScrollProps) {\n  const observerRef = React.useRef<HTMLDivElement | null>(null);\n  const allLoaded = items.length === itemsCount;\n  const hasMore = isPending && !allLoaded && items.length > 0;\n  React.useEffect(() => {\n    const { current } = observerRef;\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting && !allLoaded && items.length > 0) {\n          loadMore();\n        }\n      },\n      { threshold: 1 },\n    );\n\n    if (current) {\n      observer.observe(current);\n    }\n\n    return () => {\n      if (current) {\n        observer.unobserve(current);\n      }\n    };\n  });\n\n  return (\n    <div className={className}>\n      {children}\n      {hasMore && (typeof Loader === 'function' ? <Loader /> : Loader)}\n      {items.length > 0 && itemsCount && items.length < itemsCount && (\n        <div ref={observerRef} />\n      )}\n    </div>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/containers/container-infinite-scroll/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-container-infinite-scroll';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-container-infinite-scroll',
  },
  'shadcn-default-container-infinite-scroll': {
    name: 'shadcn-default-container-infinite-scroll',
    description:
      'Infinite scroll container for optimizing the loading of large data sets, with a customizable threshold and a configurable loading indicator with shadcn-default style.',
    type: 'registry:block',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/containers/container-infinite-scroll/shadcn-default/index.tsx',
        type: 'registry:block',
        target:
          'components/systaliko-ui/containers/container-infinite-scroll.tsx',
        content:
          "'use client';\nimport * as React from 'react';\nimport { motion, useInView } from 'motion/react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { cn } from '@/lib/utils';\n\nfunction SkeltonWrapper() {\n  return (\n    <div className=\" space-y-5 p-4\">\n      <Skeleton className=\"size-12 rounded-full\" />\n      <Skeleton className=\"h-10 w-2/3\" />\n      <Skeleton className=\"h-48 w-full\" />\n    </div>\n  );\n}\nfunction Spinner() {\n  return (\n    <div className=\"inline-block size-6 animate-spin rounded-full border-2 border-gray-200 border-t-gray-900\" />\n  );\n}\ninterface CellInfiniteScrollProps extends React.HTMLAttributes<HTMLDivElement> {\n  isPending: boolean;\n  SkeltonComp?: React.ComponentType | React.ReactElement;\n}\nexport function CellInfiniteScroll({\n  isPending,\n  SkeltonComp = SkeltonWrapper,\n  children,\n  className,\n}: CellInfiniteScrollProps) {\n  const revealRef = React.useRef<HTMLDivElement | null>(null);\n\n  const isInView = useInView(revealRef, {\n    once: true,\n    amount: 0.2,\n  });\n\n  return (\n    <div className={cn('relative', className)}>\n      {isPending || !isInView ? (\n        <motion.div\n          initial=\"visible\"\n          animate={\n            !isInView || isPending\n              ? { opacity: 1, display: 'block' }\n              : { opacity: 0, display: 'none' }\n          }\n        >\n          {typeof SkeltonComp === 'function' ? <SkeltonComp /> : SkeltonComp}\n        </motion.div>\n      ) : (\n        <motion.div initial=\"hidden\" animate={isInView ? 'visible' : 'hidden'}>\n          {children}\n        </motion.div>\n      )}\n      <div ref={revealRef} />\n    </div>\n  );\n}\n\ninterface ContainerInfiniteScrollProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  items: unknown[];\n  isPending: boolean;\n  itemsCount: number | null | undefined;\n  loadMore: () => void;\n  Loader?: React.ComponentType | React.ReactElement;\n}\nexport function ContainerInfiniteScroll({\n  items,\n  isPending,\n  itemsCount,\n  loadMore,\n  Loader = Spinner,\n  children,\n  className,\n}: ContainerInfiniteScrollProps) {\n  const observerRef = React.useRef<HTMLDivElement | null>(null);\n  const allLoaded = items.length === itemsCount;\n  const hasMore = isPending && !allLoaded && items.length > 0;\n  React.useEffect(() => {\n    const { current } = observerRef;\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting && !allLoaded && items.length > 0) {\n          loadMore();\n        }\n      },\n      { threshold: 1 },\n    );\n\n    if (current) {\n      observer.observe(current);\n    }\n\n    return () => {\n      if (current) {\n        observer.unobserve(current);\n      }\n    };\n  });\n\n  return (\n    <div className={className}>\n      {children}\n      {hasMore && (typeof Loader === 'function' ? <Loader /> : Loader)}\n      {items.length > 0 && itemsCount && items.length < itemsCount && (\n        <div ref={observerRef} />\n      )}\n    </div>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/containers/container-infinite-scroll/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-container-infinite-scroll';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/shadcn-default-container-infinite-scroll',
  },
  'shadcn-new-york-container-infinite-scroll': {
    name: 'shadcn-new-york-container-infinite-scroll',
    description:
      'Infinite scroll container for optimizing the loading of large data sets, with a customizable threshold and a configurable loading indicator with shadcn-new-york style.',
    type: 'registry:block',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/containers/container-infinite-scroll/shadcn-new-york/index.tsx',
        type: 'registry:block',
        target:
          'components/systaliko-ui/containers/container-infinite-scroll.tsx',
        content:
          "'use client';\nimport * as React from 'react';\nimport { motion, useInView } from 'motion/react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { cn } from '@/lib/utils';\n\nfunction SkeltonWrapper() {\n  return (\n    <div className=\" space-y-5 p-4\">\n      <Skeleton className=\"size-12 rounded-full\" />\n      <Skeleton className=\"h-10 w-2/3\" />\n      <Skeleton className=\"h-48 w-full\" />\n    </div>\n  );\n}\nfunction Spinner() {\n  return (\n    <div className=\"inline-block size-6 animate-spin rounded-full border-2 border-gray-200 border-t-gray-900\" />\n  );\n}\ninterface CellInfiniteScrollProps extends React.HTMLAttributes<HTMLDivElement> {\n  isPending: boolean;\n  SkeltonComp?: React.ComponentType | React.ReactElement;\n}\nexport function CellInfiniteScroll({\n  isPending,\n  SkeltonComp = SkeltonWrapper,\n  children,\n  className,\n}: CellInfiniteScrollProps) {\n  const revealRef = React.useRef<HTMLDivElement | null>(null);\n\n  const isInView = useInView(revealRef, {\n    once: true,\n    amount: 0.2,\n  });\n\n  return (\n    <div className={cn('relative', className)}>\n      {isPending || !isInView ? (\n        <motion.div\n          initial=\"visible\"\n          animate={\n            !isInView || isPending\n              ? { opacity: 1, display: 'block' }\n              : { opacity: 0, display: 'none' }\n          }\n        >\n          {typeof SkeltonComp === 'function' ? <SkeltonComp /> : SkeltonComp}\n        </motion.div>\n      ) : (\n        <motion.div initial=\"hidden\" animate={isInView ? 'visible' : 'hidden'}>\n          {children}\n        </motion.div>\n      )}\n      <div ref={revealRef} />\n    </div>\n  );\n}\n\ninterface ContainerInfiniteScrollProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  items: unknown[];\n  isPending: boolean;\n  itemsCount: number | null | undefined;\n  loadMore: () => void;\n  Loader?: React.ComponentType | React.ReactElement;\n}\nexport function ContainerInfiniteScroll({\n  items,\n  isPending,\n  itemsCount,\n  loadMore,\n  Loader = Spinner,\n  children,\n  className,\n}: ContainerInfiniteScrollProps) {\n  const observerRef = React.useRef<HTMLDivElement | null>(null);\n  const allLoaded = items.length === itemsCount;\n  const hasMore = isPending && !allLoaded && items.length > 0;\n  React.useEffect(() => {\n    const { current } = observerRef;\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting && !allLoaded && items.length > 0) {\n          loadMore();\n        }\n      },\n      { threshold: 1 },\n    );\n\n    if (current) {\n      observer.observe(current);\n    }\n\n    return () => {\n      if (current) {\n        observer.unobserve(current);\n      }\n    };\n  });\n\n  return (\n    <div className={className}>\n      {children}\n      {hasMore && (typeof Loader === 'function' ? <Loader /> : Loader)}\n      {items.length > 0 && itemsCount && items.length < itemsCount && (\n        <div ref={observerRef} />\n      )}\n    </div>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/containers/container-infinite-scroll/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-container-infinite-scroll';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/shadcn-new-york-container-infinite-scroll',
  },
  'default-grid-bento': {
    name: 'default-grid-bento',
    description:
      'Bento Grid, container with multiple variants and displays with default style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/containers/grid-bento/default/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/containers/grid-bento.tsx',
        content:
          "'use client';\nimport * as React from 'react';\nimport { cn } from '@/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\n\nconst bentoGridVariants = cva(\n  'relative grid gap-4 [&>*:first-child]:origin-top-right [&>*:nth-child(3)]:origin-bottom-right [&>*:nth-child(4)]:origin-top-right',\n  {\n    variants: {\n      variant: {\n        default: `\n            grid-cols-8 grid-rows-[1fr_0.5fr_0.5fr_1fr]\n            [&>*:first-child]:col-span-8 md:[&>*:first-child]:col-span-6 [&>*:first-child]:row-span-3\n            [&>*:nth-child(2)]:col-span-2 md:[&>*:nth-child(2)]:row-span-2 [&>*:nth-child(2)]:hidden md:[&>*:nth-child(2)]:block\n            [&>*:nth-child(3)]:col-span-2 md:[&>*:nth-child(3)]:row-span-2 [&>*:nth-child(3)]:hidden md:[&>*:nth-child(3)]:block\n            [&>*:nth-child(4)]:col-span-4 md:[&>*:nth-child(4)]:col-span-3\n            [&>*:nth-child(5)]:col-span-4 md:[&>*:nth-child(5)]:col-span-3\n          `,\n        threeCells: `\n            grid-cols-2 grid-rows-2 [&>*:nth-child(4)]:hidden [&>*:nth-child(5)]:hidden\n            [&>*:first-child]:col-span-2\n        `,\n        fourCells: `\n          grid-cols-3 grid-rows-2\n          [&>*:first-child]:col-span-1\n          [&>*:nth-child(2)]:col-span-2\n          [&>*:nth-child(3)]:col-span-2\n          [&>*:nth-child(5)]:hidden\n        `,\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nexport const GridBento = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof bentoGridVariants>\n>(({ variant, className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={cn(bentoGridVariants({ variant }), className)}\n      {...props}\n    />\n  );\n});\nGridBento.displayName = 'GridBento';",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/containers/grid-bento/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-grid-bento';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-grid-bento',
  },
  'shadcn-default-grid-bento': {
    name: 'shadcn-default-grid-bento',
    description:
      'Bento Grid, container with multiple variants and displays with shadcn-default style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/containers/grid-bento/shadcn-default/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/containers/grid-bento.tsx',
        content:
          "'use client';\nimport * as React from 'react';\nimport { cn } from '@/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\n\nconst bentoGridVariants = cva(\n  'relative grid gap-4 [&>*:first-child]:origin-top-right [&>*:nth-child(3)]:origin-bottom-right [&>*:nth-child(4)]:origin-top-right',\n  {\n    variants: {\n      variant: {\n        default: `\n            grid-cols-8 grid-rows-[1fr_0.5fr_0.5fr_1fr]\n            [&>*:first-child]:col-span-8 md:[&>*:first-child]:col-span-6 [&>*:first-child]:row-span-3\n            [&>*:nth-child(2)]:col-span-2 md:[&>*:nth-child(2)]:row-span-2 [&>*:nth-child(2)]:hidden md:[&>*:nth-child(2)]:block\n            [&>*:nth-child(3)]:col-span-2 md:[&>*:nth-child(3)]:row-span-2 [&>*:nth-child(3)]:hidden md:[&>*:nth-child(3)]:block\n            [&>*:nth-child(4)]:col-span-4 md:[&>*:nth-child(4)]:col-span-3\n            [&>*:nth-child(5)]:col-span-4 md:[&>*:nth-child(5)]:col-span-3\n          `,\n        threeCells: `\n            grid-cols-2 grid-rows-2 [&>*:nth-child(4)]:hidden [&>*:nth-child(5)]:hidden\n            [&>*:first-child]:col-span-2\n        `,\n        fourCells: `\n          grid-cols-3 grid-rows-2\n          [&>*:first-child]:col-span-1\n          [&>*:nth-child(2)]:col-span-2\n          [&>*:nth-child(3)]:col-span-2\n          [&>*:nth-child(5)]:hidden\n        `,\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nexport const GridBento = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof bentoGridVariants>\n>(({ variant, className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={cn(bentoGridVariants({ variant }), className)}\n      {...props}\n    />\n  );\n});\nGridBento.displayName = 'GridBento';",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/containers/grid-bento/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-grid-bento';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-grid-bento',
  },
  'shadcn-new-york-grid-bento': {
    name: 'shadcn-new-york-grid-bento',
    description:
      'Bento Grid, container with multiple variants and displays with shadcn-new-york style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/containers/grid-bento/shadcn-new-york/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/containers/grid-bento.tsx',
        content:
          "'use client';\nimport * as React from 'react';\nimport { cn } from '@/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\n\nconst bentoGridVariants = cva(\n  'relative grid gap-4 [&>*:first-child]:origin-top-right [&>*:nth-child(3)]:origin-bottom-right [&>*:nth-child(4)]:origin-top-right',\n  {\n    variants: {\n      variant: {\n        default: `\n            grid-cols-8 grid-rows-[1fr_0.5fr_0.5fr_1fr]\n            [&>*:first-child]:col-span-8 md:[&>*:first-child]:col-span-6 [&>*:first-child]:row-span-3\n            [&>*:nth-child(2)]:col-span-2 md:[&>*:nth-child(2)]:row-span-2 [&>*:nth-child(2)]:hidden md:[&>*:nth-child(2)]:block\n            [&>*:nth-child(3)]:col-span-2 md:[&>*:nth-child(3)]:row-span-2 [&>*:nth-child(3)]:hidden md:[&>*:nth-child(3)]:block\n            [&>*:nth-child(4)]:col-span-4 md:[&>*:nth-child(4)]:col-span-3\n            [&>*:nth-child(5)]:col-span-4 md:[&>*:nth-child(5)]:col-span-3\n          `,\n        threeCells: `\n            grid-cols-2 grid-rows-2 [&>*:nth-child(4)]:hidden [&>*:nth-child(5)]:hidden\n            [&>*:first-child]:col-span-2\n        `,\n        fourCells: `\n          grid-cols-3 grid-rows-2\n          [&>*:first-child]:col-span-1\n          [&>*:nth-child(2)]:col-span-2\n          [&>*:nth-child(3)]:col-span-2\n          [&>*:nth-child(5)]:hidden\n        `,\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nexport const GridBento = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof bentoGridVariants>\n>(({ variant, className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={cn(bentoGridVariants({ variant }), className)}\n      {...props}\n    />\n  );\n});\nGridBento.displayName = 'GridBento';",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/containers/grid-bento/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-grid-bento';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-grid-bento',
  },
  'default-grid-staggered': {
    name: 'default-grid-staggered',
    description:
      'Staggered layout component with customizable gap and stagger with default style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/containers/grid-staggered/default/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/containers/grid-staggered.tsx',
        content:
          "import * as React from 'react';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\nconst gridStaggerdVariants = cva('grid grid-cols-12 ', {\n  variants: {\n    variant: {\n      default: `\n            grid-rows-[0.1fr_0.35fr_0.1fr_0.35fr_0.1fr] gap-4\n            [&>*]:col-span-6 [&>*]:row-span-2 \n            [&>*:first-child]:row-start-1 \n            [&>*:nth-child(2)]:row-start-2\n        `,\n      threeCells: `\n        grid-rows-4 gap-4\n        [&>*]:col-span-6 [&>*]:row-span-2 \n        [&>*:first-child]:row-start-1 \n        [&>*:nth-child(2)]:row-start-2\n      `,\n      twoCells: `\n        grid-rows-[0.2fr_0.6fr_0.2fr] gap-4\n        [&>*]:col-span-6 [&>*]:row-span-2 \n        [&>*:first-child]:row-start-1 \n        [&>*:nth-child(2)]:row-start-2\n      `,\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nexport const GridStaggered = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> &\n    VariantProps<typeof gridStaggerdVariants>\n>(({ variant, className, ...props }, ref) => {\n  return (\n    <div\n      className={cn(gridStaggerdVariants({ variant }), '', className)}\n      {...props}\n      ref={ref}\n    />\n  );\n});\nGridStaggered.displayName = 'GridStaggered';",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/containers/grid-staggered/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-grid-staggered';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-grid-staggered',
  },
  'shadcn-default-grid-staggered': {
    name: 'shadcn-default-grid-staggered',
    description:
      'Staggered layout component with customizable gap and stagger with shadcn-default style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/containers/grid-staggered/shadcn-default/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/containers/grid-staggered.tsx',
        content:
          "import * as React from 'react';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\nconst gridStaggerdVariants = cva('grid grid-cols-12 ', {\n  variants: {\n    variant: {\n      default: `\n            grid-rows-[0.1fr_0.35fr_0.1fr_0.35fr_0.1fr] gap-4\n            [&>*]:col-span-6 [&>*]:row-span-2 \n            [&>*:first-child]:row-start-1 \n            [&>*:nth-child(2)]:row-start-2\n        `,\n      threeCells: `\n        grid-rows-4 gap-4\n        [&>*]:col-span-6 [&>*]:row-span-2 \n        [&>*:first-child]:row-start-1 \n        [&>*:nth-child(2)]:row-start-2\n      `,\n      twoCells: `\n        grid-rows-[0.2fr_0.6fr_0.2fr] gap-4\n        [&>*]:col-span-6 [&>*]:row-span-2 \n        [&>*:first-child]:row-start-1 \n        [&>*:nth-child(2)]:row-start-2\n      `,\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nexport const GridStaggered = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> &\n    VariantProps<typeof gridStaggerdVariants>\n>(({ variant, className, ...props }, ref) => {\n  return (\n    <div\n      className={cn(gridStaggerdVariants({ variant }), '', className)}\n      {...props}\n      ref={ref}\n    />\n  );\n});\nGridStaggered.displayName = 'GridStaggered';",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/containers/grid-staggered/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-grid-staggered';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-grid-staggered',
  },
  'shadcn-new-york-grid-staggered': {
    name: 'shadcn-new-york-grid-staggered',
    description:
      'Staggered layout component with customizable gap and stagger with shadcn-new-york style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/containers/grid-staggered/shadcn-new-york/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/containers/grid-staggered.tsx',
        content:
          "import * as React from 'react';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\nconst gridStaggerdVariants = cva('grid grid-cols-12 ', {\n  variants: {\n    variant: {\n      default: `\n            grid-rows-[0.1fr_0.35fr_0.1fr_0.35fr_0.1fr] gap-4\n            [&>*]:col-span-6 [&>*]:row-span-2 \n            [&>*:first-child]:row-start-1 \n            [&>*:nth-child(2)]:row-start-2\n        `,\n      threeCells: `\n        grid-rows-4 gap-4\n        [&>*]:col-span-6 [&>*]:row-span-2 \n        [&>*:first-child]:row-start-1 \n        [&>*:nth-child(2)]:row-start-2\n      `,\n      twoCells: `\n        grid-rows-[0.2fr_0.6fr_0.2fr] gap-4\n        [&>*]:col-span-6 [&>*]:row-span-2 \n        [&>*:first-child]:row-start-1 \n        [&>*:nth-child(2)]:row-start-2\n      `,\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nexport const GridStaggered = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> &\n    VariantProps<typeof gridStaggerdVariants>\n>(({ variant, className, ...props }, ref) => {\n  return (\n    <div\n      className={cn(gridStaggerdVariants({ variant }), '', className)}\n      {...props}\n      ref={ref}\n    />\n  );\n});\nGridStaggered.displayName = 'GridStaggered';",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/containers/grid-staggered/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-grid-staggered';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-grid-staggered',
  },
  'default-text-stagger-hover': {
    name: 'default-text-stagger-hover',
    description:
      'Splitted text animation with staggered effect triggered by hover gesture, You can easily customize by controlling the animation property (transform, opacity, blur), the stagger value, and the transition with default style.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-stagger-hover/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-stagger-hover.tsx',
        content:
          "'use client';\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\nimport {\n  StaggerDirection,\n  setStaggerDirection,\n} from '@/components/systaliko-ui/utils/set-stagger-direction';\nimport { HTMLMotionProps, motion } from 'motion/react';\nimport { splitText } from '@/components/systaliko-ui/utils/split-text';\nimport { GSAP_TRANSITIONS } from '@/components/systaliko-ui/utils/gsap-transitions';\nimport {\n  AnimationT,\n  useAnimationVariants,\n} from '@/components/systaliko-ui/utils/use-animation-variants';\n\ninterface TextStaggerHoverProps extends React.HTMLAttributes<HTMLElement> {\n  as?: React.ElementType;\n}\n\ninterface TextStaggerHoverContextValue {\n  isMouseIn: boolean;\n}\nconst TextStaggerHoverContext = React.createContext<\n  TextStaggerHoverContextValue | undefined\n>(undefined);\nfunction useTextStaggerHoverContext() {\n  const context = React.useContext(TextStaggerHoverContext);\n  if (!context) {\n    throw new Error(\n      'useTextStaggerHoverContext must be used within an TextStaggerHoverContextProvider',\n    );\n  }\n  return context;\n}\n\nexport const TextStaggerHover = ({\n  as: Component = 'span',\n  children,\n  className,\n  ...props\n}: TextStaggerHoverProps) => {\n  const [isMouseIn, setIsMouseIn] = React.useState<boolean>(false);\n  const handleMouse = () => setIsMouseIn((prevState) => !prevState);\n\n  return (\n    <TextStaggerHoverContext.Provider value={{ isMouseIn }}>\n      <Component\n        className={cn('relative inline-block overflow-hidden', className)}\n        {...props}\n        onMouseEnter={handleMouse}\n        onMouseLeave={handleMouse}\n      >\n        {children}\n      </Component>\n    </TextStaggerHoverContext.Provider>\n  );\n};\ninterface TextStaggerHoverContentProps extends HTMLMotionProps<'span'> {\n  animation?: AnimationT;\n  staggerDirection?: StaggerDirection;\n}\nexport const TextStaggerHoverActive = ({\n  animation,\n  staggerDirection = 'start',\n  children,\n  className,\n  transition,\n  ...props\n}: TextStaggerHoverContentProps) => {\n  const { characters, characterCount } = splitText(String(children));\n  const animationVariants = useAnimationVariants(animation);\n  const { isMouseIn } = useTextStaggerHoverContext();\n  return (\n    <span className={cn('inline-block', className)}>\n      {characters.map((char, index) => {\n        const staggerDelay = setStaggerDirection({\n          direction: staggerDirection,\n          totalItems: characterCount,\n          index,\n        });\n        return (\n          <motion.span\n            className=\"inline-block text-nowrap\"\n            key={`${char}-${index}`}\n            variants={animationVariants}\n            animate={isMouseIn ? 'hidden' : 'visible'}\n            transition={{\n              delay: staggerDelay,\n              ease: GSAP_TRANSITIONS['power1.out'],\n              duration: 0.3,\n              ...transition,\n            }}\n            {...props}\n          >\n            {char}\n            {char === ' ' && index < characters.length - 1 && <>&nbsp;</>}\n          </motion.span>\n        );\n      })}\n    </span>\n  );\n};\n\nexport const TextStaggerHoverHidden = ({\n  animation,\n  staggerDirection = 'start',\n  children,\n  className,\n  transition,\n  ...props\n}: TextStaggerHoverContentProps) => {\n  const { characters, characterCount } = splitText(String(children));\n  const animationVariants = useAnimationVariants(animation);\n  const { isMouseIn } = useTextStaggerHoverContext();\n  return (\n    <span className={cn('inline-block absolute left-0 top-0', className)}>\n      {characters.map((char, index) => {\n        const staggerDelay = setStaggerDirection({\n          direction: staggerDirection,\n          totalItems: characterCount,\n          index,\n        });\n        return (\n          <motion.span\n            className=\"inline-block\"\n            key={`${char}-${index}`}\n            variants={animationVariants}\n            animate={isMouseIn ? 'visible' : 'hidden'}\n            transition={{\n              delay: staggerDelay,\n              ease: GSAP_TRANSITIONS['power1.out'],\n              duration: 0.3,\n              ...transition,\n            }}\n            {...props}\n          >\n            {char}\n            {char === ' ' && index < characters.length - 1 && <>&nbsp;</>}\n          </motion.span>\n        );\n      })}\n    </span>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-stagger-hover/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-text-stagger-hover';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-text-stagger-hover',
  },
  'shadcn-default-text-stagger-hover': {
    name: 'shadcn-default-text-stagger-hover',
    description:
      'Splitted text animation with staggered effect triggered by hover gesture, You can easily customize by controlling the animation property (transform, opacity, blur), the stagger value, and the transition with shadcn-default style.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-stagger-hover/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-stagger-hover.tsx',
        content:
          "'use client';\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\nimport {\n  StaggerDirection,\n  setStaggerDirection,\n} from '@/components/systaliko-ui/utils/set-stagger-direction';\nimport { HTMLMotionProps, motion } from 'motion/react';\nimport { splitText } from '@/components/systaliko-ui/utils/split-text';\nimport { GSAP_TRANSITIONS } from '@/components/systaliko-ui/utils/gsap-transitions';\nimport {\n  AnimationT,\n  useAnimationVariants,\n} from '@/components/systaliko-ui/utils/use-animation-variants';\n\ninterface TextStaggerHoverProps extends React.HTMLAttributes<HTMLElement> {\n  as?: React.ElementType;\n}\n\ninterface TextStaggerHoverContextValue {\n  isMouseIn: boolean;\n}\nconst TextStaggerHoverContext = React.createContext<\n  TextStaggerHoverContextValue | undefined\n>(undefined);\nfunction useTextStaggerHoverContext() {\n  const context = React.useContext(TextStaggerHoverContext);\n  if (!context) {\n    throw new Error(\n      'useTextStaggerHoverContext must be used within an TextStaggerHoverContextProvider',\n    );\n  }\n  return context;\n}\n\nexport const TextStaggerHover = ({\n  as: Component = 'span',\n  children,\n  className,\n  ...props\n}: TextStaggerHoverProps) => {\n  const [isMouseIn, setIsMouseIn] = React.useState<boolean>(false);\n  const handleMouse = () => setIsMouseIn((prevState) => !prevState);\n\n  return (\n    <TextStaggerHoverContext.Provider value={{ isMouseIn }}>\n      <Component\n        className={cn('relative inline-block overflow-hidden', className)}\n        {...props}\n        onMouseEnter={handleMouse}\n        onMouseLeave={handleMouse}\n      >\n        {children}\n      </Component>\n    </TextStaggerHoverContext.Provider>\n  );\n};\ninterface TextStaggerHoverContentProps extends HTMLMotionProps<'span'> {\n  animation?: AnimationT;\n  staggerDirection?: StaggerDirection;\n}\nexport const TextStaggerHoverActive = ({\n  animation,\n  staggerDirection = 'start',\n  children,\n  className,\n  transition,\n  ...props\n}: TextStaggerHoverContentProps) => {\n  const { characters, characterCount } = splitText(String(children));\n  const animationVariants = useAnimationVariants(animation);\n  const { isMouseIn } = useTextStaggerHoverContext();\n  return (\n    <span className={cn('inline-block', className)}>\n      {characters.map((char, index) => {\n        const staggerDelay = setStaggerDirection({\n          direction: staggerDirection,\n          totalItems: characterCount,\n          index,\n        });\n        return (\n          <motion.span\n            className=\"inline-block text-nowrap\"\n            key={`${char}-${index}`}\n            variants={animationVariants}\n            animate={isMouseIn ? 'hidden' : 'visible'}\n            transition={{\n              delay: staggerDelay,\n              ease: GSAP_TRANSITIONS['power1.out'],\n              duration: 0.3,\n              ...transition,\n            }}\n            {...props}\n          >\n            {char}\n            {char === ' ' && index < characters.length - 1 && <>&nbsp;</>}\n          </motion.span>\n        );\n      })}\n    </span>\n  );\n};\n\nexport const TextStaggerHoverHidden = ({\n  animation,\n  staggerDirection = 'start',\n  children,\n  className,\n  transition,\n  ...props\n}: TextStaggerHoverContentProps) => {\n  const { characters, characterCount } = splitText(String(children));\n  const animationVariants = useAnimationVariants(animation);\n  const { isMouseIn } = useTextStaggerHoverContext();\n  return (\n    <span className={cn('inline-block absolute left-0 top-0', className)}>\n      {characters.map((char, index) => {\n        const staggerDelay = setStaggerDirection({\n          direction: staggerDirection,\n          totalItems: characterCount,\n          index,\n        });\n        return (\n          <motion.span\n            className=\"inline-block\"\n            key={`${char}-${index}`}\n            variants={animationVariants}\n            animate={isMouseIn ? 'visible' : 'hidden'}\n            transition={{\n              delay: staggerDelay,\n              ease: GSAP_TRANSITIONS['power1.out'],\n              duration: 0.3,\n              ...transition,\n            }}\n            {...props}\n          >\n            {char}\n            {char === ' ' && index < characters.length - 1 && <>&nbsp;</>}\n          </motion.span>\n        );\n      })}\n    </span>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-stagger-hover/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-text-stagger-hover';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-text-stagger-hover',
  },
  'shadcn-new-york-text-stagger-hover': {
    name: 'shadcn-new-york-text-stagger-hover',
    description:
      'Splitted text animation with staggered effect triggered by hover gesture, You can easily customize by controlling the animation property (transform, opacity, blur), the stagger value, and the transition with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-stagger-hover/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-stagger-hover.tsx',
        content:
          "'use client';\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\nimport {\n  StaggerDirection,\n  setStaggerDirection,\n} from '@/components/systaliko-ui/utils/set-stagger-direction';\nimport { HTMLMotionProps, motion } from 'motion/react';\nimport { splitText } from '@/components/systaliko-ui/utils/split-text';\nimport { GSAP_TRANSITIONS } from '@/components/systaliko-ui/utils/gsap-transitions';\nimport {\n  AnimationT,\n  useAnimationVariants,\n} from '@/components/systaliko-ui/utils/use-animation-variants';\n\ninterface TextStaggerHoverProps extends React.HTMLAttributes<HTMLElement> {\n  as?: React.ElementType;\n}\n\ninterface TextStaggerHoverContextValue {\n  isMouseIn: boolean;\n}\nconst TextStaggerHoverContext = React.createContext<\n  TextStaggerHoverContextValue | undefined\n>(undefined);\nfunction useTextStaggerHoverContext() {\n  const context = React.useContext(TextStaggerHoverContext);\n  if (!context) {\n    throw new Error(\n      'useTextStaggerHoverContext must be used within an TextStaggerHoverContextProvider',\n    );\n  }\n  return context;\n}\n\nexport const TextStaggerHover = ({\n  as: Component = 'span',\n  children,\n  className,\n  ...props\n}: TextStaggerHoverProps) => {\n  const [isMouseIn, setIsMouseIn] = React.useState<boolean>(false);\n  const handleMouse = () => setIsMouseIn((prevState) => !prevState);\n\n  return (\n    <TextStaggerHoverContext.Provider value={{ isMouseIn }}>\n      <Component\n        className={cn('relative inline-block overflow-hidden', className)}\n        {...props}\n        onMouseEnter={handleMouse}\n        onMouseLeave={handleMouse}\n      >\n        {children}\n      </Component>\n    </TextStaggerHoverContext.Provider>\n  );\n};\ninterface TextStaggerHoverContentProps extends HTMLMotionProps<'span'> {\n  animation?: AnimationT;\n  staggerDirection?: StaggerDirection;\n}\nexport const TextStaggerHoverActive = ({\n  animation,\n  staggerDirection = 'start',\n  children,\n  className,\n  transition,\n  ...props\n}: TextStaggerHoverContentProps) => {\n  const { characters, characterCount } = splitText(String(children));\n  const animationVariants = useAnimationVariants(animation);\n  const { isMouseIn } = useTextStaggerHoverContext();\n  return (\n    <span className={cn('inline-block', className)}>\n      {characters.map((char, index) => {\n        const staggerDelay = setStaggerDirection({\n          direction: staggerDirection,\n          totalItems: characterCount,\n          index,\n        });\n        return (\n          <motion.span\n            className=\"inline-block text-nowrap\"\n            key={`${char}-${index}`}\n            variants={animationVariants}\n            animate={isMouseIn ? 'hidden' : 'visible'}\n            transition={{\n              delay: staggerDelay,\n              ease: GSAP_TRANSITIONS['power1.out'],\n              duration: 0.3,\n              ...transition,\n            }}\n            {...props}\n          >\n            {char}\n            {char === ' ' && index < characters.length - 1 && <>&nbsp;</>}\n          </motion.span>\n        );\n      })}\n    </span>\n  );\n};\n\nexport const TextStaggerHoverHidden = ({\n  animation,\n  staggerDirection = 'start',\n  children,\n  className,\n  transition,\n  ...props\n}: TextStaggerHoverContentProps) => {\n  const { characters, characterCount } = splitText(String(children));\n  const animationVariants = useAnimationVariants(animation);\n  const { isMouseIn } = useTextStaggerHoverContext();\n  return (\n    <span className={cn('inline-block absolute left-0 top-0', className)}>\n      {characters.map((char, index) => {\n        const staggerDelay = setStaggerDirection({\n          direction: staggerDirection,\n          totalItems: characterCount,\n          index,\n        });\n        return (\n          <motion.span\n            className=\"inline-block\"\n            key={`${char}-${index}`}\n            variants={animationVariants}\n            animate={isMouseIn ? 'visible' : 'hidden'}\n            transition={{\n              delay: staggerDelay,\n              ease: GSAP_TRANSITIONS['power1.out'],\n              duration: 0.3,\n              ...transition,\n            }}\n            {...props}\n          >\n            {char}\n            {char === ' ' && index < characters.length - 1 && <>&nbsp;</>}\n          </motion.span>\n        );\n      })}\n    </span>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-stagger-hover/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-text-stagger-hover';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-text-stagger-hover',
  },
  'default-card-curtain-reveal-demo': {
    name: 'default-card-curtain-reveal-demo',
    description:
      'Demo showing Card Curtain Reveal Component with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/card-curtain-reveal'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/cards/card-curtain-reveal/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/cards/card-curtain-reveal.tsx',
        content:
          'import { Button } from \'@/components/ui/button\';\nimport {\n  CardCurtain,\n  CardCurtainReveal,\n  CardCurtainRevealBody,\n  CardCurtainRevealDescription,\n  CardCurtainRevealFooter,\n  CardCurtainRevealTitle,\n} from \'@/components/systaliko-ui/cards/card-curtain-reveal\';\nimport { ArrowUpRight } from \'lucide-react\';\n\nexport const CardCurtainRevealDemo = () => {\n  return (\n    <CardCurtainReveal className=" h-[540px] w-96 border bg-fd-accent-foreground text-fd-accent shadow">\n      <CardCurtainRevealBody>\n        <CardCurtainRevealTitle className="text-3xl font-medium tracking-tight">\n          Behind <br />\n          the Curtain\n        </CardCurtainRevealTitle>\n        <CardCurtainRevealDescription className="my-4 ">\n          <p>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Accusantium\n            voluptate, eum quia temporibus fugiat rerum nobis modi dolor,\n            delectus laboriosam, quae adipisci reprehenderit officiis quidem\n            iure ducimus incidunt officia. Magni, eligendi repellendus. Fugiat,\n            natus aut?\n          </p>\n        </CardCurtainRevealDescription>\n        <Button\n          variant={\'secondary\'}\n          size={\'icon\'}\n          className="aspect-square rounded-full"\n        >\n          <ArrowUpRight />\n        </Button>\n\n        <CardCurtain className=" bg-secondary" />\n      </CardCurtainRevealBody>\n\n      <CardCurtainRevealFooter className="mt-auto">\n        {/* eslint-disable-next-line @next/next/no-img-element */}\n        <img\n          width="100%"\n          height="100%"\n          alt="street"\n          className="size-full"\n          src="https://images.unsplash.com/photo-1628468033761-125b565aaac7?q=80&w=2340&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n        />\n      </CardCurtainRevealFooter>\n    </CardCurtainReveal>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/cards/card-curtain-reveal/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-card-curtain-reveal-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-card-curtain-reveal-demo',
  },
  'shadcn-default-card-curtain-reveal-demo': {
    name: 'shadcn-default-card-curtain-reveal-demo',
    description:
      'Demo showing Card Curtain Reveal Component with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/card-curtain-reveal'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/cards/card-curtain-reveal/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/cards/card-curtain-reveal.tsx',
        content:
          'import { Button } from \'@/components/ui/button\';\nimport {\n  CardCurtain,\n  CardCurtainReveal,\n  CardCurtainRevealBody,\n  CardCurtainRevealDescription,\n  CardCurtainRevealFooter,\n  CardCurtainRevealTitle,\n} from \'@/components/systaliko-ui/cards/card-curtain-reveal\';\nimport { ArrowUpRight } from \'lucide-react\';\n\nexport const CardCurtainRevealDemo = () => {\n  return (\n    <CardCurtainReveal className=" h-[540px] w-96 border bg-fd-accent-foreground text-fd-accent shadow">\n      <CardCurtainRevealBody>\n        <CardCurtainRevealTitle className="text-3xl font-medium tracking-tight">\n          Behind <br />\n          the Curtain\n        </CardCurtainRevealTitle>\n        <CardCurtainRevealDescription className="my-4 ">\n          <p>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Accusantium\n            voluptate, eum quia temporibus fugiat rerum nobis modi dolor,\n            delectus laboriosam, quae adipisci reprehenderit officiis quidem\n            iure ducimus incidunt officia. Magni, eligendi repellendus. Fugiat,\n            natus aut?\n          </p>\n        </CardCurtainRevealDescription>\n        <Button\n          variant={\'secondary\'}\n          size={\'icon\'}\n          className="aspect-square rounded-full"\n        >\n          <ArrowUpRight />\n        </Button>\n\n        <CardCurtain className=" bg-secondary" />\n      </CardCurtainRevealBody>\n\n      <CardCurtainRevealFooter className="mt-auto">\n        {/* eslint-disable-next-line @next/next/no-img-element */}\n        <img\n          width="100%"\n          height="100%"\n          alt="street"\n          className="size-full"\n          src="https://images.unsplash.com/photo-1628468033761-125b565aaac7?q=80&w=2340&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n        />\n      </CardCurtainRevealFooter>\n    </CardCurtainReveal>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/cards/card-curtain-reveal/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-card-curtain-reveal-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-card-curtain-reveal-demo',
  },
  'shadcn-new-york-card-curtain-reveal-demo': {
    name: 'shadcn-new-york-card-curtain-reveal-demo',
    description:
      'Demo showing Card Curtain Reveal Component with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/card-curtain-reveal'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/cards/card-curtain-reveal/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/cards/card-curtain-reveal.tsx',
        content:
          'import { Button } from \'@/components/ui/button\';\nimport {\n  CardCurtain,\n  CardCurtainReveal,\n  CardCurtainRevealBody,\n  CardCurtainRevealDescription,\n  CardCurtainRevealFooter,\n  CardCurtainRevealTitle,\n} from \'@/components/systaliko-ui/cards/card-curtain-reveal\';\nimport { ArrowUpRight } from \'lucide-react\';\n\nexport const CardCurtainRevealDemo = () => {\n  return (\n    <CardCurtainReveal className=" h-[540px] w-96 border bg-fd-accent-foreground text-fd-accent shadow">\n      <CardCurtainRevealBody>\n        <CardCurtainRevealTitle className="text-3xl font-medium tracking-tight">\n          Behind <br />\n          the Curtain\n        </CardCurtainRevealTitle>\n        <CardCurtainRevealDescription className="my-4 ">\n          <p>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Accusantium\n            voluptate, eum quia temporibus fugiat rerum nobis modi dolor,\n            delectus laboriosam, quae adipisci reprehenderit officiis quidem\n            iure ducimus incidunt officia. Magni, eligendi repellendus. Fugiat,\n            natus aut?\n          </p>\n        </CardCurtainRevealDescription>\n        <Button\n          variant={\'secondary\'}\n          size={\'icon\'}\n          className="aspect-square rounded-full"\n        >\n          <ArrowUpRight />\n        </Button>\n\n        <CardCurtain className=" bg-secondary" />\n      </CardCurtainRevealBody>\n\n      <CardCurtainRevealFooter className="mt-auto">\n        {/* eslint-disable-next-line @next/next/no-img-element */}\n        <img\n          width="100%"\n          height="100%"\n          alt="street"\n          className="size-full"\n          src="https://images.unsplash.com/photo-1628468033761-125b565aaac7?q=80&w=2340&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n        />\n      </CardCurtainRevealFooter>\n    </CardCurtainReveal>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/cards/card-curtain-reveal/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-card-curtain-reveal-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/shadcn-new-york-card-curtain-reveal-demo',
  },
  'default-card-flip-demo': {
    name: 'default-card-flip-demo',
    description: 'Demo showing Flip Card Component with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/card-flip'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/cards/card-flip/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/cards/card-flip.tsx',
        content:
          '\'use client\';\nimport * as React from \'react\';\nimport {\n  CardFlip,\n  CardFlipBack,\n  CardFlipFront,\n} from \'@/components/systaliko-ui/cards/card-flip\';\nexport function CardFlipDemo() {\n  return (\n    <div className="container py-12">\n      <div className="flex flex-wrap justify-center gap-4">\n        <CardFlip className="h-96 w-2/6">\n          <CardFlipFront className="rounded-xl">\n            <img\n              width={1015}\n              height={678}\n              src="https://images.unsplash.com/photo-1655853548169-646b6e0f15ca?q=80&w=2487&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n              alt="nike air jordan"\n              className="size-full object-cover"\n            />\n          </CardFlipFront>\n          <CardFlipBack className="flex flex-col items-center justify-center rounded-xl bg-fd-accent-foreground px-4 py-6 text-center text-white">\n            <h2 className="text-xl font-bold">Nike Air Jordan</h2>\n            <h4 className="mb-4">€ 1,299.00</h4>\n            <button className="rounded-full py-2 px-4 bg-primary text-zinc-900">\n              Add to cart\n            </button>\n          </CardFlipBack>\n        </CardFlip>\n\n        <CardFlip flipDirection="vertical" className="h-96 w-2/6">\n          <CardFlipFront className="rounded-xl">\n            <img\n              width={542}\n              height={678}\n              src="https://images.unsplash.com/photo-1656944227425-5646be300a14?q=80&w=2527&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n              alt="nike air jordan"\n              className="size-full object-cover"\n            />\n          </CardFlipFront>\n          <CardFlipBack className="flex flex-col items-center justify-center rounded-xl bg-fd-accent-foreground px-4 py-6 text-center text-white">\n            <h2 className="text-xl font-bold">Nike Air Jordan</h2>\n            <h4 className="mb-4">€ 1,299.00</h4>\n            <button className="rounded-full py-2 px-4 bg-primary text-zinc-900">\n              Add to cart\n            </button>\n          </CardFlipBack>\n        </CardFlip>\n      </div>\n    </div>\n  );\n}',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/cards/card-flip/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-card-flip-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-card-flip-demo',
  },
  'shadcn-default-card-flip-demo': {
    name: 'shadcn-default-card-flip-demo',
    description: 'Demo showing Flip Card Component with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/card-flip'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/cards/card-flip/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/cards/card-flip.tsx',
        content:
          '\'use client\';\nimport * as React from \'react\';\nimport {\n  CardFlip,\n  CardFlipBack,\n  CardFlipFront,\n} from \'@/components/systaliko-ui/cards/card-flip\';\nexport function CardFlipDemo() {\n  return (\n    <div className="container py-12">\n      <div className="flex flex-wrap justify-center gap-4">\n        <CardFlip className="h-96 w-2/6">\n          <CardFlipFront className="rounded-xl">\n            <img\n              width={1015}\n              height={678}\n              src="https://images.unsplash.com/photo-1655853548169-646b6e0f15ca?q=80&w=2487&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n              alt="nike air jordan"\n              className="size-full object-cover"\n            />\n          </CardFlipFront>\n          <CardFlipBack className="flex flex-col items-center justify-center rounded-xl bg-fd-accent-foreground px-4 py-6 text-center text-white">\n            <h2 className="text-xl font-bold">Nike Air Jordan</h2>\n            <h4 className="mb-4">€ 1,299.00</h4>\n            <button className="rounded-full py-2 px-4 bg-primary text-zinc-900">\n              Add to cart\n            </button>\n          </CardFlipBack>\n        </CardFlip>\n\n        <CardFlip flipDirection="vertical" className="h-96 w-2/6">\n          <CardFlipFront className="rounded-xl">\n            <img\n              width={542}\n              height={678}\n              src="https://images.unsplash.com/photo-1656944227425-5646be300a14?q=80&w=2527&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n              alt="nike air jordan"\n              className="size-full object-cover"\n            />\n          </CardFlipFront>\n          <CardFlipBack className="flex flex-col items-center justify-center rounded-xl bg-fd-accent-foreground px-4 py-6 text-center text-white">\n            <h2 className="text-xl font-bold">Nike Air Jordan</h2>\n            <h4 className="mb-4">€ 1,299.00</h4>\n            <button className="rounded-full py-2 px-4 bg-primary text-zinc-900">\n              Add to cart\n            </button>\n          </CardFlipBack>\n        </CardFlip>\n      </div>\n    </div>\n  );\n}',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/cards/card-flip/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-card-flip-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-card-flip-demo',
  },
  'shadcn-new-york-card-flip-demo': {
    name: 'shadcn-new-york-card-flip-demo',
    description: 'Demo showing Flip Card Component with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/card-flip'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/cards/card-flip/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/cards/card-flip.tsx',
        content:
          '\'use client\';\nimport * as React from \'react\';\nimport {\n  CardFlip,\n  CardFlipBack,\n  CardFlipFront,\n} from \'@/components/systaliko-ui/cards/card-flip\';\nexport function CardFlipDemo() {\n  return (\n    <div className="container py-12">\n      <div className="flex flex-wrap justify-center gap-4">\n        <CardFlip className="h-96 w-2/6">\n          <CardFlipFront className="rounded-xl">\n            <img\n              width={1015}\n              height={678}\n              src="https://images.unsplash.com/photo-1655853548169-646b6e0f15ca?q=80&w=2487&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n              alt="nike air jordan"\n              className="size-full object-cover"\n            />\n          </CardFlipFront>\n          <CardFlipBack className="flex flex-col items-center justify-center rounded-xl bg-fd-accent-foreground px-4 py-6 text-center text-white">\n            <h2 className="text-xl font-bold">Nike Air Jordan</h2>\n            <h4 className="mb-4">€ 1,299.00</h4>\n            <button className="rounded-full py-2 px-4 bg-primary text-zinc-900">\n              Add to cart\n            </button>\n          </CardFlipBack>\n        </CardFlip>\n\n        <CardFlip flipDirection="vertical" className="h-96 w-2/6">\n          <CardFlipFront className="rounded-xl">\n            <img\n              width={542}\n              height={678}\n              src="https://images.unsplash.com/photo-1656944227425-5646be300a14?q=80&w=2527&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n              alt="nike air jordan"\n              className="size-full object-cover"\n            />\n          </CardFlipFront>\n          <CardFlipBack className="flex flex-col items-center justify-center rounded-xl bg-fd-accent-foreground px-4 py-6 text-center text-white">\n            <h2 className="text-xl font-bold">Nike Air Jordan</h2>\n            <h4 className="mb-4">€ 1,299.00</h4>\n            <button className="rounded-full py-2 px-4 bg-primary text-zinc-900">\n              Add to cart\n            </button>\n          </CardFlipBack>\n        </CardFlip>\n      </div>\n    </div>\n  );\n}',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/cards/card-flip/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-card-flip-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-card-flip-demo',
  },
  'default-card-hover-reveal-demo': {
    name: 'default-card-hover-reveal-demo',
    description: 'Demo showing Card Hover Reveal Component with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/card-hover-reveal'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/cards/card-hover-reveal/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/cards/card-hover-reveal.tsx',
        content:
          'import {\n  CardHoverReveal,\n  CardHoverRevealContent,\n  CardHoverRevealMain,\n} from \'@/components/systaliko-ui/cards/card-hover-reveal\';\n\nexport const CardHoverRevealDemo = () => (\n  <CardHoverReveal className="h-[512px] w-[385px] rounded-xl">\n    <CardHoverRevealMain hoverScale={1.2}>\n      <img\n        width={1077}\n        height={606}\n        alt="product image"\n        src="https://images.unsplash.com/photo-1619551734325-81aaf323686c?q=80&w=2549&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n        className="inline-block size-full max-h-full max-w-full object-cover align-middle"\n      />\n    </CardHoverRevealMain>\n\n    <CardHoverRevealContent className="space-y-4 rounded-2xl bg-fd-foreground/70 text-zinc-50">\n      <div className="space-y-2">\n        <h3 className="text-sm text-opacity-60">Services</h3>\n        <div className="flex flex-wrap gap-2 ">\n          <div className=" rounded-full bg-fd-foreground px-2 py-1">\n            <p className=" text-xs leading-normal">Branding</p>\n          </div>\n          <div className=" rounded-full bg-fd-foreground px-2 py-1">\n            <p className=" text-xs leading-normal">UI UX</p>\n          </div>\n        </div>\n      </div>\n\n      <div className="space-y-2">\n        <h3 className=" text-sm text-opacity-60">Stack</h3>\n        <div className="flex flex-wrap gap-2 ">\n          <div className=" rounded-full bg-primary px-2 py-1">\n            <p className=" text-xs leading-normal">Figma</p>\n          </div>\n          <div className=" rounded-full bg-primary px-2 py-1">\n            <p className=" text-xs leading-normal">Webflow</p>\n          </div>\n        </div>\n      </div>\n\n      <div className="space-y-2">\n        <h3 className="text-sm text-opacity-60">Profile</h3>\n        {/* tag */}\n        <div className="flex flex-wrap gap-2 ">\n          <p className="text-sm text-card">\n            Comprehensive platform designed for an agency, Creating professional\n            and business-oriented brand.\n          </p>\n        </div>\n      </div>\n    </CardHoverRevealContent>\n  </CardHoverReveal>\n);',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/cards/card-hover-reveal/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-card-hover-reveal-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-card-hover-reveal-demo',
  },
  'shadcn-default-card-hover-reveal-demo': {
    name: 'shadcn-default-card-hover-reveal-demo',
    description:
      'Demo showing Card Hover Reveal Component with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/card-hover-reveal'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/cards/card-hover-reveal/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/cards/card-hover-reveal.tsx',
        content:
          'import {\n  CardHoverReveal,\n  CardHoverRevealContent,\n  CardHoverRevealMain,\n} from \'@/components/systaliko-ui/cards/card-hover-reveal\';\n\nexport const CardHoverRevealDemo = () => (\n  <CardHoverReveal className="h-[512px] w-[385px] rounded-xl">\n    <CardHoverRevealMain hoverScale={1.2}>\n      <img\n        width={1077}\n        height={606}\n        alt="product image"\n        src="https://images.unsplash.com/photo-1619551734325-81aaf323686c?q=80&w=2549&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n        className="inline-block size-full max-h-full max-w-full object-cover align-middle"\n      />\n    </CardHoverRevealMain>\n\n    <CardHoverRevealContent className="space-y-4 rounded-2xl bg-fd-foreground/70 text-zinc-50">\n      <div className="space-y-2">\n        <h3 className="text-sm text-opacity-60">Services</h3>\n        <div className="flex flex-wrap gap-2 ">\n          <div className=" rounded-full bg-fd-foreground px-2 py-1">\n            <p className=" text-xs leading-normal">Branding</p>\n          </div>\n          <div className=" rounded-full bg-fd-foreground px-2 py-1">\n            <p className=" text-xs leading-normal">UI UX</p>\n          </div>\n        </div>\n      </div>\n\n      <div className="space-y-2">\n        <h3 className=" text-sm text-opacity-60">Stack</h3>\n        <div className="flex flex-wrap gap-2 ">\n          <div className=" rounded-full bg-primary px-2 py-1">\n            <p className=" text-xs leading-normal">Figma</p>\n          </div>\n          <div className=" rounded-full bg-primary px-2 py-1">\n            <p className=" text-xs leading-normal">Webflow</p>\n          </div>\n        </div>\n      </div>\n\n      <div className="space-y-2">\n        <h3 className="text-sm text-opacity-60">Profile</h3>\n        {/* tag */}\n        <div className="flex flex-wrap gap-2 ">\n          <p className="text-sm text-card">\n            Comprehensive platform designed for an agency, Creating professional\n            and business-oriented brand.\n          </p>\n        </div>\n      </div>\n    </CardHoverRevealContent>\n  </CardHoverReveal>\n);',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/cards/card-hover-reveal/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-card-hover-reveal-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-card-hover-reveal-demo',
  },
  'shadcn-new-york-card-hover-reveal-demo': {
    name: 'shadcn-new-york-card-hover-reveal-demo',
    description:
      'Demo showing Card Hover Reveal Component with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/card-hover-reveal'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/cards/card-hover-reveal/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/cards/card-hover-reveal.tsx',
        content:
          'import {\n  CardHoverReveal,\n  CardHoverRevealContent,\n  CardHoverRevealMain,\n} from \'@/components/systaliko-ui/cards/card-hover-reveal\';\n\nexport const CardHoverRevealDemo = () => (\n  <CardHoverReveal className="h-[512px] w-[385px] rounded-xl">\n    <CardHoverRevealMain hoverScale={1.2}>\n      <img\n        width={1077}\n        height={606}\n        alt="product image"\n        src="https://images.unsplash.com/photo-1619551734325-81aaf323686c?q=80&w=2549&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n        className="inline-block size-full max-h-full max-w-full object-cover align-middle"\n      />\n    </CardHoverRevealMain>\n\n    <CardHoverRevealContent className="space-y-4 rounded-2xl bg-fd-foreground/70 text-zinc-50">\n      <div className="space-y-2">\n        <h3 className="text-sm text-opacity-60">Services</h3>\n        <div className="flex flex-wrap gap-2 ">\n          <div className=" rounded-full bg-fd-foreground px-2 py-1">\n            <p className=" text-xs leading-normal">Branding</p>\n          </div>\n          <div className=" rounded-full bg-fd-foreground px-2 py-1">\n            <p className=" text-xs leading-normal">UI UX</p>\n          </div>\n        </div>\n      </div>\n\n      <div className="space-y-2">\n        <h3 className=" text-sm text-opacity-60">Stack</h3>\n        <div className="flex flex-wrap gap-2 ">\n          <div className=" rounded-full bg-primary px-2 py-1">\n            <p className=" text-xs leading-normal">Figma</p>\n          </div>\n          <div className=" rounded-full bg-primary px-2 py-1">\n            <p className=" text-xs leading-normal">Webflow</p>\n          </div>\n        </div>\n      </div>\n\n      <div className="space-y-2">\n        <h3 className="text-sm text-opacity-60">Profile</h3>\n        {/* tag */}\n        <div className="flex flex-wrap gap-2 ">\n          <p className="text-sm text-card">\n            Comprehensive platform designed for an agency, Creating professional\n            and business-oriented brand.\n          </p>\n        </div>\n      </div>\n    </CardHoverRevealContent>\n  </CardHoverReveal>\n);',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/cards/card-hover-reveal/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-card-hover-reveal-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-card-hover-reveal-demo',
  },
  'default-card-testimonial-demo': {
    name: 'default-card-testimonial-demo',
    description: 'Demo showing Card Testimonial Component with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/card-testimonial'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/cards/card-testimonial/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/cards/card-testimonial.tsx',
        content:
          "import {\n  CardTestimonial,\n  TestimonialAuthor,\n  TestimonialQuote,\n  TestimonialRating,\n} from '@/components/systaliko-ui/cards/card-testimonial';\n\nconst TESTIMONIAL = {\n  id: 'testimonial-2',\n  name: 'Lisa M.',\n  profession: 'UX Designer',\n  rating: 4.5,\n  quote:\n    'Working with them was a game-changer for our project. Their expertise and professionalism exceeded our expectations.',\n  avatarUrl:\n    'https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTF8fHByb2ZpbGV8ZW58MHx8MHx8fDA%3D',\n};\n\nexport const CardTestimonialDemo = () => {\n  return (\n    <CardTestimonial\n      testimonialQuote={TESTIMONIAL.quote}\n      testimonialRating={TESTIMONIAL.rating}\n      testimonialAuthor={{\n        authorName: TESTIMONIAL.name,\n        avatarUrl: TESTIMONIAL.avatarUrl,\n        description: TESTIMONIAL.profession,\n      }}\n      role=\"article\"\n      aria-labelledby={`card-${TESTIMONIAL.id}-title`}\n      aria-describedby={`card-${TESTIMONIAL.id}-content`}\n      className=\"h-[450px] w-[350px] shadow\"\n    >\n      <TestimonialRating className=\"text-primary\" />\n      <div className=\"relative text-center mx-auto w-4/5 text-lg\">\n        <TestimonialQuote>{TESTIMONIAL.quote}</TestimonialQuote>\n      </div>\n\n      <TestimonialAuthor className=\"flex items-center gap-4\" />\n    </CardTestimonial>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/cards/card-testimonial/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-card-testimonial-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-card-testimonial-demo',
  },
  'shadcn-default-card-testimonial-demo': {
    name: 'shadcn-default-card-testimonial-demo',
    description:
      'Demo showing Card Testimonial Component with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/card-testimonial'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/cards/card-testimonial/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/cards/card-testimonial.tsx',
        content:
          "import {\n  CardTestimonial,\n  TestimonialAuthor,\n  TestimonialQuote,\n  TestimonialRating,\n} from '@/components/systaliko-ui/cards/card-testimonial';\n\nconst TESTIMONIAL = {\n  id: 'testimonial-2',\n  name: 'Lisa M.',\n  profession: 'UX Designer',\n  rating: 4.5,\n  quote:\n    'Working with them was a game-changer for our project. Their expertise and professionalism exceeded our expectations.',\n  avatarUrl:\n    'https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTF8fHByb2ZpbGV8ZW58MHx8MHx8fDA%3D',\n};\n\nexport const CardTestimonialDemo = () => {\n  return (\n    <CardTestimonial\n      testimonialQuote={TESTIMONIAL.quote}\n      testimonialRating={TESTIMONIAL.rating}\n      testimonialAuthor={{\n        authorName: TESTIMONIAL.name,\n        avatarUrl: TESTIMONIAL.avatarUrl,\n        description: TESTIMONIAL.profession,\n      }}\n      role=\"article\"\n      aria-labelledby={`card-${TESTIMONIAL.id}-title`}\n      aria-describedby={`card-${TESTIMONIAL.id}-content`}\n      className=\"h-[450px] w-[350px] shadow\"\n    >\n      <TestimonialRating className=\"text-primary\" />\n      <div className=\"relative text-center mx-auto w-4/5 text-lg\">\n        <TestimonialQuote>{TESTIMONIAL.quote}</TestimonialQuote>\n      </div>\n\n      <TestimonialAuthor className=\"flex items-center gap-4\" />\n    </CardTestimonial>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/cards/card-testimonial/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-card-testimonial-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-card-testimonial-demo',
  },
  'shadcn-new-york-card-testimonial-demo': {
    name: 'shadcn-new-york-card-testimonial-demo',
    description:
      'Demo showing Card Testimonial Component with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/card-testimonial'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/cards/card-testimonial/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/cards/card-testimonial.tsx',
        content:
          "import {\n  CardTestimonial,\n  TestimonialAuthor,\n  TestimonialQuote,\n  TestimonialRating,\n} from '@/components/systaliko-ui/cards/card-testimonial';\n\nconst TESTIMONIAL = {\n  id: 'testimonial-2',\n  name: 'Lisa M.',\n  profession: 'UX Designer',\n  rating: 4.5,\n  quote:\n    'Working with them was a game-changer for our project. Their expertise and professionalism exceeded our expectations.',\n  avatarUrl:\n    'https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTF8fHByb2ZpbGV8ZW58MHx8MHx8fDA%3D',\n};\n\nexport const CardTestimonialDemo = () => {\n  return (\n    <CardTestimonial\n      testimonialQuote={TESTIMONIAL.quote}\n      testimonialRating={TESTIMONIAL.rating}\n      testimonialAuthor={{\n        authorName: TESTIMONIAL.name,\n        avatarUrl: TESTIMONIAL.avatarUrl,\n        description: TESTIMONIAL.profession,\n      }}\n      role=\"article\"\n      aria-labelledby={`card-${TESTIMONIAL.id}-title`}\n      aria-describedby={`card-${TESTIMONIAL.id}-content`}\n      className=\"h-[450px] w-[350px] shadow\"\n    >\n      <TestimonialRating className=\"text-primary\" />\n      <div className=\"relative text-center mx-auto w-4/5 text-lg\">\n        <TestimonialQuote>{TESTIMONIAL.quote}</TestimonialQuote>\n      </div>\n\n      <TestimonialAuthor className=\"flex items-center gap-4\" />\n    </CardTestimonial>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/cards/card-testimonial/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-card-testimonial-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-card-testimonial-demo',
  },
  'default-container-clipped-demo': {
    name: 'default-container-clipped-demo',
    description: 'Demo showing container Clipped Component with default style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/container-clipped'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/containers/container-clipped/default/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/demo/containers/container-clipped.tsx',
        content:
          'import { Button } from \'@/components/ui/button\';\nimport {\n  clipPathVariants,\n  ContainerClipped,\n  ContainerClippedBg,\n  ContainerClippedColLg,\n  ContainerClippedColMd,\n} from \'@/components/systaliko-ui/containers/container-clipped\';\nimport { TextStaggerInview } from \'@/components/systaliko-ui/text/text-stagger-inview\';\n\nexport const ContainerClippedDemo = () => {\n  return (\n    <ContainerClipped className="min-h-dvh">\n      <ContainerClippedColLg>\n        <ContainerClippedBg className="absolute bg-slate-200 hidden md:block inset-0 size-full" />\n        <div className="p-8 md:pl-12 md:pr-0 h-full gap-8 flex flex-col items-start justify-center relative z-50">\n          <TextStaggerInview\n            as="h1"\n            className="font-serif text-6xl xl:text-7xl tracking-tight"\n            animation="top"\n            staggerDirection={-1}\n          >\n            Crafting Timeless Architectural Spaces\n          </TextStaggerInview>\n          <p className="opacity-80">\n            We are a visionary design collective that transforms spaces <br />\n            into living art. Our expertise spans from architectural <br />\n            innovation to bespoke interior solutions, creating <br />\n            environments that inspire and endure.\n          </p>\n          <Button\n            className="rounded-none bg-slate-400 text-slate-200"\n            size={\'lg\'}\n            variant={\'secondary\'}\n          >\n            Discover more\n          </Button>\n        </div>\n      </ContainerClippedColLg>\n\n      <ContainerClippedColMd style={{ clipPath: clipPathVariants[\'reversed\'] }}>\n        <img\n          src="https://images.unsplash.com/photo-1487958449943-2429e8be8625?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n          alt="modern architecture"\n          className="size-full object-cover"\n        />\n      </ContainerClippedColMd>\n    </ContainerClipped>\n  );\n};\n\nexport const ContainerClippedDemo2 = () => {\n  return (\n    <ContainerClipped className="mb-12 min-h-dvh">\n      <ContainerClippedColLg>\n        <ContainerClippedBg className="absolute  bg-blue-900 hidden md:block inset-0 size-full" />\n        <div className="p-8 text-secondary md:pl-12 md:pr-0 h-full gap-8 flex flex-col items-start justify-center relative z-50">\n          <TextStaggerInview\n            as="h1"\n            className="font-semibold   text-6xl xl:text-7xl tracking-tight"\n            animation="top"\n            staggerDirection={-1}\n          >\n            Quality Textiles Crafted with Precision\n          </TextStaggerInview>\n          <p className="text-lg">\n            We are a leading textile manufacturer that transforms <br />\n            raw materials into premium fabrics. Our expertise\n            <br /> spans from innovative weaving techniques to\n            <br /> sustainable production methods.\n          </p>\n          <Button className="rounded-none  " size={\'lg\'}>\n            Request a Quote\n          </Button>\n        </div>\n      </ContainerClippedColLg>\n\n      <ContainerClippedColMd>\n        <img\n          src="https://images.unsplash.com/photo-1589793463357-5fb813435467?q=80&w=2456&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n          alt="Textile factory"\n          className="size-full object-cover"\n        />\n      </ContainerClippedColMd>\n    </ContainerClipped>\n  );\n};\n\nexport const ContainerClippedDemo3 = () => {\n  return (\n    <ContainerClipped className="mb-12 min-h-dvh">\n      <ContainerClippedColLg>\n        <ContainerClippedBg className="absolute rounded-br-4xl bg-fd-primary hidden md:block inset-0 size-full" />\n        <div className="p-8 text-secondary md:pl-12 md:pr-0 h-full gap-8 flex flex-col items-start justify-center relative z-50">\n          <TextStaggerInview\n            as="h1"\n            className="font-medium text-5xl xl:text-7xl tracking-tight"\n            // animation="top"\n            // staggerDirection={-1}\n          >\n            Elevate Your Productivity in Our Modern Workspaces\n          </TextStaggerInview>\n          <TextStaggerInview\n            stagger={0.01}\n            as="p"\n            className="text-sm max-w-[45ch]"\n          >\n            At Nexus Hub, we offer flexible, fully furnished workspaces designed\n            to inspire collaboration and fuel creativity. Enjoy high-speed\n            internet, ergonomic seating, and vibrant communal areas—all backed\n            by 24/7 access and premium amenities. Whether you’re a solo\n            freelancer or a growing team, our tailored plans ensure you have\n            everything you need to work smarter and connect with professionals.\n          </TextStaggerInview>\n          <Button size={\'lg\'}>Book a Free Tour</Button>\n        </div>\n      </ContainerClippedColLg>\n\n      <ContainerClippedColMd className="flex justify-center items-end">\n        <div className=" size-3/4 aspect-square overflow-hidden rounded-xl">\n          <img\n            src="https://images.unsplash.com/photo-1556761175-b413da4baf72?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n            alt="Textile factory"\n            className="size-full object-cover"\n          />\n        </div>\n      </ContainerClippedColMd>\n    </ContainerClipped>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/containers/container-clipped/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-container-clipped-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-container-clipped-demo',
  },
  'shadcn-default-container-clipped-demo': {
    name: 'shadcn-default-container-clipped-demo',
    description:
      'Demo showing container Clipped Component with shadcn-default style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/container-clipped'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/containers/container-clipped/shadcn-default/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/demo/containers/container-clipped.tsx',
        content:
          'import { Button } from \'@/components/ui/button\';\nimport {\n  clipPathVariants,\n  ContainerClipped,\n  ContainerClippedBg,\n  ContainerClippedColLg,\n  ContainerClippedColMd,\n} from \'@/components/systaliko-ui/containers/container-clipped\';\nimport { TextStaggerInview } from \'@/components/systaliko-ui/text/text-stagger-inview\';\n\nexport const ContainerClippedDemo = () => {\n  return (\n    <ContainerClipped className="min-h-dvh">\n      <ContainerClippedColLg>\n        <ContainerClippedBg className="absolute bg-slate-200 hidden md:block inset-0 size-full" />\n        <div className="p-8 md:pl-12 md:pr-0 h-full gap-8 flex flex-col items-start justify-center relative z-50">\n          <TextStaggerInview\n            as="h1"\n            className="font-serif text-6xl xl:text-7xl tracking-tight"\n            animation="top"\n            staggerDirection={-1}\n          >\n            Crafting Timeless Architectural Spaces\n          </TextStaggerInview>\n          <p className="opacity-80">\n            We are a visionary design collective that transforms spaces <br />\n            into living art. Our expertise spans from architectural <br />\n            innovation to bespoke interior solutions, creating <br />\n            environments that inspire and endure.\n          </p>\n          <Button\n            className="rounded-none bg-slate-400 text-slate-200"\n            size={\'lg\'}\n            variant={\'secondary\'}\n          >\n            Discover more\n          </Button>\n        </div>\n      </ContainerClippedColLg>\n\n      <ContainerClippedColMd style={{ clipPath: clipPathVariants[\'reversed\'] }}>\n        <img\n          src="https://images.unsplash.com/photo-1487958449943-2429e8be8625?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n          alt="modern architecture"\n          className="size-full object-cover"\n        />\n      </ContainerClippedColMd>\n    </ContainerClipped>\n  );\n};\n\nexport const ContainerClippedDemo2 = () => {\n  return (\n    <ContainerClipped className="mb-12 min-h-dvh">\n      <ContainerClippedColLg>\n        <ContainerClippedBg className="absolute  bg-blue-900 hidden md:block inset-0 size-full" />\n        <div className="p-8 text-secondary md:pl-12 md:pr-0 h-full gap-8 flex flex-col items-start justify-center relative z-50">\n          <TextStaggerInview\n            as="h1"\n            className="font-semibold   text-6xl xl:text-7xl tracking-tight"\n            animation="top"\n            staggerDirection={-1}\n          >\n            Quality Textiles Crafted with Precision\n          </TextStaggerInview>\n          <p className="text-lg">\n            We are a leading textile manufacturer that transforms <br />\n            raw materials into premium fabrics. Our expertise\n            <br /> spans from innovative weaving techniques to\n            <br /> sustainable production methods.\n          </p>\n          <Button className="rounded-none  " size={\'lg\'}>\n            Request a Quote\n          </Button>\n        </div>\n      </ContainerClippedColLg>\n\n      <ContainerClippedColMd>\n        <img\n          src="https://images.unsplash.com/photo-1589793463357-5fb813435467?q=80&w=2456&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n          alt="Textile factory"\n          className="size-full object-cover"\n        />\n      </ContainerClippedColMd>\n    </ContainerClipped>\n  );\n};\n\nexport const ContainerClippedDemo3 = () => {\n  return (\n    <ContainerClipped className="mb-12 min-h-dvh">\n      <ContainerClippedColLg>\n        <ContainerClippedBg className="absolute rounded-br-4xl bg-fd-primary hidden md:block inset-0 size-full" />\n        <div className="p-8 text-secondary md:pl-12 md:pr-0 h-full gap-8 flex flex-col items-start justify-center relative z-50">\n          <TextStaggerInview\n            as="h1"\n            className="font-medium text-5xl xl:text-7xl tracking-tight"\n            // animation="top"\n            // staggerDirection={-1}\n          >\n            Elevate Your Productivity in Our Modern Workspaces\n          </TextStaggerInview>\n          <TextStaggerInview\n            stagger={0.01}\n            as="p"\n            className="text-sm max-w-[45ch]"\n          >\n            At Nexus Hub, we offer flexible, fully furnished workspaces designed\n            to inspire collaboration and fuel creativity. Enjoy high-speed\n            internet, ergonomic seating, and vibrant communal areas—all backed\n            by 24/7 access and premium amenities. Whether you’re a solo\n            freelancer or a growing team, our tailored plans ensure you have\n            everything you need to work smarter and connect with professionals.\n          </TextStaggerInview>\n          <Button size={\'lg\'}>Book a Free Tour</Button>\n        </div>\n      </ContainerClippedColLg>\n\n      <ContainerClippedColMd className="flex justify-center items-end">\n        <div className=" size-3/4 aspect-square overflow-hidden rounded-xl">\n          <img\n            src="https://images.unsplash.com/photo-1556761175-b413da4baf72?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n            alt="Textile factory"\n            className="size-full object-cover"\n          />\n        </div>\n      </ContainerClippedColMd>\n    </ContainerClipped>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/containers/container-clipped/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-container-clipped-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-container-clipped-demo',
  },
  'shadcn-new-york-container-clipped-demo': {
    name: 'shadcn-new-york-container-clipped-demo',
    description:
      'Demo showing container Clipped Component with shadcn-new-york style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/container-clipped'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/containers/container-clipped/shadcn-new-york/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/demo/containers/container-clipped.tsx',
        content:
          'import { Button } from \'@/components/ui/button\';\nimport {\n  clipPathVariants,\n  ContainerClipped,\n  ContainerClippedBg,\n  ContainerClippedColLg,\n  ContainerClippedColMd,\n} from \'@/components/systaliko-ui/containers/container-clipped\';\nimport { TextStaggerInview } from \'@/components/systaliko-ui/text/text-stagger-inview\';\n\nexport const ContainerClippedDemo = () => {\n  return (\n    <ContainerClipped className="min-h-dvh">\n      <ContainerClippedColLg>\n        <ContainerClippedBg className="absolute bg-slate-200 hidden md:block inset-0 size-full" />\n        <div className="p-8 md:pl-12 md:pr-0 h-full gap-8 flex flex-col items-start justify-center relative z-50">\n          <TextStaggerInview\n            as="h1"\n            className="font-serif text-6xl xl:text-7xl tracking-tight"\n            animation="top"\n            staggerDirection={-1}\n          >\n            Crafting Timeless Architectural Spaces\n          </TextStaggerInview>\n          <p className="opacity-80">\n            We are a visionary design collective that transforms spaces <br />\n            into living art. Our expertise spans from architectural <br />\n            innovation to bespoke interior solutions, creating <br />\n            environments that inspire and endure.\n          </p>\n          <Button\n            className="rounded-none bg-slate-400 text-slate-200"\n            size={\'lg\'}\n            variant={\'secondary\'}\n          >\n            Discover more\n          </Button>\n        </div>\n      </ContainerClippedColLg>\n\n      <ContainerClippedColMd style={{ clipPath: clipPathVariants[\'reversed\'] }}>\n        <img\n          src="https://images.unsplash.com/photo-1487958449943-2429e8be8625?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n          alt="modern architecture"\n          className="size-full object-cover"\n        />\n      </ContainerClippedColMd>\n    </ContainerClipped>\n  );\n};\n\nexport const ContainerClippedDemo2 = () => {\n  return (\n    <ContainerClipped className="mb-12 min-h-dvh">\n      <ContainerClippedColLg>\n        <ContainerClippedBg className="absolute  bg-blue-900 hidden md:block inset-0 size-full" />\n        <div className="p-8 text-secondary md:pl-12 md:pr-0 h-full gap-8 flex flex-col items-start justify-center relative z-50">\n          <TextStaggerInview\n            as="h1"\n            className="font-semibold   text-6xl xl:text-7xl tracking-tight"\n            animation="top"\n            staggerDirection={-1}\n          >\n            Quality Textiles Crafted with Precision\n          </TextStaggerInview>\n          <p className="text-lg">\n            We are a leading textile manufacturer that transforms <br />\n            raw materials into premium fabrics. Our expertise\n            <br /> spans from innovative weaving techniques to\n            <br /> sustainable production methods.\n          </p>\n          <Button className="rounded-none  " size={\'lg\'}>\n            Request a Quote\n          </Button>\n        </div>\n      </ContainerClippedColLg>\n\n      <ContainerClippedColMd>\n        <img\n          src="https://images.unsplash.com/photo-1589793463357-5fb813435467?q=80&w=2456&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n          alt="Textile factory"\n          className="size-full object-cover"\n        />\n      </ContainerClippedColMd>\n    </ContainerClipped>\n  );\n};\n\nexport const ContainerClippedDemo3 = () => {\n  return (\n    <ContainerClipped className="mb-12 min-h-dvh">\n      <ContainerClippedColLg>\n        <ContainerClippedBg className="absolute rounded-br-4xl bg-fd-primary hidden md:block inset-0 size-full" />\n        <div className="p-8 text-secondary md:pl-12 md:pr-0 h-full gap-8 flex flex-col items-start justify-center relative z-50">\n          <TextStaggerInview\n            as="h1"\n            className="font-medium text-5xl xl:text-7xl tracking-tight"\n            // animation="top"\n            // staggerDirection={-1}\n          >\n            Elevate Your Productivity in Our Modern Workspaces\n          </TextStaggerInview>\n          <TextStaggerInview\n            stagger={0.01}\n            as="p"\n            className="text-sm max-w-[45ch]"\n          >\n            At Nexus Hub, we offer flexible, fully furnished workspaces designed\n            to inspire collaboration and fuel creativity. Enjoy high-speed\n            internet, ergonomic seating, and vibrant communal areas—all backed\n            by 24/7 access and premium amenities. Whether you’re a solo\n            freelancer or a growing team, our tailored plans ensure you have\n            everything you need to work smarter and connect with professionals.\n          </TextStaggerInview>\n          <Button size={\'lg\'}>Book a Free Tour</Button>\n        </div>\n      </ContainerClippedColLg>\n\n      <ContainerClippedColMd className="flex justify-center items-end">\n        <div className=" size-3/4 aspect-square overflow-hidden rounded-xl">\n          <img\n            src="https://images.unsplash.com/photo-1556761175-b413da4baf72?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n            alt="Textile factory"\n            className="size-full object-cover"\n          />\n        </div>\n      </ContainerClippedColMd>\n    </ContainerClipped>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/containers/container-clipped/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-container-clipped-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-container-clipped-demo',
  },
  'default-container-infinite-scroll-demo': {
    name: 'default-container-infinite-scroll-demo',
    description: 'Demo showing container infinite scroll with default style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/container-infinite-scroll'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/containers/container-infinite-scroll/default/index.tsx',
        type: 'registry:block',
        target:
          'components/systaliko-ui/demo/containers/container-infinite-scroll.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport {\n  CellInfiniteScroll,\n  ContainerInfiniteScroll,\n} from '@/components/systaliko-ui/containers/container-infinite-scroll';\nimport { ScrollArea } from '@/components/ui/scroll-area';\ninterface Post {\n  id: number;\n  userId: number;\n  title: string;\n  body: string;\n}\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com/posts';\nconst LIMIT = 10;\n\nexport function ContainerInfiniteScrollDemo() {\n  const [posts, setPosts] = React.useState<Post[]>([]);\n  const [page, setPage] = React.useState<number>(0);\n  const [totalCount, setTotalCount] = React.useState<number | null>();\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n\n  async function fetchData() {\n    setIsLoading(true);\n    const start = page * LIMIT;\n    try {\n      const response = await fetch(\n        `${BASE_URL}?_start=${start}&_limit=${LIMIT}`,\n      );\n      const totalItems = response.headers.get('x-total-count');\n      const data = await response.json();\n\n      setTotalCount(Number(totalItems));\n      setPosts((prevPosts) => [...prevPosts, ...data]);\n      setPage((prevPage) => prevPage + 1);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <ScrollArea className=\"w-full h-80 p-6\">\n      <ContainerInfiniteScroll\n        items={posts}\n        isPending={isLoading}\n        itemsCount={totalCount}\n        loadMore={fetchData}\n        className=\"grid gap-4 grid-cols-[repeat(auto-fill,minmax(200px,1fr))]\"\n      >\n        {posts.map((post, index) => (\n          <CellInfiniteScroll isPending={isLoading} key={`${post.id}-${index}`}>\n            <Card className=\" bg-fd-card\">\n              <CardHeader>\n                <CardTitle className=\"text-primary\">#{post.id}</CardTitle>\n                <CardDescription className=\"text-xs\">\n                  {post.title}\n                </CardDescription>\n              </CardHeader>\n\n              <CardContent className=\"text-sm text-foreground\">\n                <p>{post.body}</p>\n              </CardContent>\n            </Card>\n          </CellInfiniteScroll>\n        ))}\n      </ContainerInfiniteScroll>\n    </ScrollArea>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/containers/container-infinite-scroll/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-container-infinite-scroll-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-container-infinite-scroll-demo',
  },
  'shadcn-default-container-infinite-scroll-demo': {
    name: 'shadcn-default-container-infinite-scroll-demo',
    description:
      'Demo showing container infinite scroll with shadcn-default style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/container-infinite-scroll'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/containers/container-infinite-scroll/shadcn-default/index.tsx',
        type: 'registry:block',
        target:
          'components/systaliko-ui/demo/containers/container-infinite-scroll.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport {\n  CellInfiniteScroll,\n  ContainerInfiniteScroll,\n} from '@/components/systaliko-ui/containers/container-infinite-scroll';\nimport { ScrollArea } from '@/components/ui/scroll-area';\ninterface Post {\n  id: number;\n  userId: number;\n  title: string;\n  body: string;\n}\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com/posts';\nconst LIMIT = 10;\n\nexport function ContainerInfiniteScrollDemo() {\n  const [posts, setPosts] = React.useState<Post[]>([]);\n  const [page, setPage] = React.useState<number>(0);\n  const [totalCount, setTotalCount] = React.useState<number | null>();\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n\n  async function fetchData() {\n    setIsLoading(true);\n    const start = page * LIMIT;\n    try {\n      const response = await fetch(\n        `${BASE_URL}?_start=${start}&_limit=${LIMIT}`,\n      );\n      const totalItems = response.headers.get('x-total-count');\n      const data = await response.json();\n\n      setTotalCount(Number(totalItems));\n      setPosts((prevPosts) => [...prevPosts, ...data]);\n      setPage((prevPage) => prevPage + 1);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <ScrollArea className=\"w-full h-80 p-6\">\n      <ContainerInfiniteScroll\n        items={posts}\n        isPending={isLoading}\n        itemsCount={totalCount}\n        loadMore={fetchData}\n        className=\"grid gap-4 grid-cols-[repeat(auto-fill,minmax(200px,1fr))]\"\n      >\n        {posts.map((post, index) => (\n          <CellInfiniteScroll isPending={isLoading} key={`${post.id}-${index}`}>\n            <Card className=\" bg-fd-card\">\n              <CardHeader>\n                <CardTitle className=\"text-primary\">#{post.id}</CardTitle>\n                <CardDescription className=\"text-xs\">\n                  {post.title}\n                </CardDescription>\n              </CardHeader>\n\n              <CardContent className=\"text-sm text-foreground\">\n                <p>{post.body}</p>\n              </CardContent>\n            </Card>\n          </CellInfiniteScroll>\n        ))}\n      </ContainerInfiniteScroll>\n    </ScrollArea>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/containers/container-infinite-scroll/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-container-infinite-scroll-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/shadcn-default-container-infinite-scroll-demo',
  },
  'shadcn-new-york-container-infinite-scroll-demo': {
    name: 'shadcn-new-york-container-infinite-scroll-demo',
    description:
      'Demo showing container infinite scroll with shadcn-new-york style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/container-infinite-scroll'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/containers/container-infinite-scroll/shadcn-new-york/index.tsx',
        type: 'registry:block',
        target:
          'components/systaliko-ui/demo/containers/container-infinite-scroll.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport {\n  CellInfiniteScroll,\n  ContainerInfiniteScroll,\n} from '@/components/systaliko-ui/containers/container-infinite-scroll';\nimport { ScrollArea } from '@/components/ui/scroll-area';\ninterface Post {\n  id: number;\n  userId: number;\n  title: string;\n  body: string;\n}\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com/posts';\nconst LIMIT = 10;\n\nexport function ContainerInfiniteScrollDemo() {\n  const [posts, setPosts] = React.useState<Post[]>([]);\n  const [page, setPage] = React.useState<number>(0);\n  const [totalCount, setTotalCount] = React.useState<number | null>();\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n\n  async function fetchData() {\n    setIsLoading(true);\n    const start = page * LIMIT;\n    try {\n      const response = await fetch(\n        `${BASE_URL}?_start=${start}&_limit=${LIMIT}`,\n      );\n      const totalItems = response.headers.get('x-total-count');\n      const data = await response.json();\n\n      setTotalCount(Number(totalItems));\n      setPosts((prevPosts) => [...prevPosts, ...data]);\n      setPage((prevPage) => prevPage + 1);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <ScrollArea className=\"w-full h-80 p-6\">\n      <ContainerInfiniteScroll\n        items={posts}\n        isPending={isLoading}\n        itemsCount={totalCount}\n        loadMore={fetchData}\n        className=\"grid gap-4 grid-cols-[repeat(auto-fill,minmax(200px,1fr))]\"\n      >\n        {posts.map((post, index) => (\n          <CellInfiniteScroll isPending={isLoading} key={`${post.id}-${index}`}>\n            <Card className=\" bg-fd-card\">\n              <CardHeader>\n                <CardTitle className=\"text-primary\">#{post.id}</CardTitle>\n                <CardDescription className=\"text-xs\">\n                  {post.title}\n                </CardDescription>\n              </CardHeader>\n\n              <CardContent className=\"text-sm text-foreground\">\n                <p>{post.body}</p>\n              </CardContent>\n            </Card>\n          </CellInfiniteScroll>\n        ))}\n      </ContainerInfiniteScroll>\n    </ScrollArea>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/containers/container-infinite-scroll/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-container-infinite-scroll-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/shadcn-new-york-container-infinite-scroll-demo',
  },
  'default-grid-bento-demo': {
    name: 'default-grid-bento-demo',
    description: 'Grid Bento Demo with multiple variants with default style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/grid-bento'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/containers/grid-bento/default/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/demo/containers/grid-bento.tsx',
        content:
          "import { GridBento } from '@/components/systaliko-ui/containers/grid-bento';\n\nconst IMAGES = [\n  'https://images.unsplash.com/photo-1540959733332-eab4deabeeaf?q=80&w=2388&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n  'https://images.unsplash.com/photo-1498036882173-b41c28a8ba34?q=80&w=2264&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n  'https://images.unsplash.com/photo-1551641506-ee5bf4cb45f1?q=80&w=2368&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n  'https://images.unsplash.com/photo-1503899036084-c55cdd92da26?w=700&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8dG9reW98ZW58MHx8MHx8fDA%3D',\n  'https://images.unsplash.com/photo-1536098561742-ca998e48cbcc?w=700&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTV8fHRva3lvfGVufDB8fDB8fHww',\n];\n\nexport function GridBentoDemo() {\n  return (\n    <GridBento className=\"h-screen py-12 px-6 w-full place-content-center place-items-center\">\n      {IMAGES.map((imageUrl, index) => (\n        <div\n          key={index}\n          className=\"overflow-hidden size-full rounded-xl shadow-xl\"\n        >\n          <img className=\"size-full object-cover\" src={imageUrl} alt=\"tokyo\" />\n        </div>\n      ))}\n    </GridBento>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/containers/grid-bento/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-grid-bento-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-grid-bento-demo',
  },
  'shadcn-default-grid-bento-demo': {
    name: 'shadcn-default-grid-bento-demo',
    description:
      'Grid Bento Demo with multiple variants with shadcn-default style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/grid-bento'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/containers/grid-bento/shadcn-default/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/demo/containers/grid-bento.tsx',
        content:
          "import { GridBento } from '@/components/systaliko-ui/containers/grid-bento';\n\nconst IMAGES = [\n  'https://images.unsplash.com/photo-1540959733332-eab4deabeeaf?q=80&w=2388&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n  'https://images.unsplash.com/photo-1498036882173-b41c28a8ba34?q=80&w=2264&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n  'https://images.unsplash.com/photo-1551641506-ee5bf4cb45f1?q=80&w=2368&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n  'https://images.unsplash.com/photo-1503899036084-c55cdd92da26?w=700&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8dG9reW98ZW58MHx8MHx8fDA%3D',\n  'https://images.unsplash.com/photo-1536098561742-ca998e48cbcc?w=700&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTV8fHRva3lvfGVufDB8fDB8fHww',\n];\n\nexport function GridBentoDemo() {\n  return (\n    <GridBento className=\"h-screen py-12 px-6 w-full place-content-center place-items-center\">\n      {IMAGES.map((imageUrl, index) => (\n        <div\n          key={index}\n          className=\"overflow-hidden size-full rounded-xl shadow-xl\"\n        >\n          <img className=\"size-full object-cover\" src={imageUrl} alt=\"tokyo\" />\n        </div>\n      ))}\n    </GridBento>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/containers/grid-bento/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-grid-bento-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-grid-bento-demo',
  },
  'shadcn-new-york-grid-bento-demo': {
    name: 'shadcn-new-york-grid-bento-demo',
    description:
      'Grid Bento Demo with multiple variants with shadcn-new-york style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/grid-bento'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/containers/grid-bento/shadcn-new-york/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/demo/containers/grid-bento.tsx',
        content:
          "import { GridBento } from '@/components/systaliko-ui/containers/grid-bento';\n\nconst IMAGES = [\n  'https://images.unsplash.com/photo-1540959733332-eab4deabeeaf?q=80&w=2388&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n  'https://images.unsplash.com/photo-1498036882173-b41c28a8ba34?q=80&w=2264&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n  'https://images.unsplash.com/photo-1551641506-ee5bf4cb45f1?q=80&w=2368&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n  'https://images.unsplash.com/photo-1503899036084-c55cdd92da26?w=700&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8dG9reW98ZW58MHx8MHx8fDA%3D',\n  'https://images.unsplash.com/photo-1536098561742-ca998e48cbcc?w=700&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTV8fHRva3lvfGVufDB8fDB8fHww',\n];\n\nexport function GridBentoDemo() {\n  return (\n    <GridBento className=\"h-screen py-12 px-6 w-full place-content-center place-items-center\">\n      {IMAGES.map((imageUrl, index) => (\n        <div\n          key={index}\n          className=\"overflow-hidden size-full rounded-xl shadow-xl\"\n        >\n          <img className=\"size-full object-cover\" src={imageUrl} alt=\"tokyo\" />\n        </div>\n      ))}\n    </GridBento>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/containers/grid-bento/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-grid-bento-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-grid-bento-demo',
  },
  'default-grid-staggered-demo': {
    name: 'default-grid-staggered-demo',
    description:
      'Grid Staggered Demo with multiple variants with default style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/grid-staggered'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/containers/grid-staggered/default/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/demo/containers/grid-staggered.tsx',
        content:
          'import { GridStaggered } from \'@/components/systaliko-ui/containers/grid-staggered\';\n\nconst IMAGES = [\n  \'https://images.unsplash.com/photo-1540959733332-eab4deabeeaf?q=80&w=2388&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\',\n  \'https://images.unsplash.com/photo-1498036882173-b41c28a8ba34?q=80&w=2264&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\',\n  \'https://images.unsplash.com/photo-1551641506-ee5bf4cb45f1?q=80&w=2368&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\',\n  \'https://images.unsplash.com/photo-1503899036084-c55cdd92da26?w=700&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8dG9reW98ZW58MHx8MHx8fDA%3D\',\n];\n\nexport function GridStaggeredDemo() {\n  return (\n    <GridStaggered className="h-dvh p-8 ">\n      {IMAGES.map((image, index) => (\n        <div className="overflow-hidden rounded-md shadow" key={index}>\n          <img src={image} alt="image" className="size-full object-cover" />\n          <div className="text-center text-sm font-semibold text-gray-500">\n            {index + 1}\n          </div>\n        </div>\n      ))}\n    </GridStaggered>\n  );\n}',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/containers/grid-staggered/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-grid-staggered-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-grid-staggered-demo',
  },
  'shadcn-default-grid-staggered-demo': {
    name: 'shadcn-default-grid-staggered-demo',
    description:
      'Grid Staggered Demo with multiple variants with shadcn-default style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/grid-staggered'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/containers/grid-staggered/shadcn-default/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/demo/containers/grid-staggered.tsx',
        content:
          'import { GridStaggered } from \'@/components/systaliko-ui/containers/grid-staggered\';\n\nconst IMAGES = [\n  \'https://images.unsplash.com/photo-1540959733332-eab4deabeeaf?q=80&w=2388&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\',\n  \'https://images.unsplash.com/photo-1498036882173-b41c28a8ba34?q=80&w=2264&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\',\n  \'https://images.unsplash.com/photo-1551641506-ee5bf4cb45f1?q=80&w=2368&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\',\n  \'https://images.unsplash.com/photo-1503899036084-c55cdd92da26?w=700&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8dG9reW98ZW58MHx8MHx8fDA%3D\',\n];\n\nexport function GridStaggeredDemo() {\n  return (\n    <GridStaggered className="h-dvh p-8 ">\n      {IMAGES.map((image, index) => (\n        <div className="overflow-hidden rounded-md shadow" key={index}>\n          <img src={image} alt="image" className="size-full object-cover" />\n          <div className="text-center text-sm font-semibold text-gray-500">\n            {index + 1}\n          </div>\n        </div>\n      ))}\n    </GridStaggered>\n  );\n}',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/containers/grid-staggered/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-grid-staggered-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-grid-staggered-demo',
  },
  'shadcn-new-york-grid-staggered-demo': {
    name: 'shadcn-new-york-grid-staggered-demo',
    description:
      'Grid Staggered Demo with multiple variants with shadcn-new-york style.',
    type: 'registry:block',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/grid-staggered'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/containers/grid-staggered/shadcn-new-york/index.tsx',
        type: 'registry:block',
        target: 'components/systaliko-ui/demo/containers/grid-staggered.tsx',
        content:
          'import { GridStaggered } from \'@/components/systaliko-ui/containers/grid-staggered\';\n\nconst IMAGES = [\n  \'https://images.unsplash.com/photo-1540959733332-eab4deabeeaf?q=80&w=2388&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\',\n  \'https://images.unsplash.com/photo-1498036882173-b41c28a8ba34?q=80&w=2264&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\',\n  \'https://images.unsplash.com/photo-1551641506-ee5bf4cb45f1?q=80&w=2368&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\',\n  \'https://images.unsplash.com/photo-1503899036084-c55cdd92da26?w=700&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8dG9reW98ZW58MHx8MHx8fDA%3D\',\n];\n\nexport function GridStaggeredDemo() {\n  return (\n    <GridStaggered className="h-dvh p-8 ">\n      {IMAGES.map((image, index) => (\n        <div className="overflow-hidden rounded-md shadow" key={index}>\n          <img src={image} alt="image" className="size-full object-cover" />\n          <div className="text-center text-sm font-semibold text-gray-500">\n            {index + 1}\n          </div>\n        </div>\n      ))}\n    </GridStaggered>\n  );\n}',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/containers/grid-staggered/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-grid-staggered-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-grid-staggered-demo',
  },
  'default-custom-cursor-demo': {
    name: 'default-custom-cursor-demo',
    description:
      'Demo showing How to use custom cursor component with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/custom-cursor'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/custom-cursor/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/custom-cursor.tsx',
        content:
          'import { Button } from \'@/components/ui/button\';\nimport { CustomCursor, useSetCursorVariant } from \'@/components/systaliko-ui/custom-cursor\';\nimport { MapPinIcon } from \'lucide-react\';\n\nexport function CustomCursorDemo() {\n  const {\n    handleCustomStyle,\n    setCursorVariant,\n    cursorChildren,\n    cursorVariant,\n    setCursorChildren,\n    resetCursorChildren,\n    resetStyle,\n  } = useSetCursorVariant();\n\n  return (\n    <div className="container flex justify-between gap-12 flex-wrap items-center py-12 px-6 min-h-svh">\n      <CustomCursor variant={cursorVariant} cursorChildren={cursorChildren} />\n      <div className="flex flex-1 flex-col gap-4 items-start">\n        <h1\n          className="text-5xl tracking-tight font-semibold"\n          onMouseEnter={() => {\n            setCursorChildren(null);\n            setCursorVariant({\n              mixBlendMode: \'difference\',\n              backgroundColor: \'red\',\n              scale: 5,\n              borderRadius: \'50%\',\n            });\n          }}\n          onMouseLeave={() => {\n            resetCursorChildren();\n            resetStyle();\n          }}\n        >\n          Custom Cursor with multiple{\' \'}\n          <span className="text-indigo-500">animation variants</span>.\n        </h1>\n        <p className="text-sm max-w-prose">\n          Lorem ipsum dolor sit amet consectetur, adipisicing elit. Mollitia\n          doloremque, ipsam excepturi ratione aliquid assumenda, esse, in\n          inventore quos nihil possimus reprehenderit. Facere nihil, qui illo\n          corrupti corporis commodi animi excepturi? Neque amet a ipsam?\n        </p>\n\n        <div className="flex gap-4">\n          <Button\n            onMouseEnter={() => handleCustomStyle({ scale: 0.4 })}\n            onMouseLeave={resetStyle}\n            className="bg-indigo-500 text-white"\n            size="lg"\n          >\n            Hover Me\n          </Button>\n          <Button\n            variant={\'link\'}\n            onMouseEnter={() => {\n              setCursorVariant(\'reset\');\n              setCursorChildren(\n                <div className="w-40 h-60 relative pointer-events-none">\n                  <img\n                    src="https://images.unsplash.com/photo-1503899036084-c55cdd92da26?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n                    alt="tokyo"\n                    className="rounded-md object-cover"\n                  />\n                </div>,\n              );\n            }}\n            onMouseLeave={() => {\n              setCursorVariant({});\n              resetCursorChildren();\n            }}\n            className="text-indigo-500"\n            size="lg"\n          >\n            Visit Tokyo\n          </Button>\n        </div>\n      </div>\n\n      <div\n        className="relative w-2/3 md:w-1/3"\n        onMouseLeave={() => {\n          setCursorChildren(<div className="rounded-full bg-black size-5" />);\n          setCursorVariant({});\n        }}\n        onMouseEnter={() => {\n          setCursorVariant({});\n          setCursorChildren(\n            <Button className="text-white" variant={\'link\'} size="lg">\n              <MapPinIcon />\n              Visit Tokyo\n            </Button>,\n          );\n        }}\n      >\n        <img\n          src="https://images.unsplash.com/photo-1503899036084-c55cdd92da26?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n          alt="tokyo"\n          className="rounded-md size-full object-cover"\n        />\n      </div>\n    </div>\n  );\n}',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/custom-cursor/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-custom-cursor-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-custom-cursor-demo',
  },
  'shadcn-default-custom-cursor-demo': {
    name: 'shadcn-default-custom-cursor-demo',
    description:
      'Demo showing How to use custom cursor component with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/custom-cursor'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/custom-cursor/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/custom-cursor.tsx',
        content:
          'import { Button } from \'@/components/ui/button\';\nimport { CustomCursor, useSetCursorVariant } from \'@/components/systaliko-ui/custom-cursor\';\nimport { MapPinIcon } from \'lucide-react\';\n\nexport function CustomCursorDemo() {\n  const {\n    handleCustomStyle,\n    setCursorVariant,\n    cursorChildren,\n    cursorVariant,\n    setCursorChildren,\n    resetCursorChildren,\n    resetStyle,\n  } = useSetCursorVariant();\n\n  return (\n    <div className="container flex justify-between gap-12 flex-wrap items-center py-12 px-6 min-h-svh">\n      <CustomCursor variant={cursorVariant} cursorChildren={cursorChildren} />\n      <div className="flex flex-1 flex-col gap-4 items-start">\n        <h1\n          className="text-5xl tracking-tight font-semibold"\n          onMouseEnter={() => {\n            setCursorChildren(null);\n            setCursorVariant({\n              mixBlendMode: \'difference\',\n              backgroundColor: \'red\',\n              scale: 5,\n              borderRadius: \'50%\',\n            });\n          }}\n          onMouseLeave={() => {\n            resetCursorChildren();\n            resetStyle();\n          }}\n        >\n          Custom Cursor with multiple{\' \'}\n          <span className="text-indigo-500">animation variants</span>.\n        </h1>\n        <p className="text-sm max-w-prose">\n          Lorem ipsum dolor sit amet consectetur, adipisicing elit. Mollitia\n          doloremque, ipsam excepturi ratione aliquid assumenda, esse, in\n          inventore quos nihil possimus reprehenderit. Facere nihil, qui illo\n          corrupti corporis commodi animi excepturi? Neque amet a ipsam?\n        </p>\n\n        <div className="flex gap-4">\n          <Button\n            onMouseEnter={() => handleCustomStyle({ scale: 0.4 })}\n            onMouseLeave={resetStyle}\n            className="bg-indigo-500 text-white"\n            size="lg"\n          >\n            Hover Me\n          </Button>\n          <Button\n            variant={\'link\'}\n            onMouseEnter={() => {\n              setCursorVariant(\'reset\');\n              setCursorChildren(\n                <div className="w-40 h-60 relative pointer-events-none">\n                  <img\n                    src="https://images.unsplash.com/photo-1503899036084-c55cdd92da26?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n                    alt="tokyo"\n                    className="rounded-md object-cover"\n                  />\n                </div>,\n              );\n            }}\n            onMouseLeave={() => {\n              setCursorVariant({});\n              resetCursorChildren();\n            }}\n            className="text-indigo-500"\n            size="lg"\n          >\n            Visit Tokyo\n          </Button>\n        </div>\n      </div>\n\n      <div\n        className="relative w-2/3 md:w-1/3"\n        onMouseLeave={() => {\n          setCursorChildren(<div className="rounded-full bg-black size-5" />);\n          setCursorVariant({});\n        }}\n        onMouseEnter={() => {\n          setCursorVariant({});\n          setCursorChildren(\n            <Button className="text-white" variant={\'link\'} size="lg">\n              <MapPinIcon />\n              Visit Tokyo\n            </Button>,\n          );\n        }}\n      >\n        <img\n          src="https://images.unsplash.com/photo-1503899036084-c55cdd92da26?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n          alt="tokyo"\n          className="rounded-md size-full object-cover"\n        />\n      </div>\n    </div>\n  );\n}',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/custom-cursor/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-custom-cursor-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-custom-cursor-demo',
  },
  'shadcn-new-york-custom-cursor-demo': {
    name: 'shadcn-new-york-custom-cursor-demo',
    description:
      'Demo showing How to use custom cursor component with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/custom-cursor'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/custom-cursor/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/custom-cursor.tsx',
        content:
          'import { Button } from \'@/components/ui/button\';\nimport { CustomCursor, useSetCursorVariant } from \'@/components/systaliko-ui/custom-cursor\';\nimport { MapPinIcon } from \'lucide-react\';\n\nexport function CustomCursorDemo() {\n  const {\n    handleCustomStyle,\n    setCursorVariant,\n    cursorChildren,\n    cursorVariant,\n    setCursorChildren,\n    resetCursorChildren,\n    resetStyle,\n  } = useSetCursorVariant();\n\n  return (\n    <div className="container flex justify-between gap-12 flex-wrap items-center py-12 px-6 min-h-svh">\n      <CustomCursor variant={cursorVariant} cursorChildren={cursorChildren} />\n      <div className="flex flex-1 flex-col gap-4 items-start">\n        <h1\n          className="text-5xl tracking-tight font-semibold"\n          onMouseEnter={() => {\n            setCursorChildren(null);\n            setCursorVariant({\n              mixBlendMode: \'difference\',\n              backgroundColor: \'red\',\n              scale: 5,\n              borderRadius: \'50%\',\n            });\n          }}\n          onMouseLeave={() => {\n            resetCursorChildren();\n            resetStyle();\n          }}\n        >\n          Custom Cursor with multiple{\' \'}\n          <span className="text-indigo-500">animation variants</span>.\n        </h1>\n        <p className="text-sm max-w-prose">\n          Lorem ipsum dolor sit amet consectetur, adipisicing elit. Mollitia\n          doloremque, ipsam excepturi ratione aliquid assumenda, esse, in\n          inventore quos nihil possimus reprehenderit. Facere nihil, qui illo\n          corrupti corporis commodi animi excepturi? Neque amet a ipsam?\n        </p>\n\n        <div className="flex gap-4">\n          <Button\n            onMouseEnter={() => handleCustomStyle({ scale: 0.4 })}\n            onMouseLeave={resetStyle}\n            className="bg-indigo-500 text-white"\n            size="lg"\n          >\n            Hover Me\n          </Button>\n          <Button\n            variant={\'link\'}\n            onMouseEnter={() => {\n              setCursorVariant(\'reset\');\n              setCursorChildren(\n                <div className="w-40 h-60 relative pointer-events-none">\n                  <img\n                    src="https://images.unsplash.com/photo-1503899036084-c55cdd92da26?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n                    alt="tokyo"\n                    className="rounded-md object-cover"\n                  />\n                </div>,\n              );\n            }}\n            onMouseLeave={() => {\n              setCursorVariant({});\n              resetCursorChildren();\n            }}\n            className="text-indigo-500"\n            size="lg"\n          >\n            Visit Tokyo\n          </Button>\n        </div>\n      </div>\n\n      <div\n        className="relative w-2/3 md:w-1/3"\n        onMouseLeave={() => {\n          setCursorChildren(<div className="rounded-full bg-black size-5" />);\n          setCursorVariant({});\n        }}\n        onMouseEnter={() => {\n          setCursorVariant({});\n          setCursorChildren(\n            <Button className="text-white" variant={\'link\'} size="lg">\n              <MapPinIcon />\n              Visit Tokyo\n            </Button>,\n          );\n        }}\n      >\n        <img\n          src="https://images.unsplash.com/photo-1503899036084-c55cdd92da26?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"\n          alt="tokyo"\n          className="rounded-md size-full object-cover"\n        />\n      </div>\n    </div>\n  );\n}',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/custom-cursor/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-custom-cursor-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-custom-cursor-demo',
  },
  'default-rating-stars-demo': {
    name: 'default-rating-stars-demo',
    description: 'Demo showing Rating stars component with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/rating-stars'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/rating-stars/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/rating-stars.tsx',
        content: '',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/rating-stars/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-rating-stars-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-rating-stars-demo',
  },
  'shadcn-default-rating-stars-demo': {
    name: 'shadcn-default-rating-stars-demo',
    description:
      'Demo showing Rating stars component with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/rating-stars'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/rating-stars/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/rating-stars.tsx',
        content: '',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/rating-stars/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-rating-stars-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-rating-stars-demo',
  },
  'shadcn-new-york-rating-stars-demo': {
    name: 'shadcn-new-york-rating-stars-demo',
    description:
      'Demo showing Rating stars component with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/rating-stars'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/rating-stars/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/rating-stars.tsx',
        content: '',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/rating-stars/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-rating-stars-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-rating-stars-demo',
  },
  'default-text-stagger-hover-demo': {
    name: 'default-text-stagger-hover-demo',
    description:
      'Demo showing a split text with stagger animation on hover with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-stagger-hover'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-stagger-hover/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-stagger-hover.tsx',
        content:
          "'use client';\nimport {\n  AnimationConfig,\n  AnimationSelector,\n  StaggerSelector,\n  useSetAnimationConfig,\n} from '@/components/systaliko-ui/animation-config';\nimport {\n  TextStaggerHover,\n  TextStaggerHoverActive,\n  TextStaggerHoverHidden,\n} from '@/components/systaliko-ui/text/text-stagger-hover';\nimport * as React from 'react';\n\nconst TextStaggerHoverDemoContent = () => {\n  const { animation, staggerDirection } = useSetAnimationConfig();\n  return (\n    <div className=\"flex h-80 flex-col justify-between gap-8\">\n      <div className=\"flex flex-col gap-4 items-start\">\n        <AnimationSelector />\n        <StaggerSelector />\n      </div>\n\n      <TextStaggerHover\n        as={'h2'}\n        className=\"cursor-pointer text-4xl font-bold uppercase tracking-tighter\"\n      >\n        <TextStaggerHoverActive\n          key={`${animation}-${staggerDirection}`}\n          className=\"opacity-20\"\n          animation={animation}\n          staggerDirection={staggerDirection}\n        >\n          Text Stagger Hover Demo\n        </TextStaggerHoverActive>\n\n        <TextStaggerHoverHidden\n          key={`${animation}-${staggerDirection}-2`}\n          animation={animation}\n          staggerDirection={staggerDirection}\n        >\n          Text Stagger Hover Demo\n        </TextStaggerHoverHidden>\n      </TextStaggerHover>\n    </div>\n  );\n};\n\nexport const TextStaggerHoverDemo = () => {\n  return (\n    <AnimationConfig>\n      <TextStaggerHoverDemoContent />\n    </AnimationConfig>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-stagger-hover/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-text-stagger-hover-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-text-stagger-hover-demo',
  },
  'shadcn-default-text-stagger-hover-demo': {
    name: 'shadcn-default-text-stagger-hover-demo',
    description:
      'Demo showing a split text with stagger animation on hover with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-stagger-hover'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-stagger-hover/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-stagger-hover.tsx',
        content:
          "'use client';\nimport {\n  AnimationConfig,\n  AnimationSelector,\n  StaggerSelector,\n  useSetAnimationConfig,\n} from '@/components/systaliko-ui/animation-config';\nimport {\n  TextStaggerHover,\n  TextStaggerHoverActive,\n  TextStaggerHoverHidden,\n} from '@/components/systaliko-ui/text/text-stagger-hover';\nimport * as React from 'react';\n\nconst TextStaggerHoverDemoContent = () => {\n  const { animation, staggerDirection } = useSetAnimationConfig();\n  return (\n    <div className=\"flex h-80 flex-col justify-between gap-8\">\n      <div className=\"flex flex-col gap-4 items-start\">\n        <AnimationSelector />\n        <StaggerSelector />\n      </div>\n\n      <TextStaggerHover\n        as={'h2'}\n        className=\"cursor-pointer text-4xl font-bold uppercase tracking-tighter\"\n      >\n        <TextStaggerHoverActive\n          key={`${animation}-${staggerDirection}`}\n          className=\"opacity-20\"\n          animation={animation}\n          staggerDirection={staggerDirection}\n        >\n          Text Stagger Hover Demo\n        </TextStaggerHoverActive>\n\n        <TextStaggerHoverHidden\n          key={`${animation}-${staggerDirection}-2`}\n          animation={animation}\n          staggerDirection={staggerDirection}\n        >\n          Text Stagger Hover Demo\n        </TextStaggerHoverHidden>\n      </TextStaggerHover>\n    </div>\n  );\n};\n\nexport const TextStaggerHoverDemo = () => {\n  return (\n    <AnimationConfig>\n      <TextStaggerHoverDemoContent />\n    </AnimationConfig>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-stagger-hover/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-text-stagger-hover-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-text-stagger-hover-demo',
  },
  'shadcn-new-york-text-stagger-hover-demo': {
    name: 'shadcn-new-york-text-stagger-hover-demo',
    description:
      'Demo showing a split text with stagger animation on hover with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-stagger-hover'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-stagger-hover/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-stagger-hover.tsx',
        content:
          "'use client';\nimport {\n  AnimationConfig,\n  AnimationSelector,\n  StaggerSelector,\n  useSetAnimationConfig,\n} from '@/components/systaliko-ui/animation-config';\nimport {\n  TextStaggerHover,\n  TextStaggerHoverActive,\n  TextStaggerHoverHidden,\n} from '@/components/systaliko-ui/text/text-stagger-hover';\nimport * as React from 'react';\n\nconst TextStaggerHoverDemoContent = () => {\n  const { animation, staggerDirection } = useSetAnimationConfig();\n  return (\n    <div className=\"flex h-80 flex-col justify-between gap-8\">\n      <div className=\"flex flex-col gap-4 items-start\">\n        <AnimationSelector />\n        <StaggerSelector />\n      </div>\n\n      <TextStaggerHover\n        as={'h2'}\n        className=\"cursor-pointer text-4xl font-bold uppercase tracking-tighter\"\n      >\n        <TextStaggerHoverActive\n          key={`${animation}-${staggerDirection}`}\n          className=\"opacity-20\"\n          animation={animation}\n          staggerDirection={staggerDirection}\n        >\n          Text Stagger Hover Demo\n        </TextStaggerHoverActive>\n\n        <TextStaggerHoverHidden\n          key={`${animation}-${staggerDirection}-2`}\n          animation={animation}\n          staggerDirection={staggerDirection}\n        >\n          Text Stagger Hover Demo\n        </TextStaggerHoverHidden>\n      </TextStaggerHover>\n    </div>\n  );\n};\n\nexport const TextStaggerHoverDemo = () => {\n  return (\n    <AnimationConfig>\n      <TextStaggerHoverDemoContent />\n    </AnimationConfig>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-stagger-hover/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-text-stagger-hover-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-text-stagger-hover-demo',
  },
  'default-text-stagger-inview-demo': {
    name: 'default-text-stagger-inview-demo',
    description:
      'Demo showing a split text with stagger animation with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-stagger-inview'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-stagger-inview/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-stagger-inview.tsx',
        content:
          '\'use client\';\n\nimport {\n  AnimationConfig,\n  AnimationSelector,\n  StaggerInput,\n  useSetAnimationConfig,\n} from \'@/components/systaliko-ui/animation-config\';\nimport { TextStaggerInview } from \'@/components/systaliko-ui/text/text-stagger-inview\';\n\nexport const TextStaggerInviewDemo = () => {\n  return (\n    <AnimationConfig>\n      <TextStaggerInviewDemoContent />\n    </AnimationConfig>\n  );\n};\n\nconst TextStaggerInviewDemoContent = () => {\n  const { animation, staggerValue } = useSetAnimationConfig();\n  return (\n    <div className="flex h-80 flex-col justify-between gap-8">\n      <div className="flex flex-col gap-4 items-start">\n        <AnimationSelector />\n        <StaggerInput />\n      </div>\n      <TextStaggerInview\n        key={`${animation}-${staggerValue}`}\n        animation={animation}\n        className="overflow-hidden text-4xl tracking-tight font-bold"\n        stagger={staggerValue}\n      >\n        Stagger Text Inview Demo\n      </TextStaggerInview>\n    </div>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-stagger-inview/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-text-stagger-inview-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-text-stagger-inview-demo',
  },
  'shadcn-default-text-stagger-inview-demo': {
    name: 'shadcn-default-text-stagger-inview-demo',
    description:
      'Demo showing a split text with stagger animation with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-stagger-inview'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-stagger-inview/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-stagger-inview.tsx',
        content:
          '\'use client\';\n\nimport {\n  AnimationConfig,\n  AnimationSelector,\n  StaggerInput,\n  useSetAnimationConfig,\n} from \'@/components/systaliko-ui/animation-config\';\nimport { TextStaggerInview } from \'@/components/systaliko-ui/text/text-stagger-inview\';\n\nexport const TextStaggerInviewDemo = () => {\n  return (\n    <AnimationConfig>\n      <TextStaggerInviewDemoContent />\n    </AnimationConfig>\n  );\n};\n\nconst TextStaggerInviewDemoContent = () => {\n  const { animation, staggerValue } = useSetAnimationConfig();\n  return (\n    <div className="flex h-80 flex-col justify-between gap-8">\n      <div className="flex flex-col gap-4 items-start">\n        <AnimationSelector />\n        <StaggerInput />\n      </div>\n      <TextStaggerInview\n        key={`${animation}-${staggerValue}`}\n        animation={animation}\n        className="overflow-hidden text-4xl tracking-tight font-bold"\n        stagger={staggerValue}\n      >\n        Stagger Text Inview Demo\n      </TextStaggerInview>\n    </div>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-stagger-inview/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-text-stagger-inview-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-text-stagger-inview-demo',
  },
  'shadcn-new-york-text-stagger-inview-demo': {
    name: 'shadcn-new-york-text-stagger-inview-demo',
    description:
      'Demo showing a split text with stagger animation with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-stagger-inview'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-stagger-inview/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-stagger-inview.tsx',
        content:
          '\'use client\';\n\nimport {\n  AnimationConfig,\n  AnimationSelector,\n  StaggerInput,\n  useSetAnimationConfig,\n} from \'@/components/systaliko-ui/animation-config\';\nimport { TextStaggerInview } from \'@/components/systaliko-ui/text/text-stagger-inview\';\n\nexport const TextStaggerInviewDemo = () => {\n  return (\n    <AnimationConfig>\n      <TextStaggerInviewDemoContent />\n    </AnimationConfig>\n  );\n};\n\nconst TextStaggerInviewDemoContent = () => {\n  const { animation, staggerValue } = useSetAnimationConfig();\n  return (\n    <div className="flex h-80 flex-col justify-between gap-8">\n      <div className="flex flex-col gap-4 items-start">\n        <AnimationSelector />\n        <StaggerInput />\n      </div>\n      <TextStaggerInview\n        key={`${animation}-${staggerValue}`}\n        animation={animation}\n        className="overflow-hidden text-4xl tracking-tight font-bold"\n        stagger={staggerValue}\n      >\n        Stagger Text Inview Demo\n      </TextStaggerInview>\n    </div>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-stagger-inview/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-text-stagger-inview-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/shadcn-new-york-text-stagger-inview-demo',
  },
  'default-text-vertical-demo': {
    name: 'default-text-vertical-demo',
    description: 'Demo showing a vertical text with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-vertical'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-vertical/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-vertical.tsx',
        content:
          'import { TextVertical } from \'@/components/systaliko-ui/text/text-vertical\';\n\nexport const TextVerticalDemo = () => {\n  return (\n    <TextVertical\n      className="uppercase text-2xl tracking-wider font-bold"\n      as="h4"\n    >\n      our summer collection\n    </TextVertical>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-vertical/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-text-vertical-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-text-vertical-demo',
  },
  'shadcn-default-text-vertical-demo': {
    name: 'shadcn-default-text-vertical-demo',
    description: 'Demo showing a vertical text with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-vertical'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-vertical/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-vertical.tsx',
        content:
          'import { TextVertical } from \'@/components/systaliko-ui/text/text-vertical\';\n\nexport const TextVerticalDemo = () => {\n  return (\n    <TextVertical\n      className="uppercase text-2xl tracking-wider font-bold"\n      as="h4"\n    >\n      our summer collection\n    </TextVertical>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-vertical/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-text-vertical-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-text-vertical-demo',
  },
  'shadcn-new-york-text-vertical-demo': {
    name: 'shadcn-new-york-text-vertical-demo',
    description: 'Demo showing a vertical text with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-vertical'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-vertical/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-vertical.tsx',
        content:
          'import { TextVertical } from \'@/components/systaliko-ui/text/text-vertical\';\n\nexport const TextVerticalDemo = () => {\n  return (\n    <TextVertical\n      className="uppercase text-2xl tracking-wider font-bold"\n      as="h4"\n    >\n      our summer collection\n    </TextVertical>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-vertical/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-text-vertical-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-text-vertical-demo',
  },
  'default-set-stagger-direction-demo': {
    name: 'default-set-stagger-direction-demo',
    description:
      'Demo showing how to use set-stagger-direction utility with default style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'http://localhost:3000/r/set-stagger-direction',
      'motion',
    ],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/utils/set-stagger-direction/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/utils/set-stagger-direction.tsx',
        content:
          "'use client';\n\nimport {\n  AnimationConfig,\n  AnimationSelector,\n  StaggerInput,\n  StaggerSelector,\n  useSetAnimationConfig,\n} from '@/components/systaliko-ui/animation-config';\nimport { setStaggerDirection } from '@/components/systaliko-ui/utils/set-stagger-direction';\nimport { useAnimationVariants } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\n\nconst ITEMS = [\n  {\n    bg: 'bg-green-500',\n  },\n  {\n    bg: 'bg-indigo-500',\n  },\n  {\n    bg: 'bg-rose-500',\n  },\n  {\n    bg: 'bg-yellow-500',\n  },\n];\n\nexport const SetStaggerDirectionDemo = () => {\n  return (\n    <AnimationConfig>\n      <SetStaggerDirectionDemoContent />\n    </AnimationConfig>\n  );\n};\nconst SetStaggerDirectionDemoContent = () => {\n  const { animation, staggerDirection, staggerValue } = useSetAnimationConfig();\n\n  const animationVariants = useAnimationVariants(animation);\n\n  return (\n    <div className=\"flex flex-col justify-between gap-8\">\n      <div className=\"flex flex-wrap  gap-4 items-center justify-center\">\n        <AnimationSelector />\n        <StaggerSelector />\n        <StaggerInput />\n      </div>\n\n      <div className=\"flex gap-4 flex-wrap\">\n        {ITEMS.map(({ bg }, index) => (\n          <motion.div\n            className={`${bg} size-16 rounded-md`}\n            key={`${index}-${animation}-${staggerDirection}-${staggerValue}`}\n            variants={animationVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            transition={{\n              duration: 0.3,\n              ease: 'easeIn',\n              delay: setStaggerDirection({\n                direction: staggerDirection,\n                staggerValue: staggerValue,\n                totalItems: ITEMS.length,\n                index: index,\n              }),\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/utils/set-stagger-direction/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-set-stagger-direction-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-set-stagger-direction-demo',
  },
  'shadcn-default-set-stagger-direction-demo': {
    name: 'shadcn-default-set-stagger-direction-demo',
    description:
      'Demo showing how to use set-stagger-direction utility with shadcn-default style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'http://localhost:3000/r/set-stagger-direction',
      'motion',
    ],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/utils/set-stagger-direction/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/utils/set-stagger-direction.tsx',
        content:
          "'use client';\n\nimport {\n  AnimationConfig,\n  AnimationSelector,\n  StaggerInput,\n  StaggerSelector,\n  useSetAnimationConfig,\n} from '@/components/systaliko-ui/animation-config';\nimport { setStaggerDirection } from '@/components/systaliko-ui/utils/set-stagger-direction';\nimport { useAnimationVariants } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\n\nconst ITEMS = [\n  {\n    bg: 'bg-green-500',\n  },\n  {\n    bg: 'bg-indigo-500',\n  },\n  {\n    bg: 'bg-rose-500',\n  },\n  {\n    bg: 'bg-yellow-500',\n  },\n];\n\nexport const SetStaggerDirectionDemo = () => {\n  return (\n    <AnimationConfig>\n      <SetStaggerDirectionDemoContent />\n    </AnimationConfig>\n  );\n};\nconst SetStaggerDirectionDemoContent = () => {\n  const { animation, staggerDirection, staggerValue } = useSetAnimationConfig();\n\n  const animationVariants = useAnimationVariants(animation);\n\n  return (\n    <div className=\"flex flex-col justify-between gap-8\">\n      <div className=\"flex flex-wrap  gap-4 items-center justify-center\">\n        <AnimationSelector />\n        <StaggerSelector />\n        <StaggerInput />\n      </div>\n\n      <div className=\"flex gap-4 flex-wrap\">\n        {ITEMS.map(({ bg }, index) => (\n          <motion.div\n            className={`${bg} size-16 rounded-md`}\n            key={`${index}-${animation}-${staggerDirection}-${staggerValue}`}\n            variants={animationVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            transition={{\n              duration: 0.3,\n              ease: 'easeIn',\n              delay: setStaggerDirection({\n                direction: staggerDirection,\n                staggerValue: staggerValue,\n                totalItems: ITEMS.length,\n                index: index,\n              }),\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/utils/set-stagger-direction/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-set-stagger-direction-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/shadcn-default-set-stagger-direction-demo',
  },
  'shadcn-new-york-set-stagger-direction-demo': {
    name: 'shadcn-new-york-set-stagger-direction-demo',
    description:
      'Demo showing how to use set-stagger-direction utility with shadcn-new-york style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'http://localhost:3000/r/set-stagger-direction',
      'motion',
    ],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/utils/set-stagger-direction/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/utils/set-stagger-direction.tsx',
        content:
          "'use client';\n\nimport {\n  AnimationConfig,\n  AnimationSelector,\n  StaggerInput,\n  StaggerSelector,\n  useSetAnimationConfig,\n} from '@/components/systaliko-ui/animation-config';\nimport { setStaggerDirection } from '@/components/systaliko-ui/utils/set-stagger-direction';\nimport { useAnimationVariants } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\n\nconst ITEMS = [\n  {\n    bg: 'bg-green-500',\n  },\n  {\n    bg: 'bg-indigo-500',\n  },\n  {\n    bg: 'bg-rose-500',\n  },\n  {\n    bg: 'bg-yellow-500',\n  },\n];\n\nexport const SetStaggerDirectionDemo = () => {\n  return (\n    <AnimationConfig>\n      <SetStaggerDirectionDemoContent />\n    </AnimationConfig>\n  );\n};\nconst SetStaggerDirectionDemoContent = () => {\n  const { animation, staggerDirection, staggerValue } = useSetAnimationConfig();\n\n  const animationVariants = useAnimationVariants(animation);\n\n  return (\n    <div className=\"flex flex-col justify-between gap-8\">\n      <div className=\"flex flex-wrap  gap-4 items-center justify-center\">\n        <AnimationSelector />\n        <StaggerSelector />\n        <StaggerInput />\n      </div>\n\n      <div className=\"flex gap-4 flex-wrap\">\n        {ITEMS.map(({ bg }, index) => (\n          <motion.div\n            className={`${bg} size-16 rounded-md`}\n            key={`${index}-${animation}-${staggerDirection}-${staggerValue}`}\n            variants={animationVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            transition={{\n              duration: 0.3,\n              ease: 'easeIn',\n              delay: setStaggerDirection({\n                direction: staggerDirection,\n                staggerValue: staggerValue,\n                totalItems: ITEMS.length,\n                index: index,\n              }),\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/utils/set-stagger-direction/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-set-stagger-direction-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/shadcn-new-york-set-stagger-direction-demo',
  },
  'default-use-animation-variants-demo': {
    name: 'default-use-animation-variants-demo',
    description:
      'Demo showing how to use use-animation-variants hook with default style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'http://localhost:3000/r/use-animation-variants',
      'motion',
    ],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/utils/use-animation-variants/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/utils/use-animation-variants.tsx',
        content:
          "'use client';\n\nimport {\n  AnimationConfig,\n  AnimationSelector,\n  useSetAnimationConfig,\n} from '@/components/systaliko-ui/animation-config';\nimport { useAnimationVariants } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\n\nexport const AnimationVariantsDemo = () => {\n  return (\n    <AnimationConfig>\n      <AnimationVariantsDemoContent />\n    </AnimationConfig>\n  );\n};\n\nconst AnimationVariantsDemoContent = () => {\n  const { animation } = useSetAnimationConfig();\n  const animationVariants = useAnimationVariants(animation);\n\n  return (\n    <div className=\"flex h-80 flex-col justify-between gap-8\">\n      <AnimationSelector />\n\n      <motion.h2\n        key={animation}\n        variants={animationVariants}\n        transition={{ duration: 0.3, delay: 0.2, ease: 'easeInOut' }}\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: false }}\n        className=\"text-4xl tracking-tight font-bold\"\n      >\n        Animation variants demo\n      </motion.h2>\n    </div>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/utils/use-animation-variants/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-use-animation-variants-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-use-animation-variants-demo',
  },
  'shadcn-default-use-animation-variants-demo': {
    name: 'shadcn-default-use-animation-variants-demo',
    description:
      'Demo showing how to use use-animation-variants hook with shadcn-default style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'http://localhost:3000/r/use-animation-variants',
      'motion',
    ],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/utils/use-animation-variants/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/utils/use-animation-variants.tsx',
        content:
          "'use client';\n\nimport {\n  AnimationConfig,\n  AnimationSelector,\n  useSetAnimationConfig,\n} from '@/components/systaliko-ui/animation-config';\nimport { useAnimationVariants } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\n\nexport const AnimationVariantsDemo = () => {\n  return (\n    <AnimationConfig>\n      <AnimationVariantsDemoContent />\n    </AnimationConfig>\n  );\n};\n\nconst AnimationVariantsDemoContent = () => {\n  const { animation } = useSetAnimationConfig();\n  const animationVariants = useAnimationVariants(animation);\n\n  return (\n    <div className=\"flex h-80 flex-col justify-between gap-8\">\n      <AnimationSelector />\n\n      <motion.h2\n        key={animation}\n        variants={animationVariants}\n        transition={{ duration: 0.3, delay: 0.2, ease: 'easeInOut' }}\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: false }}\n        className=\"text-4xl tracking-tight font-bold\"\n      >\n        Animation variants demo\n      </motion.h2>\n    </div>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/utils/use-animation-variants/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-use-animation-variants-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/shadcn-default-use-animation-variants-demo',
  },
  'shadcn-new-york-use-animation-variants-demo': {
    name: 'shadcn-new-york-use-animation-variants-demo',
    description:
      'Demo showing how to use use-animation-variants hook with shadcn-new-york style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'http://localhost:3000/r/use-animation-variants',
      'motion',
    ],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/utils/use-animation-variants/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/utils/use-animation-variants.tsx',
        content:
          "'use client';\n\nimport {\n  AnimationConfig,\n  AnimationSelector,\n  useSetAnimationConfig,\n} from '@/components/systaliko-ui/animation-config';\nimport { useAnimationVariants } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\n\nexport const AnimationVariantsDemo = () => {\n  return (\n    <AnimationConfig>\n      <AnimationVariantsDemoContent />\n    </AnimationConfig>\n  );\n};\n\nconst AnimationVariantsDemoContent = () => {\n  const { animation } = useSetAnimationConfig();\n  const animationVariants = useAnimationVariants(animation);\n\n  return (\n    <div className=\"flex h-80 flex-col justify-between gap-8\">\n      <AnimationSelector />\n\n      <motion.h2\n        key={animation}\n        variants={animationVariants}\n        transition={{ duration: 0.3, delay: 0.2, ease: 'easeInOut' }}\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: false }}\n        className=\"text-4xl tracking-tight font-bold\"\n      >\n        Animation variants demo\n      </motion.h2>\n    </div>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/utils/use-animation-variants/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-use-animation-variants-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/shadcn-new-york-use-animation-variants-demo',
  },
  'default-rating-stars': {
    name: 'default-rating-stars',
    description:
      'Stars rating component with customizable color, size depending on average rating with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/rating-stars/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/rating-stars.tsx',
        content:
          '\'use client\';\n\nimport * as React from \'react\';\n\nimport { cn } from \'@/lib/utils\';\n\ninterface RatingStarsProps extends React.HTMLAttributes<HTMLDivElement> {\n  rating: number;\n  maxRating?: number;\n}\n\nexport const RatingStars = React.forwardRef<HTMLDivElement, RatingStarsProps>(\n  ({ rating, maxRating = 5, className, ...props }, ref) => {\n    const filledStars = Math.floor(rating);\n    const fractionalPart = rating - filledStars;\n    const emptyStars = maxRating - filledStars - (fractionalPart > 0 ? 1 : 0);\n\n    return (\n      <div\n        className={cn(\'flex items-center gap-2\', className)}\n        ref={ref}\n        {...props}\n      >\n        <div className="flex items-center">\n          {[...Array(filledStars)].map((_, index) => (\n            <svg\n              key={`filled-${index}`}\n              className="size-4 text-inherit"\n              fill="currentColor"\n              viewBox="0 0 20 20"\n            >\n              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.957a1 1 0 00.95.69h4.162c.969 0 1.371 1.24.588 1.81l-3.37 2.448a1 1 0 00-.364 1.118l1.287 3.957c.3.921-.755 1.688-1.54 1.118l-3.37-2.448a1 1 0 00-1.175 0l-3.37 2.448c-.784.57-1.838-.197-1.54-1.118l1.287-3.957a1 1 0 00-.364-1.118L2.05 9.384c-.783-.57-.38-1.81.588-1.81h4.162a1 1 0 00.95-.69l1.286-3.957z" />\n            </svg>\n          ))}\n          {fractionalPart > 0 && (\n            <svg\n              className="size-4 text-inherit"\n              fill="currentColor"\n              viewBox="0 0 20 20"\n            >\n              <defs>\n                <linearGradient id="half">\n                  <stop\n                    offset={`${fractionalPart * 100}%`}\n                    stopColor="currentColor"\n                  />\n                  <stop\n                    offset={`${fractionalPart * 100}%`}\n                    stopColor="rgb(209 213 219)"\n                  />\n                </linearGradient>\n              </defs>\n              <path\n                d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.957a1 1 0 00.95.69h4.162c.969 0 1.371 1.24.588 1.81l-3.37 2.448a1 1 0 00-.364 1.118l1.287 3.957c.3.921-.755 1.688-1.54 1.118l-3.37-2.448a1 1 0 00-1.175 0l-3.37 2.448c-.784.57-1.838-.197-1.54-1.118l1.287-3.957a1 1 0 00-.364-1.118L2.05 9.384c-.783-.57-.38-1.81.588-1.81h4.162a1 1 0 00.95-.69l1.286-3.957z"\n                fill="url(#half)"\n              />\n            </svg>\n          )}\n          {[...Array(emptyStars)].map((_, index) => (\n            <svg\n              key={`empty-${index}`}\n              className="size-4 text-gray-300"\n              fill="currentColor"\n              viewBox="0 0 20 20"\n            >\n              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.957a1 1 0 00.95.69h4.162c.969 0 1.371 1.24.588 1.81l-3.37 2.448a1 1 0 00-.364 1.118l1.287 3.957c.3.921-.755 1.688-1.54 1.118l-3.37-2.448a1 1 0 00-1.175 0l-3.37 2.448c-.784.57-1.838-.197-1.54-1.118l1.287-3.957a1 1 0 00-.364-1.118L2.05 9.384c-.783-.57-.38-1.81.588-1.81h4.162a1 1 0 00.95-.69l1.286-3.957z" />\n            </svg>\n          ))}\n        </div>\n        <p className="sr-only">{rating}</p>\n      </div>\n    );\n  },\n);\nRatingStars.displayName = \'RatingStars\';',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/rating-stars/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-rating-stars';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-rating-stars',
  },
  'shadcn-default-rating-stars': {
    name: 'shadcn-default-rating-stars',
    description:
      'Stars rating component with customizable color, size depending on average rating with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/rating-stars/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/rating-stars.tsx',
        content:
          '\'use client\';\n\nimport * as React from \'react\';\n\nimport { cn } from \'@/lib/utils\';\n\ninterface RatingStarsProps extends React.HTMLAttributes<HTMLDivElement> {\n  rating: number;\n  maxRating?: number;\n}\n\nexport const RatingStars = React.forwardRef<HTMLDivElement, RatingStarsProps>(\n  ({ rating, maxRating = 5, className, ...props }, ref) => {\n    const filledStars = Math.floor(rating);\n    const fractionalPart = rating - filledStars;\n    const emptyStars = maxRating - filledStars - (fractionalPart > 0 ? 1 : 0);\n\n    return (\n      <div\n        className={cn(\'flex items-center gap-2\', className)}\n        ref={ref}\n        {...props}\n      >\n        <div className="flex items-center">\n          {[...Array(filledStars)].map((_, index) => (\n            <svg\n              key={`filled-${index}`}\n              className="size-4 text-inherit"\n              fill="currentColor"\n              viewBox="0 0 20 20"\n            >\n              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.957a1 1 0 00.95.69h4.162c.969 0 1.371 1.24.588 1.81l-3.37 2.448a1 1 0 00-.364 1.118l1.287 3.957c.3.921-.755 1.688-1.54 1.118l-3.37-2.448a1 1 0 00-1.175 0l-3.37 2.448c-.784.57-1.838-.197-1.54-1.118l1.287-3.957a1 1 0 00-.364-1.118L2.05 9.384c-.783-.57-.38-1.81.588-1.81h4.162a1 1 0 00.95-.69l1.286-3.957z" />\n            </svg>\n          ))}\n          {fractionalPart > 0 && (\n            <svg\n              className="size-4 text-inherit"\n              fill="currentColor"\n              viewBox="0 0 20 20"\n            >\n              <defs>\n                <linearGradient id="half">\n                  <stop\n                    offset={`${fractionalPart * 100}%`}\n                    stopColor="currentColor"\n                  />\n                  <stop\n                    offset={`${fractionalPart * 100}%`}\n                    stopColor="rgb(209 213 219)"\n                  />\n                </linearGradient>\n              </defs>\n              <path\n                d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.957a1 1 0 00.95.69h4.162c.969 0 1.371 1.24.588 1.81l-3.37 2.448a1 1 0 00-.364 1.118l1.287 3.957c.3.921-.755 1.688-1.54 1.118l-3.37-2.448a1 1 0 00-1.175 0l-3.37 2.448c-.784.57-1.838-.197-1.54-1.118l1.287-3.957a1 1 0 00-.364-1.118L2.05 9.384c-.783-.57-.38-1.81.588-1.81h4.162a1 1 0 00.95-.69l1.286-3.957z"\n                fill="url(#half)"\n              />\n            </svg>\n          )}\n          {[...Array(emptyStars)].map((_, index) => (\n            <svg\n              key={`empty-${index}`}\n              className="size-4 text-gray-300"\n              fill="currentColor"\n              viewBox="0 0 20 20"\n            >\n              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.957a1 1 0 00.95.69h4.162c.969 0 1.371 1.24.588 1.81l-3.37 2.448a1 1 0 00-.364 1.118l1.287 3.957c.3.921-.755 1.688-1.54 1.118l-3.37-2.448a1 1 0 00-1.175 0l-3.37 2.448c-.784.57-1.838-.197-1.54-1.118l1.287-3.957a1 1 0 00-.364-1.118L2.05 9.384c-.783-.57-.38-1.81.588-1.81h4.162a1 1 0 00.95-.69l1.286-3.957z" />\n            </svg>\n          ))}\n        </div>\n        <p className="sr-only">{rating}</p>\n      </div>\n    );\n  },\n);\nRatingStars.displayName = \'RatingStars\';',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/rating-stars/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-rating-stars';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-rating-stars',
  },
  'shadcn-new-york-rating-stars': {
    name: 'shadcn-new-york-rating-stars',
    description:
      'Stars rating component with customizable color, size depending on average rating with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/rating-stars/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/rating-stars.tsx',
        content:
          '\'use client\';\n\nimport * as React from \'react\';\n\nimport { cn } from \'@/lib/utils\';\n\ninterface RatingStarsProps extends React.HTMLAttributes<HTMLDivElement> {\n  rating: number;\n  maxRating?: number;\n}\n\nexport const RatingStars = React.forwardRef<HTMLDivElement, RatingStarsProps>(\n  ({ rating, maxRating = 5, className, ...props }, ref) => {\n    const filledStars = Math.floor(rating);\n    const fractionalPart = rating - filledStars;\n    const emptyStars = maxRating - filledStars - (fractionalPart > 0 ? 1 : 0);\n\n    return (\n      <div\n        className={cn(\'flex items-center gap-2\', className)}\n        ref={ref}\n        {...props}\n      >\n        <div className="flex items-center">\n          {[...Array(filledStars)].map((_, index) => (\n            <svg\n              key={`filled-${index}`}\n              className="size-4 text-inherit"\n              fill="currentColor"\n              viewBox="0 0 20 20"\n            >\n              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.957a1 1 0 00.95.69h4.162c.969 0 1.371 1.24.588 1.81l-3.37 2.448a1 1 0 00-.364 1.118l1.287 3.957c.3.921-.755 1.688-1.54 1.118l-3.37-2.448a1 1 0 00-1.175 0l-3.37 2.448c-.784.57-1.838-.197-1.54-1.118l1.287-3.957a1 1 0 00-.364-1.118L2.05 9.384c-.783-.57-.38-1.81.588-1.81h4.162a1 1 0 00.95-.69l1.286-3.957z" />\n            </svg>\n          ))}\n          {fractionalPart > 0 && (\n            <svg\n              className="size-4 text-inherit"\n              fill="currentColor"\n              viewBox="0 0 20 20"\n            >\n              <defs>\n                <linearGradient id="half">\n                  <stop\n                    offset={`${fractionalPart * 100}%`}\n                    stopColor="currentColor"\n                  />\n                  <stop\n                    offset={`${fractionalPart * 100}%`}\n                    stopColor="rgb(209 213 219)"\n                  />\n                </linearGradient>\n              </defs>\n              <path\n                d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.957a1 1 0 00.95.69h4.162c.969 0 1.371 1.24.588 1.81l-3.37 2.448a1 1 0 00-.364 1.118l1.287 3.957c.3.921-.755 1.688-1.54 1.118l-3.37-2.448a1 1 0 00-1.175 0l-3.37 2.448c-.784.57-1.838-.197-1.54-1.118l1.287-3.957a1 1 0 00-.364-1.118L2.05 9.384c-.783-.57-.38-1.81.588-1.81h4.162a1 1 0 00.95-.69l1.286-3.957z"\n                fill="url(#half)"\n              />\n            </svg>\n          )}\n          {[...Array(emptyStars)].map((_, index) => (\n            <svg\n              key={`empty-${index}`}\n              className="size-4 text-gray-300"\n              fill="currentColor"\n              viewBox="0 0 20 20"\n            >\n              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.957a1 1 0 00.95.69h4.162c.969 0 1.371 1.24.588 1.81l-3.37 2.448a1 1 0 00-.364 1.118l1.287 3.957c.3.921-.755 1.688-1.54 1.118l-3.37-2.448a1 1 0 00-1.175 0l-3.37 2.448c-.784.57-1.838-.197-1.54-1.118l1.287-3.957a1 1 0 00-.364-1.118L2.05 9.384c-.783-.57-.38-1.81.588-1.81h4.162a1 1 0 00.95-.69l1.286-3.957z" />\n            </svg>\n          ))}\n        </div>\n        <p className="sr-only">{rating}</p>\n      </div>\n    );\n  },\n);\nRatingStars.displayName = \'RatingStars\';',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/rating-stars/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-rating-stars';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-rating-stars',
  },
  'default-text-stagger-inview': {
    name: 'default-text-stagger-inview',
    description:
      'Splitted text animation with staggered reveal triggered by view, You can easily customize by controlling the animation property (transform, opacity, blur) and the stagger value, and the transition with default style.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-stagger-inview/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-stagger-inview.tsx',
        content:
          "'use client';\nimport * as React from 'react';\n\nimport { AnimationT } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { HTMLMotionProps, motion } from 'motion/react';\nimport { WordStagger } from '@/components/systaliko-ui/text/word-stagger';\n\ninterface TextStaggerProps extends HTMLMotionProps<'span'> {\n  stagger?: number;\n  staggerDirection?: 1 | -1;\n  animation?: AnimationT;\n  as?: React.ElementType;\n}\n\nexport function TextStaggerInview({\n  children,\n  transition,\n  className,\n  stagger = 0.02,\n  staggerDirection,\n  animation,\n  as: Component = 'span',\n  ...props\n}: TextStaggerProps) {\n  const words = String(children).split(' ');\n  const MotionComponent = motion.create(Component);\n  return (\n    <MotionComponent\n      initial=\"hidden\"\n      whileInView={'visible'}\n      viewport={{ once: true }}\n      className={className}\n      transition={{\n        staggerChildren: stagger,\n        staggerDirection: staggerDirection,\n        ...transition,\n      }}\n      {...props}\n    >\n      {words.map((word, index) => (\n        <React.Fragment key={`${word}-${index}`}>\n          <WordStagger animation={animation}>{word}</WordStagger>\n          {index < words.length - 1 && ' '}\n        </React.Fragment>\n      ))}\n    </MotionComponent>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-stagger-inview/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-text-stagger-inview';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-text-stagger-inview',
  },
  'shadcn-default-text-stagger-inview': {
    name: 'shadcn-default-text-stagger-inview',
    description:
      'Splitted text animation with staggered reveal triggered by view, You can easily customize by controlling the animation property (transform, opacity, blur) and the stagger value, and the transition with shadcn-default style.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-stagger-inview/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-stagger-inview.tsx',
        content:
          "'use client';\nimport * as React from 'react';\n\nimport { AnimationT } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { HTMLMotionProps, motion } from 'motion/react';\nimport { WordStagger } from '@/components/systaliko-ui/text/word-stagger';\n\ninterface TextStaggerProps extends HTMLMotionProps<'span'> {\n  stagger?: number;\n  staggerDirection?: 1 | -1;\n  animation?: AnimationT;\n  as?: React.ElementType;\n}\n\nexport function TextStaggerInview({\n  children,\n  transition,\n  className,\n  stagger = 0.02,\n  staggerDirection,\n  animation,\n  as: Component = 'span',\n  ...props\n}: TextStaggerProps) {\n  const words = String(children).split(' ');\n  const MotionComponent = motion.create(Component);\n  return (\n    <MotionComponent\n      initial=\"hidden\"\n      whileInView={'visible'}\n      viewport={{ once: true }}\n      className={className}\n      transition={{\n        staggerChildren: stagger,\n        staggerDirection: staggerDirection,\n        ...transition,\n      }}\n      {...props}\n    >\n      {words.map((word, index) => (\n        <React.Fragment key={`${word}-${index}`}>\n          <WordStagger animation={animation}>{word}</WordStagger>\n          {index < words.length - 1 && ' '}\n        </React.Fragment>\n      ))}\n    </MotionComponent>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-stagger-inview/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-text-stagger-inview';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-text-stagger-inview',
  },
  'shadcn-new-york-text-stagger-inview': {
    name: 'shadcn-new-york-text-stagger-inview',
    description:
      'Splitted text animation with staggered reveal triggered by view, You can easily customize by controlling the animation property (transform, opacity, blur) and the stagger value, and the transition with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-stagger-inview/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-stagger-inview.tsx',
        content:
          "'use client';\nimport * as React from 'react';\n\nimport { AnimationT } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { HTMLMotionProps, motion } from 'motion/react';\nimport { WordStagger } from '@/components/systaliko-ui/text/word-stagger';\n\ninterface TextStaggerProps extends HTMLMotionProps<'span'> {\n  stagger?: number;\n  staggerDirection?: 1 | -1;\n  animation?: AnimationT;\n  as?: React.ElementType;\n}\n\nexport function TextStaggerInview({\n  children,\n  transition,\n  className,\n  stagger = 0.02,\n  staggerDirection,\n  animation,\n  as: Component = 'span',\n  ...props\n}: TextStaggerProps) {\n  const words = String(children).split(' ');\n  const MotionComponent = motion.create(Component);\n  return (\n    <MotionComponent\n      initial=\"hidden\"\n      whileInView={'visible'}\n      viewport={{ once: true }}\n      className={className}\n      transition={{\n        staggerChildren: stagger,\n        staggerDirection: staggerDirection,\n        ...transition,\n      }}\n      {...props}\n    >\n      {words.map((word, index) => (\n        <React.Fragment key={`${word}-${index}`}>\n          <WordStagger animation={animation}>{word}</WordStagger>\n          {index < words.length - 1 && ' '}\n        </React.Fragment>\n      ))}\n    </MotionComponent>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-stagger-inview/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-text-stagger-inview';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-text-stagger-inview',
  },
  'default-text-vertical': {
    name: 'default-text-vertical',
    description:
      'Text with vertical display, Can be used as a title or a subtitle with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-vertical/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-vertical.tsx',
        content:
          "import { cn } from '@/lib/utils';\nimport * as React from 'react';\n\ntype ElementType = React.ElementType;\n\ninterface TextVerticalProps extends React.HTMLAttributes<HTMLElement> {\n  as?: ElementType;\n}\n\nexport function TextVertical({\n  as: Component = 'div',\n  className,\n  style,\n  ...props\n}: TextVerticalProps) {\n  return (\n    <Component\n      className={cn('size-min -rotate-180 whitespace-nowrap', className)}\n      style={{\n        writingMode: 'vertical-rl',\n        ...style,\n      }}\n      {...props}\n    />\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-vertical/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-text-vertical';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-text-vertical',
  },
  'shadcn-default-text-vertical': {
    name: 'shadcn-default-text-vertical',
    description:
      'Text with vertical display, Can be used as a title or a subtitle with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-vertical/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-vertical.tsx',
        content:
          "import { cn } from '@/lib/utils';\nimport * as React from 'react';\n\ntype ElementType = React.ElementType;\n\ninterface TextVerticalProps extends React.HTMLAttributes<HTMLElement> {\n  as?: ElementType;\n}\n\nexport function TextVertical({\n  as: Component = 'div',\n  className,\n  style,\n  ...props\n}: TextVerticalProps) {\n  return (\n    <Component\n      className={cn('size-min -rotate-180 whitespace-nowrap', className)}\n      style={{\n        writingMode: 'vertical-rl',\n        ...style,\n      }}\n      {...props}\n    />\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-vertical/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-text-vertical';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-text-vertical',
  },
  'shadcn-new-york-text-vertical': {
    name: 'shadcn-new-york-text-vertical',
    description:
      'Text with vertical display, Can be used as a title or a subtitle with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-vertical/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-vertical.tsx',
        content:
          "import { cn } from '@/lib/utils';\nimport * as React from 'react';\n\ntype ElementType = React.ElementType;\n\ninterface TextVerticalProps extends React.HTMLAttributes<HTMLElement> {\n  as?: ElementType;\n}\n\nexport function TextVertical({\n  as: Component = 'div',\n  className,\n  style,\n  ...props\n}: TextVerticalProps) {\n  return (\n    <Component\n      className={cn('size-min -rotate-180 whitespace-nowrap', className)}\n      style={{\n        writingMode: 'vertical-rl',\n        ...style,\n      }}\n      {...props}\n    />\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-vertical/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-text-vertical';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-text-vertical',
  },
  'default-word-stagger': {
    name: 'default-word-stagger',
    description:
      'Alternative to text-stagger-inview and text-stagger-hover, in case you have one word or you want more custom text animations, use this component, it is used in the same way as text-stagger-inview and text-stagger-hover with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/word-stagger/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/word-stagger.tsx',
        content:
          "import { cn } from '@/lib/utils';\nimport { GSAP_TRANSITIONS } from '@/components/systaliko-ui/utils/gsap-transitions';\nimport {\n  AnimationT,\n  useAnimationVariants,\n} from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\n\ninterface WordProps extends React.HTMLAttributes<HTMLSpanElement> {\n  animation?: AnimationT;\n}\n\nexport function WordStagger({\n  children,\n  animation,\n  className,\n  ...props\n}: WordProps) {\n  const characters = String(children).split('');\n  const animationVariants = useAnimationVariants(animation);\n  return (\n    <span className={cn('inline-block text-nowrap', className)} {...props}>\n      {characters.map((char, index) => (\n        <motion.span\n          className=\"inline-block\"\n          variants={animationVariants}\n          key={`${char}-${index}`}\n          transition={{\n            duration: 0.3,\n            ease: GSAP_TRANSITIONS['power1.out'],\n          }}\n        >\n          {char}\n        </motion.span>\n      ))}\n    </span>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/word-stagger/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-word-stagger';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-word-stagger',
  },
  'shadcn-default-word-stagger': {
    name: 'shadcn-default-word-stagger',
    description:
      'Alternative to text-stagger-inview and text-stagger-hover, in case you have one word or you want more custom text animations, use this component, it is used in the same way as text-stagger-inview and text-stagger-hover with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/word-stagger/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/word-stagger.tsx',
        content:
          "import { cn } from '@/lib/utils';\nimport { GSAP_TRANSITIONS } from '@/components/systaliko-ui/utils/gsap-transitions';\nimport {\n  AnimationT,\n  useAnimationVariants,\n} from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\n\ninterface WordProps extends React.HTMLAttributes<HTMLSpanElement> {\n  animation?: AnimationT;\n}\n\nexport function WordStagger({\n  children,\n  animation,\n  className,\n  ...props\n}: WordProps) {\n  const characters = String(children).split('');\n  const animationVariants = useAnimationVariants(animation);\n  return (\n    <span className={cn('inline-block text-nowrap', className)} {...props}>\n      {characters.map((char, index) => (\n        <motion.span\n          className=\"inline-block\"\n          variants={animationVariants}\n          key={`${char}-${index}`}\n          transition={{\n            duration: 0.3,\n            ease: GSAP_TRANSITIONS['power1.out'],\n          }}\n        >\n          {char}\n        </motion.span>\n      ))}\n    </span>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/word-stagger/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-word-stagger';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-word-stagger',
  },
  'shadcn-new-york-word-stagger': {
    name: 'shadcn-new-york-word-stagger',
    description:
      'Alternative to text-stagger-inview and text-stagger-hover, in case you have one word or you want more custom text animations, use this component, it is used in the same way as text-stagger-inview and text-stagger-hover with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/word-stagger/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/word-stagger.tsx',
        content:
          "import { cn } from '@/lib/utils';\nimport { GSAP_TRANSITIONS } from '@/components/systaliko-ui/utils/gsap-transitions';\nimport {\n  AnimationT,\n  useAnimationVariants,\n} from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\n\ninterface WordProps extends React.HTMLAttributes<HTMLSpanElement> {\n  animation?: AnimationT;\n}\n\nexport function WordStagger({\n  children,\n  animation,\n  className,\n  ...props\n}: WordProps) {\n  const characters = String(children).split('');\n  const animationVariants = useAnimationVariants(animation);\n  return (\n    <span className={cn('inline-block text-nowrap', className)} {...props}>\n      {characters.map((char, index) => (\n        <motion.span\n          className=\"inline-block\"\n          variants={animationVariants}\n          key={`${char}-${index}`}\n          transition={{\n            duration: 0.3,\n            ease: GSAP_TRANSITIONS['power1.out'],\n          }}\n        >\n          {char}\n        </motion.span>\n      ))}\n    </span>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/word-stagger/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-word-stagger';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-word-stagger',
  },
  'default-gsap-transitions': {
    name: 'default-gsap-transitions',
    description:
      'GSAP custom easing functions, get the smooth gsap transitions withou using the whole library with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/gsap-transitions/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/utils/gsap-transitions.tsx',
        content:
          "export const GSAP_TRANSITIONS = {\n  'power1.in': [0.55, 0.085, 0.68, 0.53],\n  'power1.out': [0.25, 0.46, 0.45, 0.94],\n  'power1.inOut': [0.455, 0.03, 0.515, 0.955],\n\n  'power2.in': [0.55, 0.085, 0.68, 0.53],\n  'power2.out': [0.25, 0.46, 0.45, 0.94],\n  'power2.inOut': [0.455, 0.03, 0.515, 0.955],\n\n  'power3.in': [0.55, 0.055, 0.675, 0.19],\n  'power3.out': [0.215, 0.61, 0.355, 1],\n  'power3.inOut': [0.645, 0.045, 0.355, 1],\n\n  'power4.in': [0.895, 0.03, 0.685, 0.22],\n  'power4.out': [0.165, 0.84, 0.44, 1],\n  'power4.inOut': [0.77, 0, 0.175, 1],\n\n  'sine.in': [0.47, 0, 0.745, 0.715],\n  'sine.out': [0.39, 0.575, 0.565, 1],\n  'sine.inOut': [0.445, 0.05, 0.55, 0.95],\n\n  'expo.in': [0.95, 0.05, 0.795, 0.035],\n  'expo.out': [0.19, 1, 0.22, 1],\n  'expo.inOut': [1, 0, 0, 1],\n\n  'circ.in': [0.6, 0.04, 0.98, 0.335],\n  'circ.out': [0.075, 0.82, 0.165, 1],\n  'circ.inOut': [0.785, 0.135, 0.15, 0.86],\n\n  'back.in': [0.6, -0.28, 0.735, 0.045],\n  'back.out': [0.175, 0.885, 0.32, 1.275],\n  'back.inOut': [0.68, -0.55, 0.265, 1.55],\n} as const;",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/gsap-transitions/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-gsap-transitions';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-gsap-transitions',
  },
  'shadcn-default-gsap-transitions': {
    name: 'shadcn-default-gsap-transitions',
    description:
      'GSAP custom easing functions, get the smooth gsap transitions withou using the whole library with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/gsap-transitions/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/utils/gsap-transitions.tsx',
        content:
          "export const GSAP_TRANSITIONS = {\n  'power1.in': [0.55, 0.085, 0.68, 0.53],\n  'power1.out': [0.25, 0.46, 0.45, 0.94],\n  'power1.inOut': [0.455, 0.03, 0.515, 0.955],\n\n  'power2.in': [0.55, 0.085, 0.68, 0.53],\n  'power2.out': [0.25, 0.46, 0.45, 0.94],\n  'power2.inOut': [0.455, 0.03, 0.515, 0.955],\n\n  'power3.in': [0.55, 0.055, 0.675, 0.19],\n  'power3.out': [0.215, 0.61, 0.355, 1],\n  'power3.inOut': [0.645, 0.045, 0.355, 1],\n\n  'power4.in': [0.895, 0.03, 0.685, 0.22],\n  'power4.out': [0.165, 0.84, 0.44, 1],\n  'power4.inOut': [0.77, 0, 0.175, 1],\n\n  'sine.in': [0.47, 0, 0.745, 0.715],\n  'sine.out': [0.39, 0.575, 0.565, 1],\n  'sine.inOut': [0.445, 0.05, 0.55, 0.95],\n\n  'expo.in': [0.95, 0.05, 0.795, 0.035],\n  'expo.out': [0.19, 1, 0.22, 1],\n  'expo.inOut': [1, 0, 0, 1],\n\n  'circ.in': [0.6, 0.04, 0.98, 0.335],\n  'circ.out': [0.075, 0.82, 0.165, 1],\n  'circ.inOut': [0.785, 0.135, 0.15, 0.86],\n\n  'back.in': [0.6, -0.28, 0.735, 0.045],\n  'back.out': [0.175, 0.885, 0.32, 1.275],\n  'back.inOut': [0.68, -0.55, 0.265, 1.55],\n} as const;",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/gsap-transitions/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-gsap-transitions';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-gsap-transitions',
  },
  'shadcn-new-york-gsap-transitions': {
    name: 'shadcn-new-york-gsap-transitions',
    description:
      'GSAP custom easing functions, get the smooth gsap transitions withou using the whole library with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/gsap-transitions/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/utils/gsap-transitions.tsx',
        content:
          "export const GSAP_TRANSITIONS = {\n  'power1.in': [0.55, 0.085, 0.68, 0.53],\n  'power1.out': [0.25, 0.46, 0.45, 0.94],\n  'power1.inOut': [0.455, 0.03, 0.515, 0.955],\n\n  'power2.in': [0.55, 0.085, 0.68, 0.53],\n  'power2.out': [0.25, 0.46, 0.45, 0.94],\n  'power2.inOut': [0.455, 0.03, 0.515, 0.955],\n\n  'power3.in': [0.55, 0.055, 0.675, 0.19],\n  'power3.out': [0.215, 0.61, 0.355, 1],\n  'power3.inOut': [0.645, 0.045, 0.355, 1],\n\n  'power4.in': [0.895, 0.03, 0.685, 0.22],\n  'power4.out': [0.165, 0.84, 0.44, 1],\n  'power4.inOut': [0.77, 0, 0.175, 1],\n\n  'sine.in': [0.47, 0, 0.745, 0.715],\n  'sine.out': [0.39, 0.575, 0.565, 1],\n  'sine.inOut': [0.445, 0.05, 0.55, 0.95],\n\n  'expo.in': [0.95, 0.05, 0.795, 0.035],\n  'expo.out': [0.19, 1, 0.22, 1],\n  'expo.inOut': [1, 0, 0, 1],\n\n  'circ.in': [0.6, 0.04, 0.98, 0.335],\n  'circ.out': [0.075, 0.82, 0.165, 1],\n  'circ.inOut': [0.785, 0.135, 0.15, 0.86],\n\n  'back.in': [0.6, -0.28, 0.735, 0.045],\n  'back.out': [0.175, 0.885, 0.32, 1.275],\n  'back.inOut': [0.68, -0.55, 0.265, 1.55],\n} as const;",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/gsap-transitions/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-gsap-transitions';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-gsap-transitions',
  },
  'default-set-stagger-direction': {
    name: 'default-set-stagger-direction',
    description:
      'Set stagger direction, Allow to animate in orchestrated order depending on the order, can animate from the start item, middle item, last item with default style.',
    type: 'registry:lib',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/set-stagger-direction/default/index.ts',
        type: 'registry:lib',
        target: 'components/systaliko-ui/utils/set-stagger-direction.ts',
        content:
          "export type StaggerDirection = 'start' | 'middle' | 'end';\n\nexport interface StaggerOptions {\n  direction?: StaggerDirection;\n  staggerValue?: number;\n  totalItems: number;\n  index: number;\n}\n\nexport function setStaggerDirection({\n  direction = 'start',\n  staggerValue = 0.02,\n  totalItems,\n  index,\n}: StaggerOptions): number {\n  switch (direction) {\n    case 'start':\n      // Linear progression from start\n      return index * staggerValue;\n\n    case 'middle':\n      // Stagger from the middle outward\n      const middleIndex = Math.floor(totalItems / 2);\n      return Math.abs(index - middleIndex) * staggerValue;\n\n    case 'end':\n      // Linear progression from end\n      return (totalItems - 1 - index) * staggerValue;\n\n    default:\n      return 0;\n  }\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/set-stagger-direction/default/index.ts'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-set-stagger-direction';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-set-stagger-direction',
  },
  'shadcn-default-set-stagger-direction': {
    name: 'shadcn-default-set-stagger-direction',
    description:
      'Set stagger direction, Allow to animate in orchestrated order depending on the order, can animate from the start item, middle item, last item with shadcn-default style.',
    type: 'registry:lib',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/set-stagger-direction/shadcn-default/index.ts',
        type: 'registry:lib',
        target: 'components/systaliko-ui/utils/set-stagger-direction.ts',
        content:
          "export type StaggerDirection = 'start' | 'middle' | 'end';\n\nexport interface StaggerOptions {\n  direction?: StaggerDirection;\n  staggerValue?: number;\n  totalItems: number;\n  index: number;\n}\n\nexport function setStaggerDirection({\n  direction = 'start',\n  staggerValue = 0.02,\n  totalItems,\n  index,\n}: StaggerOptions): number {\n  switch (direction) {\n    case 'start':\n      // Linear progression from start\n      return index * staggerValue;\n\n    case 'middle':\n      // Stagger from the middle outward\n      const middleIndex = Math.floor(totalItems / 2);\n      return Math.abs(index - middleIndex) * staggerValue;\n\n    case 'end':\n      // Linear progression from end\n      return (totalItems - 1 - index) * staggerValue;\n\n    default:\n      return 0;\n  }\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/set-stagger-direction/shadcn-default/index.ts'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-set-stagger-direction';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-set-stagger-direction',
  },
  'shadcn-new-york-set-stagger-direction': {
    name: 'shadcn-new-york-set-stagger-direction',
    description:
      'Set stagger direction, Allow to animate in orchestrated order depending on the order, can animate from the start item, middle item, last item with shadcn-new-york style.',
    type: 'registry:lib',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/set-stagger-direction/shadcn-new-york/index.ts',
        type: 'registry:lib',
        target: 'components/systaliko-ui/utils/set-stagger-direction.ts',
        content:
          "export type StaggerDirection = 'start' | 'middle' | 'end';\n\nexport interface StaggerOptions {\n  direction?: StaggerDirection;\n  staggerValue?: number;\n  totalItems: number;\n  index: number;\n}\n\nexport function setStaggerDirection({\n  direction = 'start',\n  staggerValue = 0.02,\n  totalItems,\n  index,\n}: StaggerOptions): number {\n  switch (direction) {\n    case 'start':\n      // Linear progression from start\n      return index * staggerValue;\n\n    case 'middle':\n      // Stagger from the middle outward\n      const middleIndex = Math.floor(totalItems / 2);\n      return Math.abs(index - middleIndex) * staggerValue;\n\n    case 'end':\n      // Linear progression from end\n      return (totalItems - 1 - index) * staggerValue;\n\n    default:\n      return 0;\n  }\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/set-stagger-direction/shadcn-new-york/index.ts'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-set-stagger-direction';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-set-stagger-direction',
  },
  'default-split-text': {
    name: 'default-split-text',
    description:
      'split text utility function, allows to split text into characters, words, returns (characters, words, characterCount, wordCount) with default style.',
    type: 'registry:lib',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/split-text/default/index.ts',
        type: 'registry:lib',
        target: 'components/systaliko-ui/utils/split-text.ts',
        content:
          'interface SplitTextResult {\n  words: string[];\n  characters: string[];\n  wordCount: number;\n  characterCount: number;\n}\n\n/**\n * Splits text into words and characters while preserving spaces\n * @param text - The text to split\n * @returns Object containing words array, characters array, and counts\n * @example\n * const result = splitText("Hello World");\n * // result = {\n * //   words: ["Hello ", "World "],\n * //   characters: ["H", "e", "l", "l", "o", " ", "W", "o", "r", "l", "d", " "],\n * //   wordCount: 2,\n * //   characterCount: 12\n * // }\n */\nexport function splitText(text: string): SplitTextResult {\n  // Handle empty or whitespace-only strings\n  if (!text?.trim()) {\n    return {\n      words: [],\n      characters: [],\n      wordCount: 0,\n      characterCount: 0,\n    };\n  }\n\n  // Split into words and preserve spaces\n  const words = text.split(\' \').map((word) => word.concat(\' \'));\n\n  // Split into characters\n  const characters = words.map((word) => word.split(\'\')).flat(1);\n\n  return {\n    words,\n    characters,\n    wordCount: words.length,\n    characterCount: characters.length,\n  };\n}',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/split-text/default/index.ts'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-split-text';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-split-text',
  },
  'shadcn-default-split-text': {
    name: 'shadcn-default-split-text',
    description:
      'split text utility function, allows to split text into characters, words, returns (characters, words, characterCount, wordCount) with shadcn-default style.',
    type: 'registry:lib',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/split-text/shadcn-default/index.ts',
        type: 'registry:lib',
        target: 'components/systaliko-ui/utils/split-text.ts',
        content:
          'interface SplitTextResult {\n  words: string[];\n  characters: string[];\n  wordCount: number;\n  characterCount: number;\n}\n\n/**\n * Splits text into words and characters while preserving spaces\n * @param text - The text to split\n * @returns Object containing words array, characters array, and counts\n * @example\n * const result = splitText("Hello World");\n * // result = {\n * //   words: ["Hello ", "World "],\n * //   characters: ["H", "e", "l", "l", "o", " ", "W", "o", "r", "l", "d", " "],\n * //   wordCount: 2,\n * //   characterCount: 12\n * // }\n */\nexport function splitText(text: string): SplitTextResult {\n  // Handle empty or whitespace-only strings\n  if (!text?.trim()) {\n    return {\n      words: [],\n      characters: [],\n      wordCount: 0,\n      characterCount: 0,\n    };\n  }\n\n  // Split into words and preserve spaces\n  const words = text.split(\' \').map((word) => word.concat(\' \'));\n\n  // Split into characters\n  const characters = words.map((word) => word.split(\'\')).flat(1);\n\n  return {\n    words,\n    characters,\n    wordCount: words.length,\n    characterCount: characters.length,\n  };\n}',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/split-text/shadcn-default/index.ts'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-split-text';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-split-text',
  },
  'shadcn-new-york-split-text': {
    name: 'shadcn-new-york-split-text',
    description:
      'split text utility function, allows to split text into characters, words, returns (characters, words, characterCount, wordCount) with shadcn-new-york style.',
    type: 'registry:lib',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/split-text/shadcn-new-york/index.ts',
        type: 'registry:lib',
        target: 'components/systaliko-ui/utils/split-text.ts',
        content:
          'interface SplitTextResult {\n  words: string[];\n  characters: string[];\n  wordCount: number;\n  characterCount: number;\n}\n\n/**\n * Splits text into words and characters while preserving spaces\n * @param text - The text to split\n * @returns Object containing words array, characters array, and counts\n * @example\n * const result = splitText("Hello World");\n * // result = {\n * //   words: ["Hello ", "World "],\n * //   characters: ["H", "e", "l", "l", "o", " ", "W", "o", "r", "l", "d", " "],\n * //   wordCount: 2,\n * //   characterCount: 12\n * // }\n */\nexport function splitText(text: string): SplitTextResult {\n  // Handle empty or whitespace-only strings\n  if (!text?.trim()) {\n    return {\n      words: [],\n      characters: [],\n      wordCount: 0,\n      characterCount: 0,\n    };\n  }\n\n  // Split into words and preserve spaces\n  const words = text.split(\' \').map((word) => word.concat(\' \'));\n\n  // Split into characters\n  const characters = words.map((word) => word.split(\'\')).flat(1);\n\n  return {\n    words,\n    characters,\n    wordCount: words.length,\n    characterCount: characters.length,\n  };\n}',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/split-text/shadcn-new-york/index.ts'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-split-text';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-split-text',
  },
  'default-use-animation-variants': {
    name: 'default-use-animation-variants',
    description:
      'Use animation variants hook, for your motion components, allows to animate component with transforms, opacity, and blur with default style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/use-animation-variants/default/index.tsx',
        type: 'registry:hook',
        target: 'components/systaliko-ui/utils/use-animation-variants.tsx',
        content:
          "import * as React from 'react';\n\nexport type AnimationT =\n  | 'left'\n  | 'right'\n  | 'top'\n  | 'bottom'\n  | 'z'\n  | 'blur'\n  | undefined;\n\nexport function useAnimationVariants(animation?: AnimationT) {\n  return React.useMemo(\n    () => ({\n      hidden: {\n        x: animation === 'left' ? '-100%' : animation === 'right' ? '100%' : 0,\n        y: animation === 'top' ? '-100%' : animation === 'bottom' ? '100%' : 0,\n        scale: animation === 'z' ? 0 : 1,\n        filter: animation === 'blur' ? 'blur(10px)' : 'blur(0px)',\n        opacity: 0,\n      },\n      visible: {\n        x: 0,\n        y: 0,\n        scale: 1,\n        filter: 'blur(0px)',\n        opacity: 1,\n      },\n    }),\n    [animation],\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/use-animation-variants/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-use-animation-variants';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-use-animation-variants',
  },
  'shadcn-default-use-animation-variants': {
    name: 'shadcn-default-use-animation-variants',
    description:
      'Use animation variants hook, for your motion components, allows to animate component with transforms, opacity, and blur with shadcn-default style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/use-animation-variants/shadcn-default/index.tsx',
        type: 'registry:hook',
        target: 'components/systaliko-ui/utils/use-animation-variants.tsx',
        content:
          "import * as React from 'react';\n\nexport type AnimationT =\n  | 'left'\n  | 'right'\n  | 'top'\n  | 'bottom'\n  | 'z'\n  | 'blur'\n  | undefined;\n\nexport function useAnimationVariants(animation?: AnimationT) {\n  return React.useMemo(\n    () => ({\n      hidden: {\n        x: animation === 'left' ? '-100%' : animation === 'right' ? '100%' : 0,\n        y: animation === 'top' ? '-100%' : animation === 'bottom' ? '100%' : 0,\n        scale: animation === 'z' ? 0 : 1,\n        filter: animation === 'blur' ? 'blur(10px)' : 'blur(0px)',\n        opacity: 0,\n      },\n      visible: {\n        x: 0,\n        y: 0,\n        scale: 1,\n        filter: 'blur(0px)',\n        opacity: 1,\n      },\n    }),\n    [animation],\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/use-animation-variants/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-use-animation-variants';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-use-animation-variants',
  },
  'shadcn-new-york-use-animation-variants': {
    name: 'shadcn-new-york-use-animation-variants',
    description:
      'Use animation variants hook, for your motion components, allows to animate component with transforms, opacity, and blur with shadcn-new-york style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/use-animation-variants/shadcn-new-york/index.tsx',
        type: 'registry:hook',
        target: 'components/systaliko-ui/utils/use-animation-variants.tsx',
        content:
          "import * as React from 'react';\n\nexport type AnimationT =\n  | 'left'\n  | 'right'\n  | 'top'\n  | 'bottom'\n  | 'z'\n  | 'blur'\n  | undefined;\n\nexport function useAnimationVariants(animation?: AnimationT) {\n  return React.useMemo(\n    () => ({\n      hidden: {\n        x: animation === 'left' ? '-100%' : animation === 'right' ? '100%' : 0,\n        y: animation === 'top' ? '-100%' : animation === 'bottom' ? '100%' : 0,\n        scale: animation === 'z' ? 0 : 1,\n        filter: animation === 'blur' ? 'blur(10px)' : 'blur(0px)',\n        opacity: 0,\n      },\n      visible: {\n        x: 0,\n        y: 0,\n        scale: 1,\n        filter: 'blur(0px)',\n        opacity: 1,\n      },\n    }),\n    [animation],\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/use-animation-variants/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-use-animation-variants';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-use-animation-variants',
  },
  'default-use-follow-mouse': {
    name: 'default-use-follow-mouse',
    description:
      'As the name suggests, this hook will follow the mouse position with default style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/use-follow-mouse/default/index.ts',
        type: 'registry:hook',
        target: 'components/systaliko-ui/utils/use-follow-mouse.ts',
        content:
          "'use client';\nimport { SpringOptions, useMotionValue, useSpring } from 'motion/react';\nimport { useEffect } from 'react';\n\nexport function useFollowMouse(springConfig: SpringOptions) {\n  const cursorX = useMotionValue(-100);\n  const cursorY = useMotionValue(-100);\n\n  const cursorXSpring = useSpring(cursorX, springConfig);\n  const cursroYSpring = useSpring(cursorY, springConfig);\n\n  useEffect(() => {\n    const followMouse = (e: MouseEvent) => {\n      cursorX.set(e.clientX - 10);\n      cursorY.set(e.clientY - 10);\n    };\n    window.addEventListener('mousemove', followMouse);\n\n    return () => {\n      window.removeEventListener('mousemove', followMouse);\n    };\n  }, []);\n\n  return {\n    cursorXSpring,\n    cursroYSpring,\n  };\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/use-follow-mouse/default/index.ts'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-use-follow-mouse';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-use-follow-mouse',
  },
  'shadcn-default-use-follow-mouse': {
    name: 'shadcn-default-use-follow-mouse',
    description:
      'As the name suggests, this hook will follow the mouse position with shadcn-default style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/use-follow-mouse/shadcn-default/index.ts',
        type: 'registry:hook',
        target: 'components/systaliko-ui/utils/use-follow-mouse.ts',
        content:
          "'use client';\nimport { SpringOptions, useMotionValue, useSpring } from 'motion/react';\nimport { useEffect } from 'react';\n\nexport function useFollowMouse(springConfig: SpringOptions) {\n  const cursorX = useMotionValue(-100);\n  const cursorY = useMotionValue(-100);\n\n  const cursorXSpring = useSpring(cursorX, springConfig);\n  const cursroYSpring = useSpring(cursorY, springConfig);\n\n  useEffect(() => {\n    const followMouse = (e: MouseEvent) => {\n      cursorX.set(e.clientX - 10);\n      cursorY.set(e.clientY - 10);\n    };\n    window.addEventListener('mousemove', followMouse);\n\n    return () => {\n      window.removeEventListener('mousemove', followMouse);\n    };\n  }, []);\n\n  return {\n    cursorXSpring,\n    cursroYSpring,\n  };\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/use-follow-mouse/shadcn-default/index.ts'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-use-follow-mouse';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-use-follow-mouse',
  },
  'shadcn-new-york-use-follow-mouse': {
    name: 'shadcn-new-york-use-follow-mouse',
    description:
      'As the name suggests, this hook will follow the mouse position with shadcn-new-york style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/use-follow-mouse/shadcn-new-york/index.ts',
        type: 'registry:hook',
        target: 'components/systaliko-ui/utils/use-follow-mouse.ts',
        content:
          "'use client';\nimport { SpringOptions, useMotionValue, useSpring } from 'motion/react';\nimport { useEffect } from 'react';\n\nexport function useFollowMouse(springConfig: SpringOptions) {\n  const cursorX = useMotionValue(-100);\n  const cursorY = useMotionValue(-100);\n\n  const cursorXSpring = useSpring(cursorX, springConfig);\n  const cursroYSpring = useSpring(cursorY, springConfig);\n\n  useEffect(() => {\n    const followMouse = (e: MouseEvent) => {\n      cursorX.set(e.clientX - 10);\n      cursorY.set(e.clientY - 10);\n    };\n    window.addEventListener('mousemove', followMouse);\n\n    return () => {\n      window.removeEventListener('mousemove', followMouse);\n    };\n  }, []);\n\n  return {\n    cursorXSpring,\n    cursroYSpring,\n  };\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/use-follow-mouse/shadcn-new-york/index.ts'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-use-follow-mouse';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-use-follow-mouse',
  },
};
