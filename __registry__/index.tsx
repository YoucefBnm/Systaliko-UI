/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from 'react';

export const index: Record<string, any> = {
  index: {
    name: 'index',
    description: '',
    type: 'registry:style',
    dependencies: [
      'tw-animate-css',
      'class-variance-authority',
      'lucide-react',
    ],
    devDependencies: undefined,
    registryDependencies: ['utils'],
    styles: undefined,
    files: [],
    component: null,
    command: 'https://animate-ui.com/r/index',
  },
  'default-copy-button': {
    name: 'default-copy-button',
    description:
      'A button with a copy to clipboard animation with default style.',
    type: 'registry:ui',
    dependencies: ['motion', 'lucide-react', 'class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/buttons/copy/default/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/buttons/copy.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, HTMLMotionProps, motion } from 'motion/react';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center cursor-pointer rounded-md transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        muted: 'bg-muted text-muted-foreground',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n      },\n      size: {\n        default: 'size-8 rounded-lg [&_svg]:size-4',\n        sm: 'size-6 [&_svg]:size-3',\n        md: 'size-10 rounded-lg [&_svg]:size-5',\n        lg: 'size-12 rounded-xl [&_svg]:size-6',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\ntype CopyButtonProps = Omit<HTMLMotionProps<'button'>, 'children' | 'onCopy'> &\n  VariantProps<typeof buttonVariants> & {\n    content?: string;\n    delay?: number;\n    onCopy?: (content: string) => void;\n    isCopied?: boolean;\n    onCopyChange?: (isCopied: boolean) => void;\n  };\n\nfunction CopyButton({\n  content,\n  className,\n  size,\n  variant,\n  delay = 3000,\n  onClick,\n  onCopy,\n  isCopied,\n  onCopyChange,\n  ...props\n}: CopyButtonProps) {\n  const [localIsCopied, setLocalIsCopied] = React.useState(isCopied ?? false);\n  const Icon = localIsCopied ? CheckIcon : CopyIcon;\n\n  React.useEffect(() => {\n    setLocalIsCopied(isCopied ?? false);\n  }, [isCopied]);\n\n  const handleIsCopied = React.useCallback(\n    (isCopied: boolean) => {\n      setLocalIsCopied(isCopied);\n      onCopyChange?.(isCopied);\n    },\n    [onCopyChange],\n  );\n\n  const handleCopy = React.useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (isCopied) return;\n      if (content) {\n        navigator.clipboard\n          .writeText(content)\n          .then(() => {\n            handleIsCopied(true);\n            setTimeout(() => handleIsCopied(false), delay);\n            onCopy?.(content);\n          })\n          .catch((error) => {\n            console.error('Error copying command', error);\n          });\n      }\n      onClick?.(e);\n    },\n    [isCopied, content, delay, onClick, onCopy, handleIsCopied],\n  );\n\n  return (\n    <motion.button\n      data-slot=\"copy-button\"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      className={cn(buttonVariants({ variant, size }), className)}\n      onClick={handleCopy}\n      {...props}\n    >\n      <AnimatePresence mode=\"wait\">\n        <motion.span\n          key={localIsCopied ? 'check' : 'copy'}\n          data-slot=\"copy-button-icon\"\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          exit={{ scale: 0 }}\n          transition={{ duration: 0.15 }}\n        >\n          <Icon />\n        </motion.span>\n      </AnimatePresence>\n    </motion.button>\n  );\n}\n\nexport { CopyButton, buttonVariants, type CopyButtonProps };",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/buttons/copy/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-copy-button';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-copy-button',
  },
  'shadcn-default-copy-button': {
    name: 'shadcn-default-copy-button',
    description:
      'A button with a copy to clipboard animation with shadcn-default style.',
    type: 'registry:ui',
    dependencies: ['motion', 'lucide-react', 'class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/buttons/copy/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/buttons/copy.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, HTMLMotionProps, motion } from 'motion/react';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center cursor-pointer rounded-md transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        muted: 'bg-muted text-muted-foreground',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n      },\n      size: {\n        default: 'size-8 rounded-lg [&_svg]:size-4',\n        sm: 'size-6 [&_svg]:size-3',\n        md: 'size-10 rounded-lg [&_svg]:size-5',\n        lg: 'size-12 rounded-xl [&_svg]:size-6',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\ntype CopyButtonProps = Omit<HTMLMotionProps<'button'>, 'children' | 'onCopy'> &\n  VariantProps<typeof buttonVariants> & {\n    content?: string;\n    delay?: number;\n    onCopy?: (content: string) => void;\n    isCopied?: boolean;\n    onCopyChange?: (isCopied: boolean) => void;\n  };\n\nfunction CopyButton({\n  content,\n  className,\n  size,\n  variant,\n  delay = 3000,\n  onClick,\n  onCopy,\n  isCopied,\n  onCopyChange,\n  ...props\n}: CopyButtonProps) {\n  const [localIsCopied, setLocalIsCopied] = React.useState(isCopied ?? false);\n  const Icon = localIsCopied ? CheckIcon : CopyIcon;\n\n  React.useEffect(() => {\n    setLocalIsCopied(isCopied ?? false);\n  }, [isCopied]);\n\n  const handleIsCopied = React.useCallback(\n    (isCopied: boolean) => {\n      setLocalIsCopied(isCopied);\n      onCopyChange?.(isCopied);\n    },\n    [onCopyChange],\n  );\n\n  const handleCopy = React.useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (isCopied) return;\n      if (content) {\n        navigator.clipboard\n          .writeText(content)\n          .then(() => {\n            handleIsCopied(true);\n            setTimeout(() => handleIsCopied(false), delay);\n            onCopy?.(content);\n          })\n          .catch((error) => {\n            console.error('Error copying command', error);\n          });\n      }\n      onClick?.(e);\n    },\n    [isCopied, content, delay, onClick, onCopy, handleIsCopied],\n  );\n\n  return (\n    <motion.button\n      data-slot=\"copy-button\"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      className={cn(buttonVariants({ variant, size }), className)}\n      onClick={handleCopy}\n      {...props}\n    >\n      <AnimatePresence mode=\"wait\">\n        <motion.span\n          key={localIsCopied ? 'check' : 'copy'}\n          data-slot=\"copy-button-icon\"\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          exit={{ scale: 0 }}\n          transition={{ duration: 0.15 }}\n        >\n          <Icon />\n        </motion.span>\n      </AnimatePresence>\n    </motion.button>\n  );\n}\n\nexport { CopyButton, buttonVariants, type CopyButtonProps };",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/buttons/copy/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-copy-button';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-copy-button',
  },
  'shadcn-new-york-copy-button': {
    name: 'shadcn-new-york-copy-button',
    description:
      'A button with a copy to clipboard animation with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: ['motion', 'lucide-react', 'class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/buttons/copy/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/buttons/copy.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, HTMLMotionProps, motion } from 'motion/react';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center cursor-pointer rounded-md transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        muted: 'bg-muted text-muted-foreground',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n      },\n      size: {\n        default: 'size-8 rounded-lg [&_svg]:size-4',\n        sm: 'size-6 [&_svg]:size-3',\n        md: 'size-10 rounded-lg [&_svg]:size-5',\n        lg: 'size-12 rounded-xl [&_svg]:size-6',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\ntype CopyButtonProps = Omit<HTMLMotionProps<'button'>, 'children' | 'onCopy'> &\n  VariantProps<typeof buttonVariants> & {\n    content?: string;\n    delay?: number;\n    onCopy?: (content: string) => void;\n    isCopied?: boolean;\n    onCopyChange?: (isCopied: boolean) => void;\n  };\n\nfunction CopyButton({\n  content,\n  className,\n  size,\n  variant,\n  delay = 3000,\n  onClick,\n  onCopy,\n  isCopied,\n  onCopyChange,\n  ...props\n}: CopyButtonProps) {\n  const [localIsCopied, setLocalIsCopied] = React.useState(isCopied ?? false);\n  const Icon = localIsCopied ? CheckIcon : CopyIcon;\n\n  React.useEffect(() => {\n    setLocalIsCopied(isCopied ?? false);\n  }, [isCopied]);\n\n  const handleIsCopied = React.useCallback(\n    (isCopied: boolean) => {\n      setLocalIsCopied(isCopied);\n      onCopyChange?.(isCopied);\n    },\n    [onCopyChange],\n  );\n\n  const handleCopy = React.useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (isCopied) return;\n      if (content) {\n        navigator.clipboard\n          .writeText(content)\n          .then(() => {\n            handleIsCopied(true);\n            setTimeout(() => handleIsCopied(false), delay);\n            onCopy?.(content);\n          })\n          .catch((error) => {\n            console.error('Error copying command', error);\n          });\n      }\n      onClick?.(e);\n    },\n    [isCopied, content, delay, onClick, onCopy, handleIsCopied],\n  );\n\n  return (\n    <motion.button\n      data-slot=\"copy-button\"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      className={cn(buttonVariants({ variant, size }), className)}\n      onClick={handleCopy}\n      {...props}\n    >\n      <AnimatePresence mode=\"wait\">\n        <motion.span\n          key={localIsCopied ? 'check' : 'copy'}\n          data-slot=\"copy-button-icon\"\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          exit={{ scale: 0 }}\n          transition={{ duration: 0.15 }}\n        >\n          <Icon />\n        </motion.span>\n      </AnimatePresence>\n    </motion.button>\n  );\n}\n\nexport { CopyButton, buttonVariants, type CopyButtonProps };",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/buttons/copy/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-copy-button';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-copy-button',
  },
  'default-text-stagger-inview-demo': {
    name: 'default-text-stagger-inview-demo',
    description:
      'Demo showing a split text with stagger animation with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-stagger-inview'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-stagger-inview/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-stagger-inview.tsx',
        content:
          "'use client';\n\nimport { useState } from 'react';\nimport { TextStaggerInview } from '@/components/systaliko-ui/text/text-stagger-inview';\nimport { AnimationT } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\n\nconst animations: { value: AnimationT; label: string }[] = [\n  { value: 'left', label: 'Slide from Left' },\n  { value: 'right', label: 'Slide from Right' },\n  { value: 'top', label: 'Slide from Top' },\n  { value: 'bottom', label: 'Slide from Bottom' },\n  { value: 'z', label: 'Scale' },\n  { value: 'blur', label: 'Blur' },\n  // { value: \"\", label: 'Opacity' },\n];\n\nexport const TextStaggerInviewDemo = () => {\n  const [animation, setAnimation] = useState<AnimationT>();\n  const [staggerValue, setStaggerValue] = useState<number>(0.02);\n  return (\n    <div className=\"flex h-80 flex-col justify-between gap-8\">\n      <div className=\"flex items-center justify-between\">\n        <Select onValueChange={(value) => setAnimation(value as AnimationT)}>\n          <SelectTrigger className=\"w-[180px]\">\n            <SelectValue placeholder=\"Choose your animation\" />\n          </SelectTrigger>\n          <SelectContent className=\"relative z-40\">\n            {animations.map((animation) => (\n              <SelectItem\n                key={animation.value ?? animation.label}\n                value={animation.value ?? ''}\n              >\n                {animation.label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <Input\n          className=\"max-w-fit\"\n          type=\"number\"\n          step={0.01}\n          min={0}\n          value={staggerValue}\n          onChange={(e) => setStaggerValue(Number(e.target.value))}\n        />\n      </div>\n      <TextStaggerInview\n        key={`${animation}-${staggerValue}`}\n        animation={animation}\n        className=\"overflow-hidden text-4xl tracking-tight font-bold\"\n        stagger={staggerValue}\n      >\n        Orchestrated text animation with staggered animations\n      </TextStaggerInview>\n    </div>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-stagger-inview/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-text-stagger-inview-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-text-stagger-inview-demo',
  },
  'shadcn-default-text-stagger-inview-demo': {
    name: 'shadcn-default-text-stagger-inview-demo',
    description:
      'Demo showing a split text with stagger animation with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-stagger-inview'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-stagger-inview/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-stagger-inview.tsx',
        content:
          "'use client';\n\nimport { useState } from 'react';\nimport { TextStaggerInview } from '@/components/systaliko-ui/text/text-stagger-inview';\nimport { AnimationT } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\n\nconst animations: { value: AnimationT; label: string }[] = [\n  { value: 'left', label: 'Slide from Left' },\n  { value: 'right', label: 'Slide from Right' },\n  { value: 'top', label: 'Slide from Top' },\n  { value: 'bottom', label: 'Slide from Bottom' },\n  { value: 'z', label: 'Scale' },\n  { value: 'blur', label: 'Blur' },\n  // { value: \"\", label: 'Opacity' },\n];\n\nexport const TextStaggerInviewDemo = () => {\n  const [animation, setAnimation] = useState<AnimationT>();\n  const [staggerValue, setStaggerValue] = useState<number>(0.02);\n  return (\n    <div className=\"flex h-80 flex-col justify-between gap-8\">\n      <div className=\"flex items-center justify-between\">\n        <Select onValueChange={(value) => setAnimation(value as AnimationT)}>\n          <SelectTrigger className=\"w-[180px]\">\n            <SelectValue placeholder=\"Choose your animation\" />\n          </SelectTrigger>\n          <SelectContent className=\"relative z-40\">\n            {animations.map((animation) => (\n              <SelectItem\n                key={animation.value ?? animation.label}\n                value={animation.value ?? ''}\n              >\n                {animation.label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <Input\n          className=\"max-w-fit\"\n          type=\"number\"\n          step={0.01}\n          min={0}\n          value={staggerValue}\n          onChange={(e) => setStaggerValue(Number(e.target.value))}\n        />\n      </div>\n      <TextStaggerInview\n        key={`${animation}-${staggerValue}`}\n        animation={animation}\n        className=\"overflow-hidden text-4xl tracking-tight font-bold\"\n        stagger={staggerValue}\n      >\n        Orchestrated text animation with staggered animations\n      </TextStaggerInview>\n    </div>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-stagger-inview/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-text-stagger-inview-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-text-stagger-inview-demo',
  },
  'shadcn-new-york-text-stagger-inview-demo': {
    name: 'shadcn-new-york-text-stagger-inview-demo',
    description:
      'Demo showing a split text with stagger animation with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-stagger-inview'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-stagger-inview/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-stagger-inview.tsx',
        content:
          "'use client';\n\nimport { useState } from 'react';\nimport { TextStaggerInview } from '@/components/systaliko-ui/text/text-stagger-inview';\nimport { AnimationT } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\n\nconst animations: { value: AnimationT; label: string }[] = [\n  { value: 'left', label: 'Slide from Left' },\n  { value: 'right', label: 'Slide from Right' },\n  { value: 'top', label: 'Slide from Top' },\n  { value: 'bottom', label: 'Slide from Bottom' },\n  { value: 'z', label: 'Scale' },\n  { value: 'blur', label: 'Blur' },\n  // { value: \"\", label: 'Opacity' },\n];\n\nexport const TextStaggerInviewDemo = () => {\n  const [animation, setAnimation] = useState<AnimationT>();\n  const [staggerValue, setStaggerValue] = useState<number>(0.02);\n  return (\n    <div className=\"flex h-80 flex-col justify-between gap-8\">\n      <div className=\"flex items-center justify-between\">\n        <Select onValueChange={(value) => setAnimation(value as AnimationT)}>\n          <SelectTrigger className=\"w-[180px]\">\n            <SelectValue placeholder=\"Choose your animation\" />\n          </SelectTrigger>\n          <SelectContent className=\"relative z-40\">\n            {animations.map((animation) => (\n              <SelectItem\n                key={animation.value ?? animation.label}\n                value={animation.value ?? ''}\n              >\n                {animation.label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <Input\n          className=\"max-w-fit\"\n          type=\"number\"\n          step={0.01}\n          min={0}\n          value={staggerValue}\n          onChange={(e) => setStaggerValue(Number(e.target.value))}\n        />\n      </div>\n      <TextStaggerInview\n        key={`${animation}-${staggerValue}`}\n        animation={animation}\n        className=\"overflow-hidden text-4xl tracking-tight font-bold\"\n        stagger={staggerValue}\n      >\n        Orchestrated text animation with staggered animations\n      </TextStaggerInview>\n    </div>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-stagger-inview/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-text-stagger-inview-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/shadcn-new-york-text-stagger-inview-demo',
  },
  'default-text-vertical-demo': {
    name: 'default-text-vertical-demo',
    description: 'Demo showing a vertical text with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-vertical'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-vertical/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-vertical.tsx',
        content:
          'import { TextVertical } from \'@/components/systaliko-ui/text/text-vertical\';\n\nexport const TextVerticalDemo = () => {\n  return (\n    <TextVertical\n      className="uppercase text-sm tracking-wider font-medium"\n      as="h4"\n    >\n      our summer collection\n    </TextVertical>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-vertical/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-text-vertical-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-text-vertical-demo',
  },
  'shadcn-default-text-vertical-demo': {
    name: 'shadcn-default-text-vertical-demo',
    description: 'Demo showing a vertical text with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-vertical'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-vertical/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-vertical.tsx',
        content:
          'import { TextVertical } from \'@/components/systaliko-ui/text/text-vertical\';\n\nexport const TextVerticalDemo = () => {\n  return (\n    <TextVertical\n      className="uppercase text-sm tracking-wider font-medium"\n      as="h4"\n    >\n      our summer collection\n    </TextVertical>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-vertical/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-text-vertical-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-text-vertical-demo',
  },
  'shadcn-new-york-text-vertical-demo': {
    name: 'shadcn-new-york-text-vertical-demo',
    description: 'Demo showing a vertical text with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-vertical'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-vertical/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-vertical.tsx',
        content:
          'import { TextVertical } from \'@/components/systaliko-ui/text/text-vertical\';\n\nexport const TextVerticalDemo = () => {\n  return (\n    <TextVertical\n      className="uppercase text-sm tracking-wider font-medium"\n      as="h4"\n    >\n      our summer collection\n    </TextVertical>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-vertical/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-text-vertical-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-text-vertical-demo',
  },
  'default-use-animation-variants-demo': {
    name: 'default-use-animation-variants-demo',
    description:
      'Demo showing how to use use-animation-variants hook with default style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'http://localhost:3000/r/use-animation-variants',
      'motion',
    ],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/utils/use-animation-variants/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/utils/use-animation-variants.tsx',
        content:
          "'use client';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  AnimationT,\n  useAnimationVariants,\n} from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\nimport { useState } from 'react';\n\nconst animations: { value: AnimationT; label: string }[] = [\n  { value: 'left', label: 'Slide from Left' },\n  { value: 'right', label: 'Slide from Right' },\n  { value: 'top', label: 'Slide from Top' },\n  { value: 'bottom', label: 'Slide from Bottom' },\n  { value: 'z', label: 'Scale' },\n  { value: 'blur', label: 'Blur' },\n  // { value: \"\", label: 'Opacity' },\n];\n\nexport const TextVerticalDemo = () => {\n  const [animation, setAnimation] = useState<AnimationT>();\n  const animationVariants = useAnimationVariants(animation);\n\n  return (\n    <div className=\"flex h-80 flex-col justify-between gap-8\">\n      <Select onValueChange={(value) => setAnimation(value as AnimationT)}>\n        <SelectTrigger className=\"w-[180px]\">\n          <SelectValue placeholder=\"Choose your animation\" />\n        </SelectTrigger>\n        <SelectContent className=\"relative z-40\">\n          {animations.map((animation) => (\n            <SelectItem\n              key={animation.value ?? animation.label}\n              value={animation.value ?? ''}\n            >\n              {animation.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n\n      <motion.h2\n        key={animation}\n        variants={animationVariants}\n        transition={{ duration: 0.3, delay: 0.2, ease: 'easeInOut' }}\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: false }}\n        className=\"text-4xl tracking-tight font-bold\"\n      >\n        Choose your animation, simple as that !!\n      </motion.h2>\n    </div>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/utils/use-animation-variants/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-use-animation-variants-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-use-animation-variants-demo',
  },
  'shadcn-default-use-animation-variants-demo': {
    name: 'shadcn-default-use-animation-variants-demo',
    description:
      'Demo showing how to use use-animation-variants hook with shadcn-default style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'http://localhost:3000/r/use-animation-variants',
      'motion',
    ],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/utils/use-animation-variants/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/utils/use-animation-variants.tsx',
        content:
          "'use client';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  AnimationT,\n  useAnimationVariants,\n} from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\nimport { useState } from 'react';\n\nconst animations: { value: AnimationT; label: string }[] = [\n  { value: 'left', label: 'Slide from Left' },\n  { value: 'right', label: 'Slide from Right' },\n  { value: 'top', label: 'Slide from Top' },\n  { value: 'bottom', label: 'Slide from Bottom' },\n  { value: 'z', label: 'Scale' },\n  { value: 'blur', label: 'Blur' },\n  // { value: \"\", label: 'Opacity' },\n];\n\nexport const TextVerticalDemo = () => {\n  const [animation, setAnimation] = useState<AnimationT>();\n  const animationVariants = useAnimationVariants(animation);\n\n  return (\n    <div className=\"flex h-80 flex-col justify-between gap-8\">\n      <Select onValueChange={(value) => setAnimation(value as AnimationT)}>\n        <SelectTrigger className=\"w-[180px]\">\n          <SelectValue placeholder=\"Choose your animation\" />\n        </SelectTrigger>\n        <SelectContent className=\"relative z-40\">\n          {animations.map((animation) => (\n            <SelectItem\n              key={animation.value ?? animation.label}\n              value={animation.value ?? ''}\n            >\n              {animation.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n\n      <motion.h2\n        key={animation}\n        variants={animationVariants}\n        transition={{ duration: 0.3, delay: 0.2, ease: 'easeInOut' }}\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: false }}\n        className=\"text-4xl tracking-tight font-bold\"\n      >\n        Choose your animation, simple as that !!\n      </motion.h2>\n    </div>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/utils/use-animation-variants/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-use-animation-variants-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/shadcn-default-use-animation-variants-demo',
  },
  'shadcn-new-york-use-animation-variants-demo': {
    name: 'shadcn-new-york-use-animation-variants-demo',
    description:
      'Demo showing how to use use-animation-variants hook with shadcn-new-york style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'http://localhost:3000/r/use-animation-variants',
      'motion',
    ],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/utils/use-animation-variants/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/utils/use-animation-variants.tsx',
        content:
          "'use client';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  AnimationT,\n  useAnimationVariants,\n} from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\nimport { useState } from 'react';\n\nconst animations: { value: AnimationT; label: string }[] = [\n  { value: 'left', label: 'Slide from Left' },\n  { value: 'right', label: 'Slide from Right' },\n  { value: 'top', label: 'Slide from Top' },\n  { value: 'bottom', label: 'Slide from Bottom' },\n  { value: 'z', label: 'Scale' },\n  { value: 'blur', label: 'Blur' },\n  // { value: \"\", label: 'Opacity' },\n];\n\nexport const TextVerticalDemo = () => {\n  const [animation, setAnimation] = useState<AnimationT>();\n  const animationVariants = useAnimationVariants(animation);\n\n  return (\n    <div className=\"flex h-80 flex-col justify-between gap-8\">\n      <Select onValueChange={(value) => setAnimation(value as AnimationT)}>\n        <SelectTrigger className=\"w-[180px]\">\n          <SelectValue placeholder=\"Choose your animation\" />\n        </SelectTrigger>\n        <SelectContent className=\"relative z-40\">\n          {animations.map((animation) => (\n            <SelectItem\n              key={animation.value ?? animation.label}\n              value={animation.value ?? ''}\n            >\n              {animation.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n\n      <motion.h2\n        key={animation}\n        variants={animationVariants}\n        transition={{ duration: 0.3, delay: 0.2, ease: 'easeInOut' }}\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: false }}\n        className=\"text-4xl tracking-tight font-bold\"\n      >\n        Choose your animation, simple as that !!\n      </motion.h2>\n    </div>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/utils/use-animation-variants/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-use-animation-variants-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/shadcn-new-york-use-animation-variants-demo',
  },
  'default-text-stagger-inview': {
    name: 'default-text-stagger-inview',
    description:
      'Splitted text animation with staggered reveal triggered by view, You can easily customize by controlling the animation property (transform, opacity, blur) and the stagger value, and the transition with default style.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-stagger-inview/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-stagger-inview.tsx',
        content:
          "'use client';\n\nimport {\n  AnimationT,\n  useAnimationVariants,\n} from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { HTMLMotionProps, motion } from 'motion/react';\nimport * as React from 'react';\ninterface WordProps extends React.HTMLAttributes<HTMLSpanElement> {\n  animation?: AnimationT;\n}\ninterface TextStaggerProps extends HTMLMotionProps<'span'> {\n  stagger?: number;\n  animation?: AnimationT;\n}\nconst TRANSITION_CONFIG = { duration: 0.3, ease: [0.25, 0.46, 0.45, 0.94] };\n\nexport function Word({ children, animation, ...props }: WordProps) {\n  const characters = String(children).split('');\n  const animationVariants = useAnimationVariants(animation);\n  return (\n    <span className=\"inline-block text-nowrap\" {...props}>\n      {characters.map((char, index) => (\n        <motion.span\n          className=\"inline-block\"\n          variants={animationVariants}\n          key={`${char}-${index}`}\n          transition={TRANSITION_CONFIG}\n        >\n          {char}\n        </motion.span>\n      ))}\n    </span>\n  );\n}\n\nexport function TextStaggerInview({\n  children,\n  transition,\n  className,\n  stagger = 0.02,\n  animation,\n  ...props\n}: TextStaggerProps) {\n  const words = String(children).split(' ');\n  return (\n    <motion.span\n      initial=\"hidden\"\n      whileInView={'visible'}\n      viewport={{ once: true }}\n      className={className}\n      transition={{ staggerChildren: stagger, ...transition }}\n      {...props}\n    >\n      {words.map((word, index) => (\n        <React.Fragment key={`${word}-${index}`}>\n          <Word animation={animation}>{word}</Word>\n          {index < words.length - 1 && ' '}\n        </React.Fragment>\n      ))}\n    </motion.span>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-stagger-inview/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-text-stagger-inview';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-text-stagger-inview',
  },
  'shadcn-default-text-stagger-inview': {
    name: 'shadcn-default-text-stagger-inview',
    description:
      'Splitted text animation with staggered reveal triggered by view, You can easily customize by controlling the animation property (transform, opacity, blur) and the stagger value, and the transition with shadcn-default style.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-stagger-inview/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-stagger-inview.tsx',
        content:
          "'use client';\n\nimport {\n  AnimationT,\n  useAnimationVariants,\n} from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { HTMLMotionProps, motion } from 'motion/react';\nimport * as React from 'react';\ninterface WordProps extends React.HTMLAttributes<HTMLSpanElement> {\n  animation?: AnimationT;\n}\ninterface TextStaggerProps extends HTMLMotionProps<'span'> {\n  stagger?: number;\n  animation?: AnimationT;\n}\nconst TRANSITION_CONFIG = { duration: 0.3, ease: [0.25, 0.46, 0.45, 0.94] };\n\nexport function Word({ children, animation, ...props }: WordProps) {\n  const characters = String(children).split('');\n  const animationVariants = useAnimationVariants(animation);\n  return (\n    <span className=\"inline-block text-nowrap\" {...props}>\n      {characters.map((char, index) => (\n        <motion.span\n          className=\"inline-block\"\n          variants={animationVariants}\n          key={`${char}-${index}`}\n          transition={TRANSITION_CONFIG}\n        >\n          {char}\n        </motion.span>\n      ))}\n    </span>\n  );\n}\n\nexport function TextStaggerInview({\n  children,\n  transition,\n  className,\n  stagger = 0.02,\n  animation,\n  ...props\n}: TextStaggerProps) {\n  const words = String(children).split(' ');\n  return (\n    <motion.span\n      initial=\"hidden\"\n      whileInView={'visible'}\n      viewport={{ once: true }}\n      className={className}\n      transition={{ staggerChildren: stagger, ...transition }}\n      {...props}\n    >\n      {words.map((word, index) => (\n        <React.Fragment key={`${word}-${index}`}>\n          <Word animation={animation}>{word}</Word>\n          {index < words.length - 1 && ' '}\n        </React.Fragment>\n      ))}\n    </motion.span>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-stagger-inview/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-text-stagger-inview';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-text-stagger-inview',
  },
  'shadcn-new-york-text-stagger-inview': {
    name: 'shadcn-new-york-text-stagger-inview',
    description:
      'Splitted text animation with staggered reveal triggered by view, You can easily customize by controlling the animation property (transform, opacity, blur) and the stagger value, and the transition with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-stagger-inview/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-stagger-inview.tsx',
        content:
          "'use client';\n\nimport {\n  AnimationT,\n  useAnimationVariants,\n} from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { HTMLMotionProps, motion } from 'motion/react';\nimport * as React from 'react';\ninterface WordProps extends React.HTMLAttributes<HTMLSpanElement> {\n  animation?: AnimationT;\n}\ninterface TextStaggerProps extends HTMLMotionProps<'span'> {\n  stagger?: number;\n  animation?: AnimationT;\n}\nconst TRANSITION_CONFIG = { duration: 0.3, ease: [0.25, 0.46, 0.45, 0.94] };\n\nexport function Word({ children, animation, ...props }: WordProps) {\n  const characters = String(children).split('');\n  const animationVariants = useAnimationVariants(animation);\n  return (\n    <span className=\"inline-block text-nowrap\" {...props}>\n      {characters.map((char, index) => (\n        <motion.span\n          className=\"inline-block\"\n          variants={animationVariants}\n          key={`${char}-${index}`}\n          transition={TRANSITION_CONFIG}\n        >\n          {char}\n        </motion.span>\n      ))}\n    </span>\n  );\n}\n\nexport function TextStaggerInview({\n  children,\n  transition,\n  className,\n  stagger = 0.02,\n  animation,\n  ...props\n}: TextStaggerProps) {\n  const words = String(children).split(' ');\n  return (\n    <motion.span\n      initial=\"hidden\"\n      whileInView={'visible'}\n      viewport={{ once: true }}\n      className={className}\n      transition={{ staggerChildren: stagger, ...transition }}\n      {...props}\n    >\n      {words.map((word, index) => (\n        <React.Fragment key={`${word}-${index}`}>\n          <Word animation={animation}>{word}</Word>\n          {index < words.length - 1 && ' '}\n        </React.Fragment>\n      ))}\n    </motion.span>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-stagger-inview/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-text-stagger-inview';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-text-stagger-inview',
  },
  'default-text-vertical': {
    name: 'default-text-vertical',
    description:
      'Text with vertical display, Can be used as a title or a subtitle with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-vertical/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-vertical.tsx',
        content:
          "import { cn } from '@/lib/utils';\nimport * as React from 'react';\n\ntype ElementType = React.ElementType;\n\ninterface TextVerticalProps extends React.HTMLAttributes<HTMLElement> {\n  as?: ElementType;\n}\n\nexport function TextVertical({\n  as: Component = 'div',\n  className,\n  style,\n  ...props\n}: TextVerticalProps) {\n  return (\n    <Component\n      className={cn('size-min -rotate-180 whitespace-nowrap', className)}\n      style={{\n        writingMode: 'vertical-rl',\n        ...style,\n      }}\n      {...props}\n    />\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-vertical/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-text-vertical';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-text-vertical',
  },
  'shadcn-default-text-vertical': {
    name: 'shadcn-default-text-vertical',
    description:
      'Text with vertical display, Can be used as a title or a subtitle with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-vertical/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-vertical.tsx',
        content:
          "import { cn } from '@/lib/utils';\nimport * as React from 'react';\n\ntype ElementType = React.ElementType;\n\ninterface TextVerticalProps extends React.HTMLAttributes<HTMLElement> {\n  as?: ElementType;\n}\n\nexport function TextVertical({\n  as: Component = 'div',\n  className,\n  style,\n  ...props\n}: TextVerticalProps) {\n  return (\n    <Component\n      className={cn('size-min -rotate-180 whitespace-nowrap', className)}\n      style={{\n        writingMode: 'vertical-rl',\n        ...style,\n      }}\n      {...props}\n    />\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-vertical/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-text-vertical';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-text-vertical',
  },
  'shadcn-new-york-text-vertical': {
    name: 'shadcn-new-york-text-vertical',
    description:
      'Text with vertical display, Can be used as a title or a subtitle with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-vertical/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-vertical.tsx',
        content:
          "import { cn } from '@/lib/utils';\nimport * as React from 'react';\n\ntype ElementType = React.ElementType;\n\ninterface TextVerticalProps extends React.HTMLAttributes<HTMLElement> {\n  as?: ElementType;\n}\n\nexport function TextVertical({\n  as: Component = 'div',\n  className,\n  style,\n  ...props\n}: TextVerticalProps) {\n  return (\n    <Component\n      className={cn('size-min -rotate-180 whitespace-nowrap', className)}\n      style={{\n        writingMode: 'vertical-rl',\n        ...style,\n      }}\n      {...props}\n    />\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-vertical/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-text-vertical';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-text-vertical',
  },
  'default-use-animation-variants': {
    name: 'default-use-animation-variants',
    description:
      'Use animation variants hook, for your motion components, allows to animate component with transforms, opacity, and blur with default style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/use-animation-variants/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/utils/use-animation-variants.tsx',
        content:
          "import * as React from 'react';\n\nexport type AnimationT =\n  | 'left'\n  | 'right'\n  | 'top'\n  | 'bottom'\n  | 'z'\n  | 'blur'\n  | undefined;\n\nexport function useAnimationVariants(animation?: AnimationT) {\n  return React.useMemo(\n    () => ({\n      hidden: {\n        x: animation === 'left' ? '-100%' : animation === 'right' ? '100%' : 0,\n        y: animation === 'top' ? '-100%' : animation === 'bottom' ? '100%' : 0,\n        scale: animation === 'z' ? 0 : 1,\n        filter: animation === 'blur' ? 'blur(10px)' : 'blur(0px)',\n        opacity: 0,\n      },\n      visible: {\n        x: 0,\n        y: 0,\n        scale: 1,\n        filter: 'blur(0px)',\n        opacity: 1,\n      },\n    }),\n    [animation],\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/use-animation-variants/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-use-animation-variants';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-use-animation-variants',
  },
  'shadcn-default-use-animation-variants': {
    name: 'shadcn-default-use-animation-variants',
    description:
      'Use animation variants hook, for your motion components, allows to animate component with transforms, opacity, and blur with shadcn-default style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/use-animation-variants/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/utils/use-animation-variants.tsx',
        content:
          "import * as React from 'react';\n\nexport type AnimationT =\n  | 'left'\n  | 'right'\n  | 'top'\n  | 'bottom'\n  | 'z'\n  | 'blur'\n  | undefined;\n\nexport function useAnimationVariants(animation?: AnimationT) {\n  return React.useMemo(\n    () => ({\n      hidden: {\n        x: animation === 'left' ? '-100%' : animation === 'right' ? '100%' : 0,\n        y: animation === 'top' ? '-100%' : animation === 'bottom' ? '100%' : 0,\n        scale: animation === 'z' ? 0 : 1,\n        filter: animation === 'blur' ? 'blur(10px)' : 'blur(0px)',\n        opacity: 0,\n      },\n      visible: {\n        x: 0,\n        y: 0,\n        scale: 1,\n        filter: 'blur(0px)',\n        opacity: 1,\n      },\n    }),\n    [animation],\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/use-animation-variants/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-use-animation-variants';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-use-animation-variants',
  },
  'shadcn-new-york-use-animation-variants': {
    name: 'shadcn-new-york-use-animation-variants',
    description:
      'Use animation variants hook, for your motion components, allows to animate component with transforms, opacity, and blur with shadcn-new-york style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/use-animation-variants/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/utils/use-animation-variants.tsx',
        content:
          "import * as React from 'react';\n\nexport type AnimationT =\n  | 'left'\n  | 'right'\n  | 'top'\n  | 'bottom'\n  | 'z'\n  | 'blur'\n  | undefined;\n\nexport function useAnimationVariants(animation?: AnimationT) {\n  return React.useMemo(\n    () => ({\n      hidden: {\n        x: animation === 'left' ? '-100%' : animation === 'right' ? '100%' : 0,\n        y: animation === 'top' ? '-100%' : animation === 'bottom' ? '100%' : 0,\n        scale: animation === 'z' ? 0 : 1,\n        filter: animation === 'blur' ? 'blur(10px)' : 'blur(0px)',\n        opacity: 0,\n      },\n      visible: {\n        x: 0,\n        y: 0,\n        scale: 1,\n        filter: 'blur(0px)',\n        opacity: 1,\n      },\n    }),\n    [animation],\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/use-animation-variants/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-use-animation-variants';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-use-animation-variants',
  },
};
