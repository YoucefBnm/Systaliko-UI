/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from 'react';

export const index: Record<string, any> = {
  index: {
    name: 'index',
    description: '',
    type: 'registry:style',
    dependencies: [
      'tw-animate-css',
      'class-variance-authority',
      'lucide-react',
    ],
    devDependencies: undefined,
    registryDependencies: ['utils'],
    styles: undefined,
    files: [],
    component: null,
    command: 'https://animate-ui.com/r/index',
  },
  'default-animation-config': {
    name: 'default-animation-config',
    description: 'Animation configuration for animations with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/animation-config/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/animation-config.tsx',
        content:
          "import { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { AnimationT } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { createContext, useContext, useState } from 'react';\n\nconst animations: { value: AnimationT; label: string }[] = [\n  { value: 'left', label: 'Slide from Left' },\n  { value: 'right', label: 'Slide from Right' },\n  { value: 'top', label: 'Slide from Top' },\n  { value: 'bottom', label: 'Slide from Bottom' },\n  { value: 'z', label: 'Scale' },\n  { value: 'blur', label: 'Blur' },\n];\n\ntype AnimationConfigContextType = {\n  animation: AnimationT | undefined;\n  staggerValue: number;\n  setAnimation: (value: AnimationT) => void;\n  setStaggerValue: (value: number) => void;\n};\n\nconst AnimationConfigContext = createContext<\n  AnimationConfigContextType | undefined\n>(undefined);\n\nexport function AnimationConfigProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const [animation, setAnimation] = useState<AnimationT>();\n  const [staggerValue, setStaggerValue] = useState<number>(0.02);\n\n  return (\n    <AnimationConfigContext.Provider\n      value={{\n        animation,\n        staggerValue,\n        setAnimation,\n        setStaggerValue,\n      }}\n    >\n      {children}\n    </AnimationConfigContext.Provider>\n  );\n}\n\nexport function useSetAnimationConfig() {\n  const context = useContext(AnimationConfigContext);\n  if (!context) {\n    throw new Error(\n      'useSetAnimationConfig must be used within an AnimationConfigProvider',\n    );\n  }\n  return context;\n}\n\nexport function AnimationSelector() {\n  const { setAnimation } = useSetAnimationConfig();\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <label className=\"font-medium text-sm\" htmlFor=\"animation-select\">\n        Select Animation\n      </label>\n      <Select onValueChange={(value) => setAnimation(value as AnimationT)}>\n        <SelectTrigger id=\"animation-select\" className=\"w-[180px]\">\n          <SelectValue placeholder=\"Choose your animation\" />\n        </SelectTrigger>\n        <SelectContent className=\"relative z-40\">\n          {animations.map((animation) => (\n            <SelectItem\n              key={animation.value ?? animation.label}\n              value={animation.value ?? ''}\n            >\n              {animation.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}\n\nexport function StaggerInput() {\n  const { staggerValue, setStaggerValue } = useSetAnimationConfig();\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <label className=\"font-medium text-sm\" htmlFor=\"stagger-input\">\n        Set Stagger Value\n      </label>\n      <Input\n        id=\"stagger-input\"\n        className=\"max-w-fit\"\n        type=\"number\"\n        step={0.01}\n        min={0}\n        value={staggerValue}\n        onChange={(e) => setStaggerValue(Number(e.target.value))}\n      />\n    </div>\n  );\n}\n\nexport function AnimationConfig() {\n  return (\n    <div className=\"flex flex-col gap-4 items-start\">\n      <AnimationSelector />\n      <StaggerInput />\n    </div>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/animation-config/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-animation-config';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-animation-config',
  },
  'shadcn-default-animation-config': {
    name: 'shadcn-default-animation-config',
    description:
      'Animation configuration for animations with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/animation-config/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/animation-config.tsx',
        content:
          "import { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { AnimationT } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { createContext, useContext, useState } from 'react';\n\nconst animations: { value: AnimationT; label: string }[] = [\n  { value: 'left', label: 'Slide from Left' },\n  { value: 'right', label: 'Slide from Right' },\n  { value: 'top', label: 'Slide from Top' },\n  { value: 'bottom', label: 'Slide from Bottom' },\n  { value: 'z', label: 'Scale' },\n  { value: 'blur', label: 'Blur' },\n];\n\ntype AnimationConfigContextType = {\n  animation: AnimationT | undefined;\n  staggerValue: number;\n  setAnimation: (value: AnimationT) => void;\n  setStaggerValue: (value: number) => void;\n};\n\nconst AnimationConfigContext = createContext<\n  AnimationConfigContextType | undefined\n>(undefined);\n\nexport function AnimationConfigProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const [animation, setAnimation] = useState<AnimationT>();\n  const [staggerValue, setStaggerValue] = useState<number>(0.02);\n\n  return (\n    <AnimationConfigContext.Provider\n      value={{\n        animation,\n        staggerValue,\n        setAnimation,\n        setStaggerValue,\n      }}\n    >\n      {children}\n    </AnimationConfigContext.Provider>\n  );\n}\n\nexport function useSetAnimationConfig() {\n  const context = useContext(AnimationConfigContext);\n  if (!context) {\n    throw new Error(\n      'useSetAnimationConfig must be used within an AnimationConfigProvider',\n    );\n  }\n  return context;\n}\n\nexport function AnimationSelector() {\n  const { setAnimation } = useSetAnimationConfig();\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <label className=\"font-medium text-sm\" htmlFor=\"animation-select\">\n        Select Animation\n      </label>\n      <Select onValueChange={(value) => setAnimation(value as AnimationT)}>\n        <SelectTrigger id=\"animation-select\" className=\"w-[180px]\">\n          <SelectValue placeholder=\"Choose your animation\" />\n        </SelectTrigger>\n        <SelectContent className=\"relative z-40\">\n          {animations.map((animation) => (\n            <SelectItem\n              key={animation.value ?? animation.label}\n              value={animation.value ?? ''}\n            >\n              {animation.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}\n\nexport function StaggerInput() {\n  const { staggerValue, setStaggerValue } = useSetAnimationConfig();\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <label className=\"font-medium text-sm\" htmlFor=\"stagger-input\">\n        Set Stagger Value\n      </label>\n      <Input\n        id=\"stagger-input\"\n        className=\"max-w-fit\"\n        type=\"number\"\n        step={0.01}\n        min={0}\n        value={staggerValue}\n        onChange={(e) => setStaggerValue(Number(e.target.value))}\n      />\n    </div>\n  );\n}\n\nexport function AnimationConfig() {\n  return (\n    <div className=\"flex flex-col gap-4 items-start\">\n      <AnimationSelector />\n      <StaggerInput />\n    </div>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/animation-config/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-animation-config';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-animation-config',
  },
  'shadcn-new-york-animation-config': {
    name: 'shadcn-new-york-animation-config',
    description:
      'Animation configuration for animations with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/animation-config/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/animation-config.tsx',
        content:
          "import { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { AnimationT } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { createContext, useContext, useState } from 'react';\n\nconst animations: { value: AnimationT; label: string }[] = [\n  { value: 'left', label: 'Slide from Left' },\n  { value: 'right', label: 'Slide from Right' },\n  { value: 'top', label: 'Slide from Top' },\n  { value: 'bottom', label: 'Slide from Bottom' },\n  { value: 'z', label: 'Scale' },\n  { value: 'blur', label: 'Blur' },\n];\n\ntype AnimationConfigContextType = {\n  animation: AnimationT | undefined;\n  staggerValue: number;\n  setAnimation: (value: AnimationT) => void;\n  setStaggerValue: (value: number) => void;\n};\n\nconst AnimationConfigContext = createContext<\n  AnimationConfigContextType | undefined\n>(undefined);\n\nexport function AnimationConfigProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const [animation, setAnimation] = useState<AnimationT>();\n  const [staggerValue, setStaggerValue] = useState<number>(0.02);\n\n  return (\n    <AnimationConfigContext.Provider\n      value={{\n        animation,\n        staggerValue,\n        setAnimation,\n        setStaggerValue,\n      }}\n    >\n      {children}\n    </AnimationConfigContext.Provider>\n  );\n}\n\nexport function useSetAnimationConfig() {\n  const context = useContext(AnimationConfigContext);\n  if (!context) {\n    throw new Error(\n      'useSetAnimationConfig must be used within an AnimationConfigProvider',\n    );\n  }\n  return context;\n}\n\nexport function AnimationSelector() {\n  const { setAnimation } = useSetAnimationConfig();\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <label className=\"font-medium text-sm\" htmlFor=\"animation-select\">\n        Select Animation\n      </label>\n      <Select onValueChange={(value) => setAnimation(value as AnimationT)}>\n        <SelectTrigger id=\"animation-select\" className=\"w-[180px]\">\n          <SelectValue placeholder=\"Choose your animation\" />\n        </SelectTrigger>\n        <SelectContent className=\"relative z-40\">\n          {animations.map((animation) => (\n            <SelectItem\n              key={animation.value ?? animation.label}\n              value={animation.value ?? ''}\n            >\n              {animation.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}\n\nexport function StaggerInput() {\n  const { staggerValue, setStaggerValue } = useSetAnimationConfig();\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <label className=\"font-medium text-sm\" htmlFor=\"stagger-input\">\n        Set Stagger Value\n      </label>\n      <Input\n        id=\"stagger-input\"\n        className=\"max-w-fit\"\n        type=\"number\"\n        step={0.01}\n        min={0}\n        value={staggerValue}\n        onChange={(e) => setStaggerValue(Number(e.target.value))}\n      />\n    </div>\n  );\n}\n\nexport function AnimationConfig() {\n  return (\n    <div className=\"flex flex-col gap-4 items-start\">\n      <AnimationSelector />\n      <StaggerInput />\n    </div>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/animation-config/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-animation-config';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-animation-config',
  },
  'default-copy-button': {
    name: 'default-copy-button',
    description:
      'A button with a copy to clipboard animation with default style.',
    type: 'registry:ui',
    dependencies: ['motion', 'lucide-react', 'class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/buttons/copy/default/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/buttons/copy.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, HTMLMotionProps, motion } from 'motion/react';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center cursor-pointer rounded-md transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        muted: 'bg-muted text-muted-foreground',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n      },\n      size: {\n        default: 'size-8 rounded-lg [&_svg]:size-4',\n        sm: 'size-6 [&_svg]:size-3',\n        md: 'size-10 rounded-lg [&_svg]:size-5',\n        lg: 'size-12 rounded-xl [&_svg]:size-6',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\ntype CopyButtonProps = Omit<HTMLMotionProps<'button'>, 'children' | 'onCopy'> &\n  VariantProps<typeof buttonVariants> & {\n    content?: string;\n    delay?: number;\n    onCopy?: (content: string) => void;\n    isCopied?: boolean;\n    onCopyChange?: (isCopied: boolean) => void;\n  };\n\nfunction CopyButton({\n  content,\n  className,\n  size,\n  variant,\n  delay = 3000,\n  onClick,\n  onCopy,\n  isCopied,\n  onCopyChange,\n  ...props\n}: CopyButtonProps) {\n  const [localIsCopied, setLocalIsCopied] = React.useState(isCopied ?? false);\n  const Icon = localIsCopied ? CheckIcon : CopyIcon;\n\n  React.useEffect(() => {\n    setLocalIsCopied(isCopied ?? false);\n  }, [isCopied]);\n\n  const handleIsCopied = React.useCallback(\n    (isCopied: boolean) => {\n      setLocalIsCopied(isCopied);\n      onCopyChange?.(isCopied);\n    },\n    [onCopyChange],\n  );\n\n  const handleCopy = React.useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (isCopied) return;\n      if (content) {\n        navigator.clipboard\n          .writeText(content)\n          .then(() => {\n            handleIsCopied(true);\n            setTimeout(() => handleIsCopied(false), delay);\n            onCopy?.(content);\n          })\n          .catch((error) => {\n            console.error('Error copying command', error);\n          });\n      }\n      onClick?.(e);\n    },\n    [isCopied, content, delay, onClick, onCopy, handleIsCopied],\n  );\n\n  return (\n    <motion.button\n      data-slot=\"copy-button\"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      className={cn(buttonVariants({ variant, size }), className)}\n      onClick={handleCopy}\n      {...props}\n    >\n      <AnimatePresence mode=\"wait\">\n        <motion.span\n          key={localIsCopied ? 'check' : 'copy'}\n          data-slot=\"copy-button-icon\"\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          exit={{ scale: 0 }}\n          transition={{ duration: 0.15 }}\n        >\n          <Icon />\n        </motion.span>\n      </AnimatePresence>\n    </motion.button>\n  );\n}\n\nexport { CopyButton, buttonVariants, type CopyButtonProps };",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/buttons/copy/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-copy-button';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-copy-button',
  },
  'shadcn-default-copy-button': {
    name: 'shadcn-default-copy-button',
    description:
      'A button with a copy to clipboard animation with shadcn-default style.',
    type: 'registry:ui',
    dependencies: ['motion', 'lucide-react', 'class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/buttons/copy/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/buttons/copy.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, HTMLMotionProps, motion } from 'motion/react';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center cursor-pointer rounded-md transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        muted: 'bg-muted text-muted-foreground',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n      },\n      size: {\n        default: 'size-8 rounded-lg [&_svg]:size-4',\n        sm: 'size-6 [&_svg]:size-3',\n        md: 'size-10 rounded-lg [&_svg]:size-5',\n        lg: 'size-12 rounded-xl [&_svg]:size-6',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\ntype CopyButtonProps = Omit<HTMLMotionProps<'button'>, 'children' | 'onCopy'> &\n  VariantProps<typeof buttonVariants> & {\n    content?: string;\n    delay?: number;\n    onCopy?: (content: string) => void;\n    isCopied?: boolean;\n    onCopyChange?: (isCopied: boolean) => void;\n  };\n\nfunction CopyButton({\n  content,\n  className,\n  size,\n  variant,\n  delay = 3000,\n  onClick,\n  onCopy,\n  isCopied,\n  onCopyChange,\n  ...props\n}: CopyButtonProps) {\n  const [localIsCopied, setLocalIsCopied] = React.useState(isCopied ?? false);\n  const Icon = localIsCopied ? CheckIcon : CopyIcon;\n\n  React.useEffect(() => {\n    setLocalIsCopied(isCopied ?? false);\n  }, [isCopied]);\n\n  const handleIsCopied = React.useCallback(\n    (isCopied: boolean) => {\n      setLocalIsCopied(isCopied);\n      onCopyChange?.(isCopied);\n    },\n    [onCopyChange],\n  );\n\n  const handleCopy = React.useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (isCopied) return;\n      if (content) {\n        navigator.clipboard\n          .writeText(content)\n          .then(() => {\n            handleIsCopied(true);\n            setTimeout(() => handleIsCopied(false), delay);\n            onCopy?.(content);\n          })\n          .catch((error) => {\n            console.error('Error copying command', error);\n          });\n      }\n      onClick?.(e);\n    },\n    [isCopied, content, delay, onClick, onCopy, handleIsCopied],\n  );\n\n  return (\n    <motion.button\n      data-slot=\"copy-button\"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      className={cn(buttonVariants({ variant, size }), className)}\n      onClick={handleCopy}\n      {...props}\n    >\n      <AnimatePresence mode=\"wait\">\n        <motion.span\n          key={localIsCopied ? 'check' : 'copy'}\n          data-slot=\"copy-button-icon\"\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          exit={{ scale: 0 }}\n          transition={{ duration: 0.15 }}\n        >\n          <Icon />\n        </motion.span>\n      </AnimatePresence>\n    </motion.button>\n  );\n}\n\nexport { CopyButton, buttonVariants, type CopyButtonProps };",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/buttons/copy/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-copy-button';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-copy-button',
  },
  'shadcn-new-york-copy-button': {
    name: 'shadcn-new-york-copy-button',
    description:
      'A button with a copy to clipboard animation with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: ['motion', 'lucide-react', 'class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/buttons/copy/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/buttons/copy.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, HTMLMotionProps, motion } from 'motion/react';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center cursor-pointer rounded-md transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        muted: 'bg-muted text-muted-foreground',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n      },\n      size: {\n        default: 'size-8 rounded-lg [&_svg]:size-4',\n        sm: 'size-6 [&_svg]:size-3',\n        md: 'size-10 rounded-lg [&_svg]:size-5',\n        lg: 'size-12 rounded-xl [&_svg]:size-6',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\ntype CopyButtonProps = Omit<HTMLMotionProps<'button'>, 'children' | 'onCopy'> &\n  VariantProps<typeof buttonVariants> & {\n    content?: string;\n    delay?: number;\n    onCopy?: (content: string) => void;\n    isCopied?: boolean;\n    onCopyChange?: (isCopied: boolean) => void;\n  };\n\nfunction CopyButton({\n  content,\n  className,\n  size,\n  variant,\n  delay = 3000,\n  onClick,\n  onCopy,\n  isCopied,\n  onCopyChange,\n  ...props\n}: CopyButtonProps) {\n  const [localIsCopied, setLocalIsCopied] = React.useState(isCopied ?? false);\n  const Icon = localIsCopied ? CheckIcon : CopyIcon;\n\n  React.useEffect(() => {\n    setLocalIsCopied(isCopied ?? false);\n  }, [isCopied]);\n\n  const handleIsCopied = React.useCallback(\n    (isCopied: boolean) => {\n      setLocalIsCopied(isCopied);\n      onCopyChange?.(isCopied);\n    },\n    [onCopyChange],\n  );\n\n  const handleCopy = React.useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (isCopied) return;\n      if (content) {\n        navigator.clipboard\n          .writeText(content)\n          .then(() => {\n            handleIsCopied(true);\n            setTimeout(() => handleIsCopied(false), delay);\n            onCopy?.(content);\n          })\n          .catch((error) => {\n            console.error('Error copying command', error);\n          });\n      }\n      onClick?.(e);\n    },\n    [isCopied, content, delay, onClick, onCopy, handleIsCopied],\n  );\n\n  return (\n    <motion.button\n      data-slot=\"copy-button\"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      className={cn(buttonVariants({ variant, size }), className)}\n      onClick={handleCopy}\n      {...props}\n    >\n      <AnimatePresence mode=\"wait\">\n        <motion.span\n          key={localIsCopied ? 'check' : 'copy'}\n          data-slot=\"copy-button-icon\"\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          exit={{ scale: 0 }}\n          transition={{ duration: 0.15 }}\n        >\n          <Icon />\n        </motion.span>\n      </AnimatePresence>\n    </motion.button>\n  );\n}\n\nexport { CopyButton, buttonVariants, type CopyButtonProps };",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/buttons/copy/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-copy-button';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-copy-button',
  },
  'default-text-stagger-inview-demo': {
    name: 'default-text-stagger-inview-demo',
    description:
      'Demo showing a split text with stagger animation with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-stagger-inview'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-stagger-inview/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-stagger-inview.tsx',
        content:
          '\'use client\';\n\nimport {\n  AnimationConfigProvider,\n  AnimationSelector,\n  StaggerInput,\n  useSetAnimationConfig,\n} from \'@/components/systaliko-ui/animation-config\';\nimport { TextStaggerInview } from \'@/components/systaliko-ui/text/text-stagger-inview\';\n\nexport const TextStaggerInviewDemo = () => {\n  return (\n    <AnimationConfigProvider>\n      <TextStaggerInviewDemoContent />\n    </AnimationConfigProvider>\n  );\n};\n\nconst TextStaggerInviewDemoContent = () => {\n  const { animation, staggerValue } = useSetAnimationConfig();\n  return (\n    <div className="flex h-80 flex-col justify-between gap-8">\n      <div className="flex flex-col gap-4 items-start">\n        <AnimationSelector />\n        <StaggerInput />\n      </div>\n      <TextStaggerInview\n        key={`${animation}-${staggerValue}`}\n        animation={animation}\n        className="overflow-hidden text-4xl tracking-tight font-bold"\n        stagger={staggerValue}\n      >\n        Stagger Text Inview Demo\n      </TextStaggerInview>\n    </div>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-stagger-inview/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-text-stagger-inview-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-text-stagger-inview-demo',
  },
  'shadcn-default-text-stagger-inview-demo': {
    name: 'shadcn-default-text-stagger-inview-demo',
    description:
      'Demo showing a split text with stagger animation with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-stagger-inview'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-stagger-inview/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-stagger-inview.tsx',
        content:
          '\'use client\';\n\nimport {\n  AnimationConfigProvider,\n  AnimationSelector,\n  StaggerInput,\n  useSetAnimationConfig,\n} from \'@/components/systaliko-ui/animation-config\';\nimport { TextStaggerInview } from \'@/components/systaliko-ui/text/text-stagger-inview\';\n\nexport const TextStaggerInviewDemo = () => {\n  return (\n    <AnimationConfigProvider>\n      <TextStaggerInviewDemoContent />\n    </AnimationConfigProvider>\n  );\n};\n\nconst TextStaggerInviewDemoContent = () => {\n  const { animation, staggerValue } = useSetAnimationConfig();\n  return (\n    <div className="flex h-80 flex-col justify-between gap-8">\n      <div className="flex flex-col gap-4 items-start">\n        <AnimationSelector />\n        <StaggerInput />\n      </div>\n      <TextStaggerInview\n        key={`${animation}-${staggerValue}`}\n        animation={animation}\n        className="overflow-hidden text-4xl tracking-tight font-bold"\n        stagger={staggerValue}\n      >\n        Stagger Text Inview Demo\n      </TextStaggerInview>\n    </div>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-stagger-inview/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-text-stagger-inview-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-text-stagger-inview-demo',
  },
  'shadcn-new-york-text-stagger-inview-demo': {
    name: 'shadcn-new-york-text-stagger-inview-demo',
    description:
      'Demo showing a split text with stagger animation with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-stagger-inview'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-stagger-inview/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-stagger-inview.tsx',
        content:
          '\'use client\';\n\nimport {\n  AnimationConfigProvider,\n  AnimationSelector,\n  StaggerInput,\n  useSetAnimationConfig,\n} from \'@/components/systaliko-ui/animation-config\';\nimport { TextStaggerInview } from \'@/components/systaliko-ui/text/text-stagger-inview\';\n\nexport const TextStaggerInviewDemo = () => {\n  return (\n    <AnimationConfigProvider>\n      <TextStaggerInviewDemoContent />\n    </AnimationConfigProvider>\n  );\n};\n\nconst TextStaggerInviewDemoContent = () => {\n  const { animation, staggerValue } = useSetAnimationConfig();\n  return (\n    <div className="flex h-80 flex-col justify-between gap-8">\n      <div className="flex flex-col gap-4 items-start">\n        <AnimationSelector />\n        <StaggerInput />\n      </div>\n      <TextStaggerInview\n        key={`${animation}-${staggerValue}`}\n        animation={animation}\n        className="overflow-hidden text-4xl tracking-tight font-bold"\n        stagger={staggerValue}\n      >\n        Stagger Text Inview Demo\n      </TextStaggerInview>\n    </div>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-stagger-inview/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-text-stagger-inview-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/shadcn-new-york-text-stagger-inview-demo',
  },
  'default-text-vertical-demo': {
    name: 'default-text-vertical-demo',
    description: 'Demo showing a vertical text with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-vertical'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-vertical/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-vertical.tsx',
        content:
          'import { TextVertical } from \'@/components/systaliko-ui/text/text-vertical\';\n\nexport const TextVerticalDemo = () => {\n  return (\n    <TextVertical\n      className="uppercase text-2xl tracking-wider font-bold"\n      as="h4"\n    >\n      our summer collection\n    </TextVertical>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-vertical/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-text-vertical-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-text-vertical-demo',
  },
  'shadcn-default-text-vertical-demo': {
    name: 'shadcn-default-text-vertical-demo',
    description: 'Demo showing a vertical text with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-vertical'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-vertical/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-vertical.tsx',
        content:
          'import { TextVertical } from \'@/components/systaliko-ui/text/text-vertical\';\n\nexport const TextVerticalDemo = () => {\n  return (\n    <TextVertical\n      className="uppercase text-2xl tracking-wider font-bold"\n      as="h4"\n    >\n      our summer collection\n    </TextVertical>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-vertical/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-text-vertical-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-text-vertical-demo',
  },
  'shadcn-new-york-text-vertical-demo': {
    name: 'shadcn-new-york-text-vertical-demo',
    description: 'Demo showing a vertical text with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['http://localhost:3000/r/text-vertical'],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/text/text-vertical/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/text/text-vertical.tsx',
        content:
          'import { TextVertical } from \'@/components/systaliko-ui/text/text-vertical\';\n\nexport const TextVerticalDemo = () => {\n  return (\n    <TextVertical\n      className="uppercase text-2xl tracking-wider font-bold"\n      as="h4"\n    >\n      our summer collection\n    </TextVertical>\n  );\n};',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/text/text-vertical/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-text-vertical-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-text-vertical-demo',
  },
  'default-use-animation-variants-demo': {
    name: 'default-use-animation-variants-demo',
    description:
      'Demo showing how to use use-animation-variants hook with default style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'http://localhost:3000/r/use-animation-variants',
      'motion',
    ],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/utils/use-animation-variants/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/utils/use-animation-variants.tsx',
        content:
          "'use client';\n\nimport {\n  AnimationConfigProvider,\n  AnimationSelector,\n  useSetAnimationConfig,\n} from '@/components/systaliko-ui/animation-config';\nimport { useAnimationVariants } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\n\nexport const AnimationVariantsDemo = () => {\n  return (\n    <AnimationConfigProvider>\n      <AnimationVariantsDemoContent />\n    </AnimationConfigProvider>\n  );\n};\n\nconst AnimationVariantsDemoContent = () => {\n  const { animation } = useSetAnimationConfig();\n  const animationVariants = useAnimationVariants(animation);\n\n  return (\n    <div className=\"flex h-80 flex-col justify-between gap-8\">\n      <AnimationSelector />\n\n      <motion.h2\n        key={animation}\n        variants={animationVariants}\n        transition={{ duration: 0.3, delay: 0.2, ease: 'easeInOut' }}\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: false }}\n        className=\"text-4xl tracking-tight font-bold\"\n      >\n        Animation variants demo\n      </motion.h2>\n    </div>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/utils/use-animation-variants/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-use-animation-variants-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-use-animation-variants-demo',
  },
  'shadcn-default-use-animation-variants-demo': {
    name: 'shadcn-default-use-animation-variants-demo',
    description:
      'Demo showing how to use use-animation-variants hook with shadcn-default style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'http://localhost:3000/r/use-animation-variants',
      'motion',
    ],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/utils/use-animation-variants/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/utils/use-animation-variants.tsx',
        content:
          "'use client';\n\nimport {\n  AnimationConfigProvider,\n  AnimationSelector,\n  useSetAnimationConfig,\n} from '@/components/systaliko-ui/animation-config';\nimport { useAnimationVariants } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\n\nexport const AnimationVariantsDemo = () => {\n  return (\n    <AnimationConfigProvider>\n      <AnimationVariantsDemoContent />\n    </AnimationConfigProvider>\n  );\n};\n\nconst AnimationVariantsDemoContent = () => {\n  const { animation } = useSetAnimationConfig();\n  const animationVariants = useAnimationVariants(animation);\n\n  return (\n    <div className=\"flex h-80 flex-col justify-between gap-8\">\n      <AnimationSelector />\n\n      <motion.h2\n        key={animation}\n        variants={animationVariants}\n        transition={{ duration: 0.3, delay: 0.2, ease: 'easeInOut' }}\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: false }}\n        className=\"text-4xl tracking-tight font-bold\"\n      >\n        Animation variants demo\n      </motion.h2>\n    </div>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/utils/use-animation-variants/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-use-animation-variants-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/shadcn-default-use-animation-variants-demo',
  },
  'shadcn-new-york-use-animation-variants-demo': {
    name: 'shadcn-new-york-use-animation-variants-demo',
    description:
      'Demo showing how to use use-animation-variants hook with shadcn-new-york style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'http://localhost:3000/r/use-animation-variants',
      'motion',
    ],
    styles: undefined,
    files: [
      {
        path: '__registry__/demo/utils/use-animation-variants/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/demo/utils/use-animation-variants.tsx',
        content:
          "'use client';\n\nimport {\n  AnimationConfigProvider,\n  AnimationSelector,\n  useSetAnimationConfig,\n} from '@/components/systaliko-ui/animation-config';\nimport { useAnimationVariants } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\n\nexport const AnimationVariantsDemo = () => {\n  return (\n    <AnimationConfigProvider>\n      <AnimationVariantsDemoContent />\n    </AnimationConfigProvider>\n  );\n};\n\nconst AnimationVariantsDemoContent = () => {\n  const { animation } = useSetAnimationConfig();\n  const animationVariants = useAnimationVariants(animation);\n\n  return (\n    <div className=\"flex h-80 flex-col justify-between gap-8\">\n      <AnimationSelector />\n\n      <motion.h2\n        key={animation}\n        variants={animationVariants}\n        transition={{ duration: 0.3, delay: 0.2, ease: 'easeInOut' }}\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: false }}\n        className=\"text-4xl tracking-tight font-bold\"\n      >\n        Animation variants demo\n      </motion.h2>\n    </div>\n  );\n};",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/demo/utils/use-animation-variants/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-use-animation-variants-demo';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/shadcn-new-york-use-animation-variants-demo',
  },
  'default-text-stagger-hover': {
    name: 'default-text-stagger-hover',
    description:
      'Splitted text animation with staggered effect triggered by hover gesture, You can easily customize by controlling the animation property (transform, opacity, blur) and the stagger value, and the transition with default style.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-stagger-hover/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-stagger-hover.tsx',
        content: '',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-stagger-hover/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-text-stagger-hover';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-text-stagger-hover',
  },
  'shadcn-default-text-stagger-hover': {
    name: 'shadcn-default-text-stagger-hover',
    description:
      'Splitted text animation with staggered effect triggered by hover gesture, You can easily customize by controlling the animation property (transform, opacity, blur) and the stagger value, and the transition with shadcn-default style.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-stagger-hover/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-stagger-hover.tsx',
        content: '',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-stagger-hover/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-text-stagger-hover';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-text-stagger-hover',
  },
  'shadcn-new-york-text-stagger-hover': {
    name: 'shadcn-new-york-text-stagger-hover',
    description:
      'Splitted text animation with staggered effect triggered by hover gesture, You can easily customize by controlling the animation property (transform, opacity, blur) and the stagger value, and the transition with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-stagger-hover/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-stagger-hover.tsx',
        content: '',
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-stagger-hover/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-text-stagger-hover';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-text-stagger-hover',
  },
  'default-text-stagger-inview': {
    name: 'default-text-stagger-inview',
    description:
      'Splitted text animation with staggered reveal triggered by view, You can easily customize by controlling the animation property (transform, opacity, blur) and the stagger value, and the transition with default style.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-stagger-inview/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-stagger-inview.tsx',
        content:
          "'use client';\nimport * as React from 'react';\n\nimport { AnimationT } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { HTMLMotionProps, motion } from 'motion/react';\nimport { WordStagger } from '@/components/systaliko-ui/text/word-stagger';\n\ninterface TextStaggerProps extends HTMLMotionProps<'span'> {\n  stagger?: number;\n  animation?: AnimationT;\n}\n\nexport function TextStaggerInview({\n  children,\n  transition,\n  className,\n  stagger = 0.02,\n  animation,\n  ...props\n}: TextStaggerProps) {\n  const words = String(children).split(' ');\n  return (\n    <motion.span\n      initial=\"hidden\"\n      whileInView={'visible'}\n      viewport={{ once: true }}\n      className={className}\n      transition={{ staggerChildren: stagger, ...transition }}\n      {...props}\n    >\n      {words.map((word, index) => (\n        <React.Fragment key={`${word}-${index}`}>\n          <WordStagger animation={animation}>{word}</WordStagger>\n          {index < words.length - 1 && ' '}\n        </React.Fragment>\n      ))}\n    </motion.span>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-stagger-inview/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-text-stagger-inview';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-text-stagger-inview',
  },
  'shadcn-default-text-stagger-inview': {
    name: 'shadcn-default-text-stagger-inview',
    description:
      'Splitted text animation with staggered reveal triggered by view, You can easily customize by controlling the animation property (transform, opacity, blur) and the stagger value, and the transition with shadcn-default style.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-stagger-inview/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-stagger-inview.tsx',
        content:
          "'use client';\nimport * as React from 'react';\n\nimport { AnimationT } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { HTMLMotionProps, motion } from 'motion/react';\nimport { WordStagger } from '@/components/systaliko-ui/text/word-stagger';\n\ninterface TextStaggerProps extends HTMLMotionProps<'span'> {\n  stagger?: number;\n  animation?: AnimationT;\n}\n\nexport function TextStaggerInview({\n  children,\n  transition,\n  className,\n  stagger = 0.02,\n  animation,\n  ...props\n}: TextStaggerProps) {\n  const words = String(children).split(' ');\n  return (\n    <motion.span\n      initial=\"hidden\"\n      whileInView={'visible'}\n      viewport={{ once: true }}\n      className={className}\n      transition={{ staggerChildren: stagger, ...transition }}\n      {...props}\n    >\n      {words.map((word, index) => (\n        <React.Fragment key={`${word}-${index}`}>\n          <WordStagger animation={animation}>{word}</WordStagger>\n          {index < words.length - 1 && ' '}\n        </React.Fragment>\n      ))}\n    </motion.span>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-stagger-inview/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-text-stagger-inview';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-text-stagger-inview',
  },
  'shadcn-new-york-text-stagger-inview': {
    name: 'shadcn-new-york-text-stagger-inview',
    description:
      'Splitted text animation with staggered reveal triggered by view, You can easily customize by controlling the animation property (transform, opacity, blur) and the stagger value, and the transition with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-stagger-inview/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-stagger-inview.tsx',
        content:
          "'use client';\nimport * as React from 'react';\n\nimport { AnimationT } from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { HTMLMotionProps, motion } from 'motion/react';\nimport { WordStagger } from '@/components/systaliko-ui/text/word-stagger';\n\ninterface TextStaggerProps extends HTMLMotionProps<'span'> {\n  stagger?: number;\n  animation?: AnimationT;\n}\n\nexport function TextStaggerInview({\n  children,\n  transition,\n  className,\n  stagger = 0.02,\n  animation,\n  ...props\n}: TextStaggerProps) {\n  const words = String(children).split(' ');\n  return (\n    <motion.span\n      initial=\"hidden\"\n      whileInView={'visible'}\n      viewport={{ once: true }}\n      className={className}\n      transition={{ staggerChildren: stagger, ...transition }}\n      {...props}\n    >\n      {words.map((word, index) => (\n        <React.Fragment key={`${word}-${index}`}>\n          <WordStagger animation={animation}>{word}</WordStagger>\n          {index < words.length - 1 && ' '}\n        </React.Fragment>\n      ))}\n    </motion.span>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-stagger-inview/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-text-stagger-inview';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-text-stagger-inview',
  },
  'default-text-vertical': {
    name: 'default-text-vertical',
    description:
      'Text with vertical display, Can be used as a title or a subtitle with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-vertical/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-vertical.tsx',
        content:
          "import { cn } from '@/lib/utils';\nimport * as React from 'react';\n\ntype ElementType = React.ElementType;\n\ninterface TextVerticalProps extends React.HTMLAttributes<HTMLElement> {\n  as?: ElementType;\n}\n\nexport function TextVertical({\n  as: Component = 'div',\n  className,\n  style,\n  ...props\n}: TextVerticalProps) {\n  return (\n    <Component\n      className={cn('size-min -rotate-180 whitespace-nowrap', className)}\n      style={{\n        writingMode: 'vertical-rl',\n        ...style,\n      }}\n      {...props}\n    />\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-vertical/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-text-vertical';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-text-vertical',
  },
  'shadcn-default-text-vertical': {
    name: 'shadcn-default-text-vertical',
    description:
      'Text with vertical display, Can be used as a title or a subtitle with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-vertical/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-vertical.tsx',
        content:
          "import { cn } from '@/lib/utils';\nimport * as React from 'react';\n\ntype ElementType = React.ElementType;\n\ninterface TextVerticalProps extends React.HTMLAttributes<HTMLElement> {\n  as?: ElementType;\n}\n\nexport function TextVertical({\n  as: Component = 'div',\n  className,\n  style,\n  ...props\n}: TextVerticalProps) {\n  return (\n    <Component\n      className={cn('size-min -rotate-180 whitespace-nowrap', className)}\n      style={{\n        writingMode: 'vertical-rl',\n        ...style,\n      }}\n      {...props}\n    />\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-vertical/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-text-vertical';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-text-vertical',
  },
  'shadcn-new-york-text-vertical': {
    name: 'shadcn-new-york-text-vertical',
    description:
      'Text with vertical display, Can be used as a title or a subtitle with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/text-vertical/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/text-vertical.tsx',
        content:
          "import { cn } from '@/lib/utils';\nimport * as React from 'react';\n\ntype ElementType = React.ElementType;\n\ninterface TextVerticalProps extends React.HTMLAttributes<HTMLElement> {\n  as?: ElementType;\n}\n\nexport function TextVertical({\n  as: Component = 'div',\n  className,\n  style,\n  ...props\n}: TextVerticalProps) {\n  return (\n    <Component\n      className={cn('size-min -rotate-180 whitespace-nowrap', className)}\n      style={{\n        writingMode: 'vertical-rl',\n        ...style,\n      }}\n      {...props}\n    />\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/text-vertical/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-text-vertical';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-text-vertical',
  },
  'default-word-stagger': {
    name: 'default-word-stagger',
    description:
      'Alternative to text-stagger-inview and text-stagger-hover, in case you have one word or you want more custom text animations, use this component, it is used in the same way as text-stagger-inview and text-stagger-hover with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/word-stagger/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/word-stagger.tsx',
        content:
          "import { cn } from '@/lib/utils';\nimport { GsapTransitions } from '@/components/systaliko-ui/utils/gsap-transitions';\nimport {\n  AnimationT,\n  useAnimationVariants,\n} from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\n\ninterface WordProps extends React.HTMLAttributes<HTMLSpanElement> {\n  animation?: AnimationT;\n}\n\nexport function WordStagger({\n  children,\n  animation,\n  className,\n  ...props\n}: WordProps) {\n  const characters = String(children).split('');\n  const animationVariants = useAnimationVariants(animation);\n  return (\n    <span className={cn('inline-block text-nowrap', className)} {...props}>\n      {characters.map((char, index) => (\n        <motion.span\n          className=\"inline-block\"\n          variants={animationVariants}\n          key={`${char}-${index}`}\n          transition={{\n            duration: 0.3,\n            ease: GsapTransitions['power1.out'],\n          }}\n        >\n          {char}\n        </motion.span>\n      ))}\n    </span>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/word-stagger/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-word-stagger';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-word-stagger',
  },
  'shadcn-default-word-stagger': {
    name: 'shadcn-default-word-stagger',
    description:
      'Alternative to text-stagger-inview and text-stagger-hover, in case you have one word or you want more custom text animations, use this component, it is used in the same way as text-stagger-inview and text-stagger-hover with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/word-stagger/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/word-stagger.tsx',
        content:
          "import { cn } from '@/lib/utils';\nimport { GsapTransitions } from '@/components/systaliko-ui/utils/gsap-transitions';\nimport {\n  AnimationT,\n  useAnimationVariants,\n} from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\n\ninterface WordProps extends React.HTMLAttributes<HTMLSpanElement> {\n  animation?: AnimationT;\n}\n\nexport function WordStagger({\n  children,\n  animation,\n  className,\n  ...props\n}: WordProps) {\n  const characters = String(children).split('');\n  const animationVariants = useAnimationVariants(animation);\n  return (\n    <span className={cn('inline-block text-nowrap', className)} {...props}>\n      {characters.map((char, index) => (\n        <motion.span\n          className=\"inline-block\"\n          variants={animationVariants}\n          key={`${char}-${index}`}\n          transition={{\n            duration: 0.3,\n            ease: GsapTransitions['power1.out'],\n          }}\n        >\n          {char}\n        </motion.span>\n      ))}\n    </span>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/word-stagger/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-word-stagger';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-word-stagger',
  },
  'shadcn-new-york-word-stagger': {
    name: 'shadcn-new-york-word-stagger',
    description:
      'Alternative to text-stagger-inview and text-stagger-hover, in case you have one word or you want more custom text animations, use this component, it is used in the same way as text-stagger-inview and text-stagger-hover with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/text/word-stagger/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/text/word-stagger.tsx',
        content:
          "import { cn } from '@/lib/utils';\nimport { GsapTransitions } from '@/components/systaliko-ui/utils/gsap-transitions';\nimport {\n  AnimationT,\n  useAnimationVariants,\n} from '@/components/systaliko-ui/utils/use-animation-variants';\nimport { motion } from 'motion/react';\n\ninterface WordProps extends React.HTMLAttributes<HTMLSpanElement> {\n  animation?: AnimationT;\n}\n\nexport function WordStagger({\n  children,\n  animation,\n  className,\n  ...props\n}: WordProps) {\n  const characters = String(children).split('');\n  const animationVariants = useAnimationVariants(animation);\n  return (\n    <span className={cn('inline-block text-nowrap', className)} {...props}>\n      {characters.map((char, index) => (\n        <motion.span\n          className=\"inline-block\"\n          variants={animationVariants}\n          key={`${char}-${index}`}\n          transition={{\n            duration: 0.3,\n            ease: GsapTransitions['power1.out'],\n          }}\n        >\n          {char}\n        </motion.span>\n      ))}\n    </span>\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/text/word-stagger/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-word-stagger';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-word-stagger',
  },
  'default-gsap-transitions': {
    name: 'default-gsap-transitions',
    description:
      'GSAP custom easing functions, get the smooth gsap transitions withou using the whole library with default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/gsap-transitions/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/utils/gsap-transitions.tsx',
        content:
          "export const GsapTransitions = {\n  'power1.in': [0.55, 0.085, 0.68, 0.53],\n  'power1.out': [0.25, 0.46, 0.45, 0.94],\n  'power1.inOut': [0.455, 0.03, 0.515, 0.955],\n\n  'power2.in': [0.55, 0.085, 0.68, 0.53],\n  'power2.out': [0.25, 0.46, 0.45, 0.94],\n  'power2.inOut': [0.455, 0.03, 0.515, 0.955],\n\n  'power3.in': [0.55, 0.055, 0.675, 0.19],\n  'power3.out': [0.215, 0.61, 0.355, 1],\n  'power3.inOut': [0.645, 0.045, 0.355, 1],\n\n  'power4.in': [0.895, 0.03, 0.685, 0.22],\n  'power4.out': [0.165, 0.84, 0.44, 1],\n  'power4.inOut': [0.77, 0, 0.175, 1],\n\n  'sine.in': [0.47, 0, 0.745, 0.715],\n  'sine.out': [0.39, 0.575, 0.565, 1],\n  'sine.inOut': [0.445, 0.05, 0.55, 0.95],\n\n  'expo.in': [0.95, 0.05, 0.795, 0.035],\n  'expo.out': [0.19, 1, 0.22, 1],\n  'expo.inOut': [1, 0, 0, 1],\n\n  'circ.in': [0.6, 0.04, 0.98, 0.335],\n  'circ.out': [0.075, 0.82, 0.165, 1],\n  'circ.inOut': [0.785, 0.135, 0.15, 0.86],\n\n  'back.in': [0.6, -0.28, 0.735, 0.045],\n  'back.out': [0.175, 0.885, 0.32, 1.275],\n  'back.inOut': [0.68, -0.55, 0.265, 1.55],\n} as const;",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/gsap-transitions/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-gsap-transitions';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-gsap-transitions',
  },
  'shadcn-default-gsap-transitions': {
    name: 'shadcn-default-gsap-transitions',
    description:
      'GSAP custom easing functions, get the smooth gsap transitions withou using the whole library with shadcn-default style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/gsap-transitions/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/utils/gsap-transitions.tsx',
        content:
          "export const GsapTransitions = {\n  'power1.in': [0.55, 0.085, 0.68, 0.53],\n  'power1.out': [0.25, 0.46, 0.45, 0.94],\n  'power1.inOut': [0.455, 0.03, 0.515, 0.955],\n\n  'power2.in': [0.55, 0.085, 0.68, 0.53],\n  'power2.out': [0.25, 0.46, 0.45, 0.94],\n  'power2.inOut': [0.455, 0.03, 0.515, 0.955],\n\n  'power3.in': [0.55, 0.055, 0.675, 0.19],\n  'power3.out': [0.215, 0.61, 0.355, 1],\n  'power3.inOut': [0.645, 0.045, 0.355, 1],\n\n  'power4.in': [0.895, 0.03, 0.685, 0.22],\n  'power4.out': [0.165, 0.84, 0.44, 1],\n  'power4.inOut': [0.77, 0, 0.175, 1],\n\n  'sine.in': [0.47, 0, 0.745, 0.715],\n  'sine.out': [0.39, 0.575, 0.565, 1],\n  'sine.inOut': [0.445, 0.05, 0.55, 0.95],\n\n  'expo.in': [0.95, 0.05, 0.795, 0.035],\n  'expo.out': [0.19, 1, 0.22, 1],\n  'expo.inOut': [1, 0, 0, 1],\n\n  'circ.in': [0.6, 0.04, 0.98, 0.335],\n  'circ.out': [0.075, 0.82, 0.165, 1],\n  'circ.inOut': [0.785, 0.135, 0.15, 0.86],\n\n  'back.in': [0.6, -0.28, 0.735, 0.045],\n  'back.out': [0.175, 0.885, 0.32, 1.275],\n  'back.inOut': [0.68, -0.55, 0.265, 1.55],\n} as const;",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/gsap-transitions/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-gsap-transitions';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-gsap-transitions',
  },
  'shadcn-new-york-gsap-transitions': {
    name: 'shadcn-new-york-gsap-transitions',
    description:
      'GSAP custom easing functions, get the smooth gsap transitions withou using the whole library with shadcn-new-york style.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/gsap-transitions/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/utils/gsap-transitions.tsx',
        content:
          "export const GsapTransitions = {\n  'power1.in': [0.55, 0.085, 0.68, 0.53],\n  'power1.out': [0.25, 0.46, 0.45, 0.94],\n  'power1.inOut': [0.455, 0.03, 0.515, 0.955],\n\n  'power2.in': [0.55, 0.085, 0.68, 0.53],\n  'power2.out': [0.25, 0.46, 0.45, 0.94],\n  'power2.inOut': [0.455, 0.03, 0.515, 0.955],\n\n  'power3.in': [0.55, 0.055, 0.675, 0.19],\n  'power3.out': [0.215, 0.61, 0.355, 1],\n  'power3.inOut': [0.645, 0.045, 0.355, 1],\n\n  'power4.in': [0.895, 0.03, 0.685, 0.22],\n  'power4.out': [0.165, 0.84, 0.44, 1],\n  'power4.inOut': [0.77, 0, 0.175, 1],\n\n  'sine.in': [0.47, 0, 0.745, 0.715],\n  'sine.out': [0.39, 0.575, 0.565, 1],\n  'sine.inOut': [0.445, 0.05, 0.55, 0.95],\n\n  'expo.in': [0.95, 0.05, 0.795, 0.035],\n  'expo.out': [0.19, 1, 0.22, 1],\n  'expo.inOut': [1, 0, 0, 1],\n\n  'circ.in': [0.6, 0.04, 0.98, 0.335],\n  'circ.out': [0.075, 0.82, 0.165, 1],\n  'circ.inOut': [0.785, 0.135, 0.15, 0.86],\n\n  'back.in': [0.6, -0.28, 0.735, 0.045],\n  'back.out': [0.175, 0.885, 0.32, 1.275],\n  'back.inOut': [0.68, -0.55, 0.265, 1.55],\n} as const;",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/gsap-transitions/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-gsap-transitions';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-gsap-transitions',
  },
  'default-use-animation-variants': {
    name: 'default-use-animation-variants',
    description:
      'Use animation variants hook, for your motion components, allows to animate component with transforms, opacity, and blur with default style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/use-animation-variants/default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/utils/use-animation-variants.tsx',
        content:
          "import * as React from 'react';\n\nexport type AnimationT =\n  | 'left'\n  | 'right'\n  | 'top'\n  | 'bottom'\n  | 'z'\n  | 'blur'\n  | undefined;\n\nexport function useAnimationVariants(animation?: AnimationT) {\n  return React.useMemo(\n    () => ({\n      hidden: {\n        x: animation === 'left' ? '-100%' : animation === 'right' ? '100%' : 0,\n        y: animation === 'top' ? '-100%' : animation === 'bottom' ? '100%' : 0,\n        scale: animation === 'z' ? 0 : 1,\n        filter: animation === 'blur' ? 'blur(10px)' : 'blur(0px)',\n        opacity: 0,\n      },\n      visible: {\n        x: 0,\n        y: 0,\n        scale: 1,\n        filter: 'blur(0px)',\n        opacity: 1,\n      },\n    }),\n    [animation],\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/use-animation-variants/default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'default-use-animation-variants';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/default-use-animation-variants',
  },
  'shadcn-default-use-animation-variants': {
    name: 'shadcn-default-use-animation-variants',
    description:
      'Use animation variants hook, for your motion components, allows to animate component with transforms, opacity, and blur with shadcn-default style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/use-animation-variants/shadcn-default/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/utils/use-animation-variants.tsx',
        content:
          "import * as React from 'react';\n\nexport type AnimationT =\n  | 'left'\n  | 'right'\n  | 'top'\n  | 'bottom'\n  | 'z'\n  | 'blur'\n  | undefined;\n\nexport function useAnimationVariants(animation?: AnimationT) {\n  return React.useMemo(\n    () => ({\n      hidden: {\n        x: animation === 'left' ? '-100%' : animation === 'right' ? '100%' : 0,\n        y: animation === 'top' ? '-100%' : animation === 'bottom' ? '100%' : 0,\n        scale: animation === 'z' ? 0 : 1,\n        filter: animation === 'blur' ? 'blur(10px)' : 'blur(0px)',\n        opacity: 0,\n      },\n      visible: {\n        x: 0,\n        y: 0,\n        scale: 1,\n        filter: 'blur(0px)',\n        opacity: 1,\n      },\n    }),\n    [animation],\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/use-animation-variants/shadcn-default/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-default-use-animation-variants';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-default-use-animation-variants',
  },
  'shadcn-new-york-use-animation-variants': {
    name: 'shadcn-new-york-use-animation-variants',
    description:
      'Use animation variants hook, for your motion components, allows to animate component with transforms, opacity, and blur with shadcn-new-york style.',
    type: 'registry:hook',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    styles: undefined,
    files: [
      {
        path: '__registry__/utils/use-animation-variants/shadcn-new-york/index.tsx',
        type: 'registry:ui',
        target: 'components/systaliko-ui/utils/use-animation-variants.tsx',
        content:
          "import * as React from 'react';\n\nexport type AnimationT =\n  | 'left'\n  | 'right'\n  | 'top'\n  | 'bottom'\n  | 'z'\n  | 'blur'\n  | undefined;\n\nexport function useAnimationVariants(animation?: AnimationT) {\n  return React.useMemo(\n    () => ({\n      hidden: {\n        x: animation === 'left' ? '-100%' : animation === 'right' ? '100%' : 0,\n        y: animation === 'top' ? '-100%' : animation === 'bottom' ? '100%' : 0,\n        scale: animation === 'z' ? 0 : 1,\n        filter: animation === 'blur' ? 'blur(10px)' : 'blur(0px)',\n        opacity: 0,\n      },\n      visible: {\n        x: 0,\n        y: 0,\n        scale: 1,\n        filter: 'blur(0px)',\n        opacity: 1,\n      },\n    }),\n    [animation],\n  );\n}",
      },
    ],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/__registry__/utils/use-animation-variants/shadcn-new-york/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'shadcn-new-york-use-animation-variants';
        const Comp = mod.default || mod[exportName];
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/shadcn-new-york-use-animation-variants',
  },
};
